{
    "definitions": {
        "agent": {
            "description": "Represents a known agent instance.",
            "properties": {
                "authorized": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "authorizedInfo": {
                    "$ref": "#/definitions/authorizedInfo"
                },
                "build": {
                    "$ref": "#/definitions/build"
                },
                "builds": {
                    "$ref": "#/definitions/builds"
                },
                "cloudImage": {
                    "$ref": "#/definitions/cloudImage"
                },
                "cloudInstance": {
                    "$ref": "#/definitions/cloudInstance"
                },
                "compatibilityPolicy": {
                    "$ref": "#/definitions/compatibilityPolicy"
                },
                "compatibleBuildTypes": {
                    "$ref": "#/definitions/buildTypes"
                },
                "connected": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "cpuRank": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "currentAgentVersion": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "disconnectionComment": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "enabledInfo": {
                    "$ref": "#/definitions/enabledInfo"
                },
                "environment": {
                    "$ref": "#/definitions/environment"
                },
                "host": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "idleSinceTime": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "incompatibleBuildTypes": {
                    "$ref": "#/definitions/compatibilities"
                },
                "ip": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "javaOutdated": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "lastActivityTime": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "links": {
                    "$ref": "#/definitions/links"
                },
                "locator": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "outdated": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "pluginsOutdated": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "pool": {
                    "$ref": "#/definitions/agentPool"
                },
                "port": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "properties": {
                    "$ref": "#/definitions/properties"
                },
                "protocol": {
                    "enum": [
                        "unidirectional",
                        "bidirectional"
                    ],
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "registrationTimestamp": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "typeId": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "uptodate": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "version": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "webUrl": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/build-agent.html",
            "x-help-article-name": "Build Agent",
            "x-is-data": true,
            "xml": {
                "name": "agent"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "agent"
        },
        "AgentLocator": {
            "description": "Represents a locator string for filtering Agent entities.",
            "properties": {
                "authorized": {
                    "description": "Is the agent authorized.",
                    "type": "boolean"
                },
                "build": {
                    "description": "Build locator.",
                    "format": "BuildLocator",
                    "type": "string"
                },
                "compatible": {
                    "description": "Compatible build types locator.",
                    "format": "BuildTypeLocator",
                    "type": "string"
                },
                "connected": {
                    "description": "Is the agent connected.",
                    "type": "boolean"
                },
                "count": {
                    "description": "For paginated calls, how many entities to return per page.",
                    "format": "int32",
                    "type": "integer"
                },
                "enabled": {
                    "description": "Is the agent enabled.",
                    "type": "boolean"
                },
                "id": {
                    "description": "Entity ID.",
                    "format": "int32",
                    "type": "integer"
                },
                "ip": {
                    "type": "string"
                },
                "item": {
                    "description": "Supply multiple locators and return a union of the results.",
                    "format": "item:(<locator1>),item:(<locator2>...)",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parameter": {
                    "type": "string"
                },
                "pool": {
                    "description": "Agent pool locator.",
                    "format": "AgentPoolLocator",
                    "type": "string"
                },
                "start": {
                    "description": "For paginated calls, from which entity to start rendering the page.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object",
            "x-base-entity": "Agent",
            "x-is-locator": true,
            "x-model-examples": [
                "`name:DefaultAgent` \u2014 find agent with `DefaultAgent` name.",
                "`pool:(<agentPoolLocator>),connected:true` \u2014 find all connected agents in a pool found by `agentPoolLocator`."
            ],
            "x-object-type": "LocatorEntity",
            "x-subpackage": "locator"
        },
        "agentPool": {
            "description": "Represents an agent pool instance.",
            "properties": {
                "agents": {
                    "$ref": "#/definitions/agents"
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "locator": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "maxAgents": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "ownerProject": {
                    "$ref": "#/definitions/project"
                },
                "projects": {
                    "$ref": "#/definitions/projects"
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/agent-pool.html",
            "x-help-article-name": "Agent Pool",
            "x-is-data": true,
            "xml": {
                "name": "agentPool"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "agent"
        },
        "AgentPoolLocator": {
            "description": "Represents a locator string for filtering AgentPool entities.",
            "properties": {
                "agent": {
                    "description": "Pool's agents locator.",
                    "format": "AgentLocator",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "item": {
                    "description": "Supply multiple locators and return a union of the results.",
                    "format": "item:(<locator1>),item:(<locator2>...)",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "project": {
                    "description": "Pool's associated projects locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                }
            },
            "type": "object",
            "x-base-entity": "AgentPool",
            "x-is-locator": true,
            "x-model-examples": [
                "`name:Default` \u2014 find `Default` agent pool details.",
                "`project:(<projectLocator>)` \u2014 find pool associated with project found by `projectLocator`."
            ],
            "x-object-type": "LocatorEntity",
            "x-subpackage": "locator"
        },
        "agentPools": {
            "description": "Represents a paginated list of AgentPool entities.",
            "properties": {
                "agentPool": {
                    "items": {
                        "$ref": "#/definitions/agentPool",
                        "xml": {
                            "name": "agentPool"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                },
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "nextHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "prevHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-base-entity": "AgentPool",
            "x-is-data": true,
            "x-is-list": true,
            "x-is-paginated": true,
            "xml": {
                "name": "agentPools"
            },
            "x-object-type": "PaginatedEntity",
            "x-subpackage": "agent"
        },
        "agent-requirement": {
            "description": "Represents a requirement to agent parameters.",
            "properties": {
                "disabled": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "inherited": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "properties": {
                    "$ref": "#/definitions/properties"
                },
                "type": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/agent-requirements.html",
            "x-help-article-name": "Agent Requirements",
            "x-is-data": true,
            "xml": {
                "name": "agent-requirement"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "buildType"
        },
        "agent-requirements": {
            "description": "Represents a list of AgentRequirement entities.",
            "properties": {
                "agent-requirement": {
                    "items": {
                        "$ref": "#/definitions/agent-requirement",
                        "xml": {
                            "name": "agent-requirement"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                },
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-base-entity": "AgentRequirement",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "agent-requirements"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "buildType"
        },
        "agents": {
            "description": "Represents a paginated list of Agent entities.",
            "properties": {
                "agent": {
                    "items": {
                        "$ref": "#/definitions/agent",
                        "xml": {
                            "name": "agent"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                },
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "nextHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "prevHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-base-entity": "Agent",
            "x-is-data": true,
            "x-is-list": true,
            "x-is-paginated": true,
            "xml": {
                "name": "agents"
            },
            "x-object-type": "PaginatedEntity",
            "x-subpackage": "agent"
        },
        "approvalInfo": {
            "description": "Represents approval status for this build, if applicable.",
            "properties": {
                "canBeApprovedByCurrentUser": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "configurationValid": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "groupApprovals": {
                    "$ref": "#/definitions/groupApprovals"
                },
                "status": {
                    "enum": [
                        "waitingForApproval",
                        "approved",
                        "timedOut",
                        "canceled"
                    ],
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "timeoutTimestamp": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "userApprovals": {
                    "$ref": "#/definitions/userApprovals"
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "approvalInfo"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "buildapproval"
        },
        "artifact-dependencies": {
            "description": "Represents a list of ArtifactDependency entities.",
            "properties": {
                "artifact-dependency": {
                    "items": {
                        "$ref": "#/definitions/artifact-dependency",
                        "xml": {
                            "name": "artifact-dependency"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                },
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "replace": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-base-entity": "ArtifactDependency",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "artifact-dependencies"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "buildType"
        },
        "artifact-dependency": {
            "description": "Represents an artifact dependency relation.",
            "properties": {
                "disabled": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "inherited": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "properties": {
                    "$ref": "#/definitions/properties"
                },
                "source-buildType": {
                    "$ref": "#/definitions/buildType"
                },
                "type": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/dependent-build.html#Artifact+Dependency",
            "x-help-article-name": "Artifact Dependency",
            "x-is-data": true,
            "xml": {
                "name": "artifact-dependency"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "buildType"
        },
        "ArtifactDownloadInfo": {
            "properties": {
                "downloadTimestamp": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "path": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "x-object-type": "DataEntity",
            "x-subpackage": "builddownloadedArtifacts"
        },
        "auditAction": {
            "description": "Represents an audit action.",
            "properties": {
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "pattern": {
                    "type": "string"
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/tracking-user-actions.html",
            "x-help-article-name": "Audit",
            "x-is-data": true,
            "xml": {
                "name": "auditAction"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "audit"
        },
        "auditEvent": {
            "description": "Represents an audit event including a user and affected entities.",
            "properties": {
                "action": {
                    "$ref": "#/definitions/auditAction"
                },
                "comment": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "relatedEntities": {
                    "$ref": "#/definitions/relatedEntities"
                },
                "timestamp": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/user"
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/tracking-user-actions.html",
            "x-help-article-name": "Audit",
            "x-is-data": true,
            "xml": {
                "name": "auditEvent"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "audit"
        },
        "auditEvents": {
            "description": "Represents a paginated list of AuditEvent entities.",
            "properties": {
                "auditEvent": {
                    "items": {
                        "$ref": "#/definitions/auditEvent",
                        "xml": {
                            "name": "auditEvent"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                },
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "nextHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "prevHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-base-entity": "AuditEvent",
            "x-is-data": true,
            "x-is-list": true,
            "x-is-paginated": true,
            "xml": {
                "name": "auditEvents"
            },
            "x-object-type": "PaginatedEntity",
            "x-subpackage": "audit"
        },
        "AuditLocator": {
            "description": "Represents a locator string for filtering AuditEvent entities.",
            "properties": {
                "action": {
                    "description": "Use `$help` to get the full list of supported actions.",
                    "type": "string"
                },
                "affectedProject": {
                    "description": "Related project locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "buildType": {
                    "description": "Related build type or template locator.",
                    "format": "BuildTypeLocator",
                    "type": "string"
                },
                "count": {
                    "description": "For paginated calls, how many entities to return per page.",
                    "format": "int32",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "item": {
                    "description": "Supply multiple locators and return a union of the results.",
                    "format": "item:(<locator1>),item:(<locator2>...)",
                    "type": "string"
                },
                "lookupLimit": {
                    "description": "Limit processing to the latest `<lookupLimit>` entities.",
                    "format": "int32",
                    "type": "integer"
                },
                "start": {
                    "description": "For paginated calls, from which entity to start rendering the page.",
                    "format": "int32",
                    "type": "integer"
                },
                "systemAction": {
                    "format": "boolean",
                    "type": "string"
                },
                "user": {
                    "description": "Locator of user who caused the audit event.",
                    "format": "UserLocator",
                    "type": "string"
                }
            },
            "type": "object",
            "x-base-entity": "AuditEvent",
            "x-is-locator": true,
            "x-model-examples": [
                "`count:1000` \u2014 find last `1000` audit events.",
                "`user:(<userLocator>)` \u2014 find last 100 events by user found by `userLocator`."
            ],
            "x-object-type": "LocatorEntity",
            "x-subpackage": "locator"
        },
        "authorizedInfo": {
            "description": "Represents agent authorization data.",
            "properties": {
                "comment": {
                    "$ref": "#/definitions/comment"
                },
                "status": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/build-agent.html",
            "x-help-article-name": "Build Agent",
            "x-is-data": true,
            "xml": {
                "name": "authorizedInfo"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "agent"
        },
        "branch": {
            "description": "Represents a branch on which this build has been started.",
            "properties": {
                "active": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "builds": {
                    "$ref": "#/definitions/builds"
                },
                "default": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "groupFlag": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "internalName": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "lastActivity": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "unspecified": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/working-with-feature-branches.html",
            "x-help-article-name": "Feature Branches",
            "x-is-data": true,
            "xml": {
                "name": "branch"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "build"
        },
        "branches": {
            "description": "Represents a list of Branch entities.",
            "properties": {
                "branch": {
                    "items": {
                        "$ref": "#/definitions/branch",
                        "xml": {
                            "name": "branch"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                },
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-base-entity": "Branch",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "branches"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "build"
        },
        "BranchLocator": {
            "description": "Represents a locator string for filtering Branch entities.",
            "properties": {
                "branched": {
                    "description": "Is feature branch.",
                    "format": "boolean",
                    "type": "string"
                },
                "build": {
                    "description": "Build locator.",
                    "format": "BuildLocator",
                    "type": "string"
                },
                "buildType": {
                    "description": "Build type locator.",
                    "format": "BuildTypeLocator",
                    "type": "string"
                },
                "default": {
                    "description": "Is default branch.",
                    "format": "boolean",
                    "type": "string"
                },
                "item": {
                    "description": "Supply multiple locators and return a union of the results.",
                    "format": "item:(<locator1>),item:(<locator2>...)",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "policy": {
                    "enum": [
                        "VCS_BRANCHES",
                        "ACTIVE_VCS_BRANCHES",
                        "HISTORY_BRANCHES",
                        "ACTIVE_HISTORY_BRANCHES",
                        "ACTIVE_HISTORY_AND_ACTIVE_VCS_BRANCHES",
                        "ALL_BRANCHES"
                    ],
                    "type": "string"
                }
            },
            "type": "object",
            "x-base-entity": "Branch",
            "x-is-locator": true,
            "x-model-examples": [
                "`build:<buildLocator>` \u2014 find branch with which the build found by `buildLocator` was started.",
                "`buildType:<buildTypeLocator>` \u2014 find branches of a build configuration found by `buildTypeLocator`."
            ],
            "x-object-type": "LocatorEntity",
            "x-subpackage": "locator"
        },
        "branchVersion": {
            "description": "Represents a branch version.",
            "properties": {
                "active": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "builds": {
                    "$ref": "#/definitions/builds"
                },
                "default": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "groupFlag": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "internalName": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "lastActivity": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "unspecified": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "version": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "branchVersion"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "change"
        },
        "build": {
            "description": "Represents a build instance.",
            "properties": {
                "agent": {
                    "$ref": "#/definitions/agent"
                },
                "approvalInfo": {
                    "$ref": "#/definitions/approvalInfo"
                },
                "artifact-dependencies": {
                    "$ref": "#/definitions/builds"
                },
                "artifactDependencyChanges": {
                    "$ref": "#/definitions/buildChanges"
                },
                "artifacts": {
                    "$ref": "#/definitions/files"
                },
                "artifactsDirectory": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "attributes": {
                    "$ref": "#/definitions/entries"
                },
                "branchName": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "buildType": {
                    "$ref": "#/definitions/buildType"
                },
                "buildTypeId": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "buildTypeInternalId": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "canceledInfo": {
                    "$ref": "#/definitions/comment"
                },
                "chainModificationId": {
                    "type": "string"
                },
                "changes": {
                    "$ref": "#/definitions/changes"
                },
                "changesCollectingInProgress": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "comment": {
                    "$ref": "#/definitions/comment"
                },
                "compatibleAgents": {
                    "$ref": "#/definitions/agents"
                },
                "composite": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "currentSettingsHash": {
                    "type": "string"
                },
                "custom-artifact-dependencies": {
                    "$ref": "#/definitions/artifact-dependencies"
                },
                "customization": {
                    "$ref": "#/definitions/customizations"
                },
                "customized": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "defaultBranch": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "delayedByBuild": {
                    "$ref": "#/definitions/build"
                },
                "detachedFromAgent": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "downloadedArtifacts": {
                    "$ref": "#/definitions/downloadedArtifacts"
                },
                "failedToStart": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "finishDate": {
                    "type": "string"
                },
                "finishEstimate": {
                    "type": "string"
                },
                "finishOnAgentDate": {
                    "type": "string"
                },
                "firstBuildWithSameChanges": {
                    "$ref": "#/definitions/build"
                },
                "history": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "format": "int64",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "lastChanges": {
                    "$ref": "#/definitions/changes"
                },
                "limitedChangesCount": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "links": {
                    "$ref": "#/definitions/links"
                },
                "locator": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/datas"
                },
                "modificationId": {
                    "type": "string"
                },
                "number": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "percentageComplete": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "personal": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "pinInfo": {
                    "$ref": "#/definitions/comment"
                },
                "pinned": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "plannedAgent": {
                    "$ref": "#/definitions/agent"
                },
                "problemOccurrences": {
                    "$ref": "#/definitions/problemOccurrences"
                },
                "properties": {
                    "$ref": "#/definitions/properties"
                },
                "queuedDate": {
                    "type": "string"
                },
                "queuedWaitReasons": {
                    "$ref": "#/definitions/properties"
                },
                "queuePosition": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "related": {
                    "$ref": "#/definitions/related"
                },
                "relatedIssues": {
                    "$ref": "#/definitions/issuesUsages"
                },
                "replacementIds": {
                    "$ref": "#/definitions/items"
                },
                "resultingProperties": {
                    "$ref": "#/definitions/properties"
                },
                "revisions": {
                    "$ref": "#/definitions/Revisions"
                },
                "running": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "running-info": {
                    "$ref": "#/definitions/progress-info"
                },
                "settingsHash": {
                    "type": "string"
                },
                "snapshot-dependencies": {
                    "$ref": "#/definitions/builds"
                },
                "startDate": {
                    "type": "string"
                },
                "startEstimate": {
                    "type": "string"
                },
                "state": {
                    "enum": [
                        "queued",
                        "finished",
                        "running",
                        "deleted",
                        "unknown"
                    ],
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "statistics": {
                    "$ref": "#/definitions/properties"
                },
                "status": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "statusChangeComment": {
                    "$ref": "#/definitions/comment"
                },
                "statusText": {
                    "type": "string"
                },
                "tags": {
                    "$ref": "#/definitions/tags"
                },
                "taskId": {
                    "format": "int64",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "testOccurrences": {
                    "$ref": "#/definitions/testOccurrences"
                },
                "triggered": {
                    "$ref": "#/definitions/TriggeredBy"
                },
                "triggeringOptions": {
                    "$ref": "#/definitions/buildTriggeringOptions"
                },
                "unspecifiedBranch": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "usedByOtherBuilds": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "user": {
                    "$ref": "#/definitions/user"
                },
                "vcsLabels": {
                    "items": {
                        "$ref": "#/definitions/vcsLabel"
                    },
                    "type": "array"
                },
                "versionedSettingsRevision": {
                    "$ref": "#/definitions/Revision"
                },
                "waitReason": {
                    "type": "string"
                },
                "webUrl": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "build"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "build"
        },
        "buildCancelRequest": {
            "description": "Represents a cancel request for the specific build.",
            "properties": {
                "comment": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "readdIntoQueue": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "buildCancelRequest"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "build"
        },
        "buildChange": {
            "description": "Represents links to the next or previous build.",
            "properties": {
                "nextBuild": {
                    "$ref": "#/definitions/build"
                },
                "prevBuild": {
                    "$ref": "#/definitions/build"
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "buildChange"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "change"
        },
        "buildChanges": {
            "description": "Represents a list of BuildChange entities.",
            "properties": {
                "buildChange": {
                    "items": {
                        "$ref": "#/definitions/buildChange",
                        "xml": {
                            "name": "buildChange"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                },
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-base-entity": "BuildChange",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "buildChanges"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "change"
        },
        "BuildLocator": {
            "description": "Represents a locator string for filtering Build entities.",
            "properties": {
                "affectedProject": {
                    "description": "Project (direct or indirect parent) locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "agent": {
                    "description": "Agent locator.",
                    "format": "AgentLocator",
                    "type": "string"
                },
                "agentTypeId": {
                    "description": "typeId of agent used to execute build.",
                    "format": "int32",
                    "type": "integer"
                },
                "any": {
                    "description": "State can be any.",
                    "type": "boolean"
                },
                "artifactDependency": {
                    "type": "string"
                },
                "branch": {
                    "description": "Branch locator.",
                    "format": "BranchLocator",
                    "type": "string"
                },
                "buildType": {
                    "description": "Build type locator.",
                    "format": "BuildTypeLocator",
                    "type": "string"
                },
                "canceled": {
                    "description": "Is canceled.",
                    "type": "boolean"
                },
                "compatibleAgent": {
                    "description": "Agent locator.",
                    "format": "AgentLocator",
                    "type": "string"
                },
                "composite": {
                    "description": "Is composite.",
                    "type": "boolean"
                },
                "count": {
                    "description": "For paginated calls, how many entities to return per page.",
                    "format": "int32",
                    "type": "integer"
                },
                "defaultFilter": {
                    "description": "If true, applies default filter which returns only \"normal\" builds (finished builds which are not canceled, not failed-to-start, not personal, and on default branch (in branched build configurations)).",
                    "type": "boolean"
                },
                "failedToStart": {
                    "description": "Is failed to start.",
                    "type": "boolean"
                },
                "finishDate": {
                    "description": "Requires either date or build dimension.",
                    "format": "date:<yyyyMMddTHHmmss+ZZZZ>,build:<build locator>,condition:<before/after>",
                    "type": "string"
                },
                "finished": {
                    "description": "Is finished.",
                    "type": "boolean"
                },
                "hanging": {
                    "description": "Is hanging.",
                    "type": "boolean"
                },
                "history": {
                    "description": "Is history build.",
                    "type": "boolean"
                },
                "id": {
                    "description": "Entity ID.",
                    "format": "int32",
                    "type": "integer"
                },
                "item": {
                    "description": "Supply multiple locators and return a union of the results.",
                    "format": "item:(<locator1>),item:(<locator2>...)",
                    "type": "string"
                },
                "lookupLimit": {
                    "description": "Limit processing to the latest `<lookupLimit>` entities.",
                    "format": "int32",
                    "type": "integer"
                },
                "number": {
                    "type": "string"
                },
                "personal": {
                    "description": "Is a personal build.",
                    "type": "boolean"
                },
                "pinned": {
                    "description": "Is pinned.",
                    "type": "boolean"
                },
                "project": {
                    "description": "Project (direct parent) locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "property": {
                    "enum": [
                        "exists",
                        "not-exists",
                        "equals",
                        "does-not-equal",
                        "starts-with",
                        "contains",
                        "does-not-contain",
                        "ends-with",
                        "any",
                        "matches",
                        "does-not-match",
                        "more-than",
                        "no-more-than",
                        "less-than",
                        "no-less-than",
                        "ver-more-than",
                        "ver-no-more-than",
                        "ver-less-than",
                        "ver-no-less-than"
                    ],
                    "format": "property:(name:<name>,value:<value>,matchType:<matchType>)",
                    "type": "string"
                },
                "queued": {
                    "description": "Is queued.",
                    "type": "boolean"
                },
                "queuedDate": {
                    "description": "Requires either date or build dimension.",
                    "format": "date:<yyyyMMddTHHmmss+ZZZZ>,build:<build locator>,condition:<before/after>",
                    "type": "string"
                },
                "revision": {
                    "description": "Build revision.",
                    "type": "string"
                },
                "running": {
                    "description": "Is running.",
                    "type": "boolean"
                },
                "snapshotDependency": {
                    "type": "string"
                },
                "start": {
                    "description": "For paginated calls, from which entity to start rendering the page.",
                    "format": "int32",
                    "type": "integer"
                },
                "startDate": {
                    "description": "Requires either date or build dimension.",
                    "format": "date:<yyyyMMddTHHmmss+ZZZZ>,build:<build locator>,condition:<before/after>",
                    "type": "string"
                },
                "state": {
                    "enum": [
                        "queued",
                        "running",
                        "finished",
                        "any"
                    ],
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tag": {
                    "description": "Tag locator.",
                    "format": "TagLocator",
                    "type": "string"
                },
                "taskId": {
                    "description": "ID of a build or build promotion.",
                    "format": "int32",
                    "type": "integer"
                },
                "user": {
                    "description": "For personal builds checks the owner of the build, triggerring user in other cases.",
                    "format": "UserLocator",
                    "type": "string"
                }
            },
            "type": "object",
            "x-base-entity": "Build",
            "x-is-locator": true,
            "x-model-examples": [
                "`id:1` \u2014 find build with ID `1`.",
                "`buildType:<buildTypeLocator>` \u2014 find builds under build configuration found by `buildTypeLocator`.",
                "`defaultFilter:false,agent:<agentLocator>` \u2014 find builds executed on agent found by `agentLocator`, with `defaultFilter` disabled (see below)."
            ],
            "x-object-type": "LocatorEntity",
            "x-subpackage": "locator"
        },
        "BuildQueueLocator": {
            "description": "Represents a locator string for filtering Build entities.",
            "properties": {
                "agent": {
                    "description": "Agent locator.",
                    "format": "AgentLocator",
                    "type": "string"
                },
                "buildType": {
                    "description": "Build type locator.",
                    "format": "BuildTypeLocator",
                    "type": "string"
                },
                "count": {
                    "description": "For paginated calls, how many entities to return per page.",
                    "format": "int32",
                    "type": "integer"
                },
                "id": {
                    "description": "Entity ID.",
                    "format": "int32",
                    "type": "integer"
                },
                "item": {
                    "description": "Supply multiple locators and return a union of the results.",
                    "format": "item:(<locator1>),item:(<locator2>...)",
                    "type": "string"
                },
                "personal": {
                    "description": "Is personal.",
                    "type": "boolean"
                },
                "pool": {
                    "description": "Agent pool locator.",
                    "format": "AgentPoolLocator",
                    "type": "string"
                },
                "project": {
                    "description": "Project locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "start": {
                    "description": "For paginated calls, from which entity to start rendering the page.",
                    "format": "int32",
                    "type": "integer"
                },
                "taskId": {
                    "type": "string"
                },
                "user": {
                    "description": "User locator.",
                    "format": "UserLocator",
                    "type": "string"
                }
            },
            "type": "object",
            "x-base-entity": "Build",
            "x-is-locator": true,
            "x-model-examples": [
                "`buildType:<buildTypeLocator>` \u2014 find queued builds under build configuration found by buildTypeLocator.",
                "`user:<userLocator>` \u2014 find queued builds started by user found by userLocator."
            ],
            "x-object-type": "LocatorEntity",
            "x-subpackage": "locator"
        },
        "builds": {
            "description": "Represents a paginated list of Build entities.",
            "properties": {
                "build": {
                    "items": {
                        "$ref": "#/definitions/build",
                        "xml": {
                            "name": "build"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                },
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "nextHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "prevHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-base-entity": "Build",
            "x-is-data": true,
            "x-is-list": true,
            "x-is-paginated": true,
            "xml": {
                "name": "builds"
            },
            "x-object-type": "PaginatedEntity",
            "x-subpackage": "build"
        },
        "BuildStatusUpdate": {
            "properties": {
                "comment": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "status": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "x-object-type": "DataEntity",
            "x-subpackage": "build"
        },
        "BuildTriggerCustomization": {
            "description": "Represents build customization settings of a trigger",
            "properties": {
                "enforceCleanCheckout": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "enforceCleanCheckoutForDependencies": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "parameters": {
                    "$ref": "#/definitions/properties"
                }
            },
            "type": "object",
            "x-is-data": true,
            "x-object-type": "DataEntity",
            "x-subpackage": "buildType"
        },
        "buildTriggeringOptions": {
            "description": "Represents the dependency/queue settings with which this build has been started.",
            "properties": {
                "cleanSources": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "cleanSourcesInAllDependencies": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "freezeSettings": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "queueAtTop": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "rebuildAllDependencies": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "rebuildDependencies": {
                    "$ref": "#/definitions/buildTypes"
                },
                "rebuildFailedOrIncompleteDependencies": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "tagDependencies": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/triggering-a-custom-build.html#Run+Custom+Build+dialog",
            "x-help-article-name": "Custom Build",
            "x-is-data": true,
            "xml": {
                "name": "buildTriggeringOptions"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "build"
        },
        "buildType": {
            "description": "Represents a build configuration.",
            "properties": {
                "agent-requirements": {
                    "$ref": "#/definitions/agent-requirements"
                },
                "artifact-dependencies": {
                    "$ref": "#/definitions/artifact-dependencies"
                },
                "branches": {
                    "$ref": "#/definitions/branches"
                },
                "builds": {
                    "$ref": "#/definitions/builds"
                },
                "compatibleAgents": {
                    "$ref": "#/definitions/agents"
                },
                "description": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "externalStatusAllowed": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "features": {
                    "$ref": "#/definitions/features"
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "inherited": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "internalId": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "investigations": {
                    "$ref": "#/definitions/investigations"
                },
                "links": {
                    "$ref": "#/definitions/links"
                },
                "locator": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "parameters": {
                    "$ref": "#/definitions/properties"
                },
                "pauseComment": {
                    "$ref": "#/definitions/comment"
                },
                "paused": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "project": {
                    "$ref": "#/definitions/project"
                },
                "projectId": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "projectInternalId": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "projectName": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "settings": {
                    "$ref": "#/definitions/properties"
                },
                "snapshot-dependencies": {
                    "$ref": "#/definitions/snapshot-dependencies"
                },
                "steps": {
                    "$ref": "#/definitions/steps"
                },
                "template": {
                    "$ref": "#/definitions/buildType"
                },
                "templateFlag": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "templates": {
                    "$ref": "#/definitions/buildTypes"
                },
                "triggers": {
                    "$ref": "#/definitions/triggers"
                },
                "type": {
                    "enum": [
                        "regular",
                        "composite",
                        "deployment"
                    ],
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "uuid": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "vcs-root-entries": {
                    "$ref": "#/definitions/vcs-root-entries"
                },
                "vcsRootInstances": {
                    "$ref": "#/definitions/vcs-root-instances"
                },
                "webUrl": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/creating-and-editing-build-configurations.html",
            "x-help-article-name": "Build Configuration",
            "x-is-data": true,
            "xml": {
                "name": "buildType"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "buildType"
        },
        "BuildTypeLocator": {
            "description": "Represents a locator string for filtering BuildType entities.",
            "properties": {
                "affectedProject": {
                    "description": "Project (direct or indirect parent) locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "build": {
                    "description": "Build locator.",
                    "format": "BuildLocator",
                    "type": "string"
                },
                "count": {
                    "description": "For paginated calls, how many entities to return per page.",
                    "format": "int32",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "internalId": {
                    "type": "string"
                },
                "item": {
                    "description": "Supply multiple locators and return a union of the results.",
                    "format": "item:(<locator1>),item:(<locator2>...)",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "paused": {
                    "description": "Is paused.",
                    "type": "boolean"
                },
                "project": {
                    "description": "Project (direct parent) locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "start": {
                    "description": "For paginated calls, from which entity to start rendering the page.",
                    "format": "int32",
                    "type": "integer"
                },
                "template": {
                    "description": "Base template locator.",
                    "format": "BuildTypeLocator",
                    "type": "string"
                },
                "templateFlag": {
                    "description": "Is a template.",
                    "type": "boolean"
                },
                "uuid": {
                    "type": "string"
                },
                "vcsRoot": {
                    "description": "VCS root locator.",
                    "format": "VcsRootLocator",
                    "type": "string"
                },
                "vcsRootInstance": {
                    "description": "VCS root instance locator.",
                    "format": "VcsRootInstanceLocator",
                    "type": "string"
                }
            },
            "type": "object",
            "x-base-entity": "BuildType",
            "x-is-locator": true,
            "x-model-examples": [
                "`name:MyBuildType` \u2014 find build configuration with `MyBuildType` name",
                "`project:<projectLocator>` \u2014 find build configurations under project found by `projectLocator`"
            ],
            "x-object-type": "LocatorEntity",
            "x-subpackage": "locator"
        },
        "buildTypes": {
            "description": "Represents a paginated list of BuildType entities.",
            "properties": {
                "buildType": {
                    "items": {
                        "$ref": "#/definitions/buildType",
                        "xml": {
                            "name": "buildType"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                },
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "nextHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "prevHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-base-entity": "BuildType",
            "x-is-data": true,
            "x-is-list": true,
            "x-is-paginated": true,
            "xml": {
                "name": "buildTypes"
            },
            "x-object-type": "PaginatedEntity",
            "x-subpackage": "buildType"
        },
        "change": {
            "description": "Represents a VCS change (commit).",
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/properties"
                },
                "canEditComment": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "comment": {
                    "type": "string"
                },
                "commiter": {
                    "$ref": "#/definitions/commiter"
                },
                "date": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "files": {
                    "$ref": "#/definitions/fileChanges"
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "format": "int64",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "internalVersion": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "locator": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "parentChanges": {
                    "$ref": "#/definitions/changes"
                },
                "parentRevisions": {
                    "$ref": "#/definitions/items"
                },
                "personal": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "registrationDate": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "snapshotDependencyLink": {
                    "$ref": "#/definitions/SnapshotDependencyLink"
                },
                "status": {
                    "$ref": "#/definitions/ChangeStatus"
                },
                "storesProjectSettings": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "type": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/user"
                },
                "username": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "vcsRootInstance": {
                    "$ref": "#/definitions/vcs-root-instance"
                },
                "version": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "webUrl": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/change.html",
            "x-help-article-name": "Change",
            "x-is-data": true,
            "xml": {
                "name": "change"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "change"
        },
        "ChangeLocator": {
            "description": "Represents a locator string for filtering Change entities.",
            "properties": {
                "affectedProject": {
                    "description": "Project (direct or indirect parent) locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "build": {
                    "description": "Build locator.",
                    "format": "BuildLocator",
                    "type": "string"
                },
                "buildType": {
                    "description": "Build type locator.",
                    "format": "BuildTypeLocator",
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "count": {
                    "description": "For paginated calls, how many entities to return per page.",
                    "format": "int32",
                    "type": "integer"
                },
                "file": {
                    "type": "string"
                },
                "id": {
                    "description": "Entity ID.",
                    "format": "int32",
                    "type": "integer"
                },
                "internalVersion": {
                    "type": "string"
                },
                "item": {
                    "description": "Supply multiple locators and return a union of the results.",
                    "format": "item:(<locator1>),item:(<locator2>...)",
                    "type": "string"
                },
                "pending": {
                    "description": "Is pending.",
                    "type": "boolean"
                },
                "project": {
                    "description": "Project locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "sinceChange": {
                    "description": "Commit SHA since which the changes should be returned.",
                    "type": "string"
                },
                "start": {
                    "description": "For paginated calls, from which entity to start rendering the page.",
                    "format": "int32",
                    "type": "integer"
                },
                "user": {
                    "description": "User locator.",
                    "format": "UserLocator",
                    "type": "string"
                },
                "username": {
                    "description": "VCS side username.",
                    "type": "string"
                },
                "vcsRoot": {
                    "description": "VCS root locator.",
                    "format": "VcsRootLocator",
                    "type": "string"
                },
                "vcsRootInstance": {
                    "description": "VCS instance locator.",
                    "format": "VcsRootInstanceLocator",
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object",
            "x-base-entity": "Change",
            "x-is-locator": true,
            "x-model-examples": [
                "`username:MyVCSUsername` \u2014 find last 100 changes made by user with `MyVCSUsername` VCS username.",
                "`pending:true,buildType:<buildTypeLocator>` \u2014 find all pending changes on build configuration found by `buildTypeLocator`."
            ],
            "x-object-type": "LocatorEntity",
            "x-subpackage": "locator"
        },
        "changes": {
            "description": "Represents a paginated list of Change entities.",
            "properties": {
                "change": {
                    "items": {
                        "$ref": "#/definitions/change",
                        "xml": {
                            "name": "change"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                },
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "nextHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "prevHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-base-entity": "Change",
            "x-is-data": true,
            "x-is-list": true,
            "x-is-paginated": true,
            "xml": {
                "name": "changes"
            },
            "x-object-type": "PaginatedEntity",
            "x-subpackage": "change"
        },
        "ChangeStatus": {
            "description": "Aggregated statuses of the first builds with this change. Fairly expensive to compute.",
            "properties": {
                "cancelledBuilds": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "compilationErrorBuilds": {
                    "$ref": "#/definitions/builds"
                },
                "criticalBuilds": {
                    "$ref": "#/definitions/builds"
                },
                "failedBuilds": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "finishedBuilds": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "newFailedTests": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "newTestsFailedBuilds": {
                    "$ref": "#/definitions/builds"
                },
                "notCriticalBuilds": {
                    "$ref": "#/definitions/builds"
                },
                "otherFailedTests": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "pendingBuildTypes": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "queuedBuildsCount": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "runningBuilds": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "runningSuccessfullyBuilds": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "successfulBuilds": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "totalProblems": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "x-object-type": "DataEntity",
            "x-subpackage": "change"
        },
        "cloudImage": {
            "description": "Represents a cloud instance image saved with a profile.",
            "properties": {
                "agentPoolId": {
                    "format": "int32",
                    "type": "integer"
                },
                "agentTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "errorMessage": {
                    "type": "string"
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "instances": {
                    "$ref": "#/definitions/cloudInstances"
                },
                "locator": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "operatingSystemName": {
                    "type": "string"
                },
                "profile": {
                    "$ref": "#/definitions/cloudProfile"
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/agent-cloud-profile.html",
            "x-help-article-name": "Cloud Profile",
            "x-is-data": true,
            "xml": {
                "name": "cloudImage"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "cloud"
        },
        "CloudImageLocator": {
            "description": "Represents a locator string for filtering CloudImage entities.",
            "properties": {
                "affectedProject": {
                    "description": "Project (direct or indirect parent) locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "agent": {
                    "description": "Agent locator.",
                    "format": "AgentLocator",
                    "type": "string"
                },
                "agentPool": {
                    "description": "Agent pool locator.",
                    "format": "AgentPoolLocator",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "instance": {
                    "description": "Cloud instance locator.",
                    "format": "CloudInstanceLocator",
                    "type": "string"
                },
                "item": {
                    "description": "Supply multiple locators and return a union of the results.",
                    "format": "item:(<locator1>),item:(<locator2>...)",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "profile": {
                    "description": "Cloud profile locator.",
                    "format": "CloudProfileLocator",
                    "type": "string"
                },
                "project": {
                    "description": "Project locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "property": {
                    "enum": [
                        "exists",
                        "not-exists",
                        "equals",
                        "does-not-equal",
                        "starts-with",
                        "contains",
                        "does-not-contain",
                        "ends-with",
                        "any",
                        "matches",
                        "does-not-match",
                        "more-than",
                        "no-more-than",
                        "less-than",
                        "no-less-than",
                        "ver-more-than",
                        "ver-no-more-than",
                        "ver-less-than",
                        "ver-no-less-than"
                    ],
                    "format": "property:(name:<name>,value:<value>,matchType:<matchType>)",
                    "type": "string"
                }
            },
            "type": "object",
            "x-base-entity": "CloudImage",
            "x-is-locator": true,
            "x-model-examples": [
                "`name:MyImage` - find image with name `MyImage`.",
                "`profile:<profileLocator>` - find all images in cloud profile found by `profileLocator`."
            ],
            "x-object-type": "LocatorEntity",
            "x-subpackage": "locator"
        },
        "cloudImages": {
            "description": "Represents a paginated list of CloudImage entities.",
            "properties": {
                "cloudImage": {
                    "items": {
                        "$ref": "#/definitions/cloudImage",
                        "xml": {
                            "name": "cloudImage"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                },
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "nextHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "prevHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-base-entity": "CloudImage",
            "x-is-data": true,
            "x-is-list": true,
            "x-is-paginated": true,
            "xml": {
                "name": "cloudImages"
            },
            "x-object-type": "PaginatedEntity",
            "x-subpackage": "cloud"
        },
        "cloudInstance": {
            "description": "Represents a running cloud instance.",
            "properties": {
                "agent": {
                    "$ref": "#/definitions/agent"
                },
                "errorMessage": {
                    "type": "string"
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "image": {
                    "$ref": "#/definitions/cloudImage"
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "networkAddress": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "startDate": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "state": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/agent-cloud-profile.html",
            "x-help-article-name": "Cloud Profile",
            "x-is-data": true,
            "xml": {
                "name": "cloudInstance"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "cloud"
        },
        "CloudInstanceLocator": {
            "description": "Represents a locator string for filtering CloudInstance entities.",
            "properties": {
                "affectedProject": {
                    "description": "Project (direct or indirect parent) locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "agent": {
                    "description": "Agent locator.",
                    "format": "AgentLocator",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "instance": {
                    "description": "Cloud image locator.",
                    "format": "CloudImageLocator",
                    "type": "string"
                },
                "item": {
                    "description": "Supply multiple locators and return a union of the results.",
                    "format": "item:(<locator1>),item:(<locator2>...)",
                    "type": "string"
                },
                "networkAddress": {
                    "type": "string"
                },
                "profile": {
                    "description": "Cloud profile locator.",
                    "format": "CloudProfileLocator",
                    "type": "string"
                },
                "project": {
                    "description": "Project locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "property": {
                    "enum": [
                        "exists",
                        "not-exists",
                        "equals",
                        "does-not-equal",
                        "starts-with",
                        "contains",
                        "does-not-contain",
                        "ends-with",
                        "any",
                        "matches",
                        "does-not-match",
                        "more-than",
                        "no-more-than",
                        "less-than",
                        "no-less-than",
                        "ver-more-than",
                        "ver-no-more-than",
                        "ver-less-than",
                        "ver-no-less-than"
                    ],
                    "format": "property:(name:<name>,value:<value>,matchType:<matchType>)",
                    "type": "string"
                }
            },
            "type": "object",
            "x-base-entity": "CloudInstance",
            "x-is-locator": true,
            "x-model-examples": [
                "`agent:<agentLocator>` - find cloud instance which hosts agent found by `agentLocator`.",
                "`profile:<profileLocator>` - find all cloud instances in cloud profile found by `profileLocator`."
            ],
            "x-object-type": "LocatorEntity",
            "x-subpackage": "locator"
        },
        "cloudInstances": {
            "description": "Represents a paginated list of CloudInstance entities.",
            "properties": {
                "cloudInstance": {
                    "items": {
                        "$ref": "#/definitions/cloudInstance",
                        "xml": {
                            "name": "cloudInstance"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                },
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "nextHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "prevHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-base-entity": "CloudInstance",
            "x-is-data": true,
            "x-is-list": true,
            "x-is-paginated": true,
            "xml": {
                "name": "cloudInstances"
            },
            "x-object-type": "PaginatedEntity",
            "x-subpackage": "cloud"
        },
        "cloudProfile": {
            "description": "Represents a cloud agent profile.",
            "properties": {
                "cloudProviderId": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "images": {
                    "$ref": "#/definitions/cloudImages"
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "project": {
                    "$ref": "#/definitions/project"
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/agent-cloud-profile.html",
            "x-help-article-name": "Cloud Profile",
            "x-is-data": true,
            "xml": {
                "name": "cloudProfile"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "cloud"
        },
        "CloudProfileLocator": {
            "description": "Represents a locator string for filtering CloudProfile entities.",
            "properties": {
                "affectedProject": {
                    "description": "Project (direct or indirect parent) locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "cloudProviderId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "instance": {
                    "description": "Cloud image locator.",
                    "format": "CloudImageLocator",
                    "type": "string"
                },
                "item": {
                    "description": "Supply multiple locators and return a union of the results.",
                    "format": "item:(<locator1>),item:(<locator2>...)",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "project": {
                    "description": "Project locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "property": {
                    "enum": [
                        "exists",
                        "not-exists",
                        "equals",
                        "does-not-equal",
                        "starts-with",
                        "contains",
                        "does-not-contain",
                        "ends-with",
                        "any",
                        "matches",
                        "does-not-match",
                        "more-than",
                        "no-more-than",
                        "less-than",
                        "no-less-than",
                        "ver-more-than",
                        "ver-no-more-than",
                        "ver-less-than",
                        "ver-no-less-than"
                    ],
                    "format": "property:(name:<name>,value:<value>,matchType:<matchType>)",
                    "type": "string"
                }
            },
            "type": "object",
            "x-base-entity": "CloudProfile",
            "x-is-locator": true,
            "x-model-examples": [
                "`name:MyCloudProfile` - find cloud profile with `MyCloudProfile` name.",
                "`project:<projectLocator>` - find all cloud profiles under project found by `projectLocator`."
            ],
            "x-object-type": "LocatorEntity",
            "x-subpackage": "locator"
        },
        "cloudProfiles": {
            "description": "Represents a paginated list of CloudProfile entities.",
            "properties": {
                "cloudProfile": {
                    "items": {
                        "$ref": "#/definitions/cloudProfile",
                        "xml": {
                            "name": "cloudProfile"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                },
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "nextHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "prevHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-base-entity": "CloudProfile",
            "x-is-data": true,
            "x-is-list": true,
            "x-is-paginated": true,
            "xml": {
                "name": "cloudProfiles"
            },
            "x-object-type": "PaginatedEntity",
            "x-subpackage": "cloud"
        },
        "comment": {
            "description": "Represents a dated comment of the specific user.",
            "properties": {
                "text": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/user"
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "comment"
            },
            "x-object-type": "DataEntity"
        },
        "commiter": {
            "description": "Represents a commiter to a VCS.",
            "properties": {
                "users": {
                    "$ref": "#/definitions/users"
                },
                "vcsUsername": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "commiter"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "change"
        },
        "compatibilities": {
            "description": "Represents a list of Compatibility entities.",
            "properties": {
                "compatibility": {
                    "items": {
                        "$ref": "#/definitions/compatibility",
                        "xml": {
                            "name": "compatibility"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                },
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-base-entity": "Compatibility",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "compatibilities"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "agent"
        },
        "compatibility": {
            "description": "Represents a compatibility relation between the agent and build configuration.",
            "properties": {
                "agent": {
                    "$ref": "#/definitions/agent"
                },
                "buildType": {
                    "$ref": "#/definitions/buildType"
                },
                "compatible": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "unmetRequirements": {
                    "$ref": "#/definitions/requirements"
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "compatibility"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "agent"
        },
        "compatibilityPolicy": {
            "description": "Represents a build configuration run policy and included build configurations.",
            "properties": {
                "buildTypes": {
                    "$ref": "#/definitions/buildTypes"
                },
                "policy": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "compatibilityPolicy"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "agent"
        },
        "customizations": {
            "description": "Represents build customizations (artifact dependency overrides, custom parameters or changesets).",
            "properties": {
                "artifactDependencies": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "type": "object"
                },
                "changes": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "type": "object"
                },
                "parameters": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "customizations"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "build"
        },
        "datas": {
            "description": "Represents a list of MetaData entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "data": {
                    "items": {
                        "$ref": "#/definitions/metaData",
                        "xml": {
                            "name": "data"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "MetaData",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "datas"
            },
            "x-object-type": "ListEntity"
        },
        "disabledResponsibilities": {
            "description": "Represents a set of responsibilities that are currently disabled but can be enabled on a TeamCity node.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "responsibility": {
                    "items": {
                        "$ref": "#/definitions/responsibility",
                        "xml": {
                            "name": "responsibility"
                        }
                    },
                    "type": "array"
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/multinode-setup.html",
            "x-help-article-name": "Multi-node setup",
            "x-is-data": true,
            "xml": {
                "name": "disabledResponsibilities"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "nodes"
        },
        "downloadedArtifacts": {
            "description": "Collection of artifacts metadata which were downloaded from dependencies of this build or delivered to ones depending on this build.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "downloadInfo": {
                    "items": {
                        "$ref": "#/definitions/downloadInfo",
                        "xml": {
                            "name": "downloadInfo"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                },
                "unfilteredCount": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-base-entity": "DownloadInfo",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "downloadedArtifacts"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "builddownloadedArtifacts"
        },
        "downloadInfo": {
            "description": "List of metadata on artifacts downloaded from [or provided by] a build.",
            "properties": {
                "artifactInfo": {
                    "items": {
                        "$ref": "#/definitions/ArtifactDownloadInfo",
                        "xml": {
                            "name": "artifactInfo"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                },
                "build": {
                    "$ref": "#/definitions/build"
                },
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-base-entity": "ArtifactInfo",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "downloadInfo"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "builddownloadedArtifacts"
        },
        "effectiveResponsibilities": {
            "description": "Represents a set of effective responsibilities of a TeamCity node. A responsibility becomes effective once it is enabled in the server configuration and a responsible node detects this change and updates its state.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "responsibility": {
                    "items": {
                        "$ref": "#/definitions/responsibility",
                        "xml": {
                            "name": "responsibility"
                        }
                    },
                    "type": "array"
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/multinode-setup.html",
            "x-help-article-name": "Multi-node setup",
            "x-is-data": true,
            "xml": {
                "name": "effectiveResponsibilities"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "nodes"
        },
        "enabledInfo": {
            "description": "Represents the current enablement status of the agent.",
            "properties": {
                "comment": {
                    "$ref": "#/definitions/comment"
                },
                "status": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "statusSwitchTime": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/build-agent.html",
            "x-help-article-name": "Build Agent",
            "x-is-data": true,
            "xml": {
                "name": "enabledInfo"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "agent"
        },
        "enabledResponsibilities": {
            "description": "Represents a set of enabled responsibilities of a TeamCity node.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "responsibility": {
                    "items": {
                        "$ref": "#/definitions/responsibility",
                        "xml": {
                            "name": "responsibility"
                        }
                    },
                    "type": "array"
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/multinode-setup.html",
            "x-help-article-name": "Multi-node setup",
            "x-is-data": true,
            "xml": {
                "name": "enabledResponsibilities"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "nodes"
        },
        "entries": {
            "description": "Represents a list of Entry entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "entry": {
                    "items": {
                        "$ref": "#/definitions/entry",
                        "xml": {
                            "name": "entry"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "Entry",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "entries"
            },
            "x-object-type": "ListEntity"
        },
        "entry": {
            "description": "Represents a single name-value relation.",
            "properties": {
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "value": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "entry"
            },
            "x-object-type": "DataEntity"
        },
        "environment": {
            "description": "Represents the details of the agent's OS.",
            "properties": {
                "osName": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "osType": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "environment"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "agent"
        },
        "feature": {
            "description": "Represents a build feature.",
            "properties": {
                "disabled": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "inherited": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "properties": {
                    "$ref": "#/definitions/properties"
                },
                "type": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "feature"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "buildType"
        },
        "features": {
            "description": "Represents a list of Feature entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "feature": {
                    "items": {
                        "$ref": "#/definitions/feature",
                        "xml": {
                            "name": "feature"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "Feature",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "features"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "buildType"
        },
        "file": {
            "description": "Represents a file.",
            "properties": {
                "children": {
                    "$ref": "#/definitions/files"
                },
                "content": {
                    "$ref": "#/definitions/href"
                },
                "fullName": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "modificationTime": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "parent": {
                    "$ref": "#/definitions/file"
                },
                "size": {
                    "format": "int64",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "file"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "files"
        },
        "FileChange": {
            "description": "Represents the specific file change (in the scope of the commit).",
            "properties": {
                "after-revision": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "before-revision": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "changeType": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "changeTypeComment": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "directory": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "file": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "relative-file": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "x-object-type": "DataEntity",
            "x-subpackage": "change"
        },
        "fileChanges": {
            "description": "Represents a list of FileChange entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "file": {
                    "items": {
                        "$ref": "#/definitions/FileChange",
                        "xml": {
                            "name": "file"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "FileChange",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "fileChanges"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "change"
        },
        "files": {
            "description": "Represents a list of File entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "file": {
                    "items": {
                        "$ref": "#/definitions/file",
                        "xml": {
                            "name": "file"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-base-entity": "File",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "files"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "files"
        },
        "group": {
            "description": "Represents a user group.",
            "properties": {
                "child-groups": {
                    "$ref": "#/definitions/groups"
                },
                "description": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "key": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "parent-groups": {
                    "$ref": "#/definitions/groups"
                },
                "properties": {
                    "$ref": "#/definitions/properties"
                },
                "roles": {
                    "$ref": "#/definitions/roles"
                },
                "users": {
                    "$ref": "#/definitions/users"
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/user-group.html",
            "x-help-article-name": "User Group",
            "x-is-data": true,
            "xml": {
                "name": "group"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "group"
        },
        "groupApprovalRule": {
            "description": "Represents group approval rule and its current status for the given build.",
            "properties": {
                "currentlyApprovedBy": {
                    "$ref": "#/definitions/users"
                },
                "group": {
                    "$ref": "#/definitions/group"
                },
                "requiredApprovalsCount": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "groupApprovalRule"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "buildapproval"
        },
        "groupApprovals": {
            "description": "Represents a list of GroupApprovalRule entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "groupApproval": {
                    "items": {
                        "$ref": "#/definitions/groupApprovalRule",
                        "xml": {
                            "name": "groupApproval"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "GroupApprovalRule",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "groupApprovals"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "buildapproval"
        },
        "groups": {
            "description": "Represents a list of Group entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "group": {
                    "items": {
                        "$ref": "#/definitions/group",
                        "xml": {
                            "name": "group"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "Group",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "groups"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "group"
        },
        "healthCategories": {
            "description": "Represents a paginated list of HealthCategory entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "healthCategory": {
                    "items": {
                        "$ref": "#/definitions/healthCategory",
                        "xml": {
                            "name": "healthCategory"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "nextHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "prevHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-base-entity": "HealthCategory",
            "x-is-data": true,
            "x-is-list": true,
            "x-is-paginated": true,
            "xml": {
                "name": "healthCategories"
            },
            "x-object-type": "PaginatedEntity",
            "x-subpackage": "health"
        },
        "healthCategory": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "helpUrl": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "healthCategory"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "health"
        },
        "healthItem": {
            "description": "Represents a server health item.",
            "properties": {
                "healthCategory": {
                    "$ref": "#/definitions/healthCategory"
                },
                "identity": {
                    "type": "string"
                },
                "severity": {
                    "enum": [
                        "INFO",
                        "WARN",
                        "ERROR"
                    ],
                    "type": "string"
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/server-health.html",
            "x-help-article-name": "Server Health",
            "x-is-data": true,
            "xml": {
                "name": "healthItem"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "health"
        },
        "healthStatusItems": {
            "description": "Represents a paginated list of HealthItem entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "healthItem": {
                    "items": {
                        "$ref": "#/definitions/healthItem",
                        "xml": {
                            "name": "healthItem"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "nextHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "prevHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-base-entity": "HealthItem",
            "x-is-data": true,
            "x-is-list": true,
            "x-is-paginated": true,
            "xml": {
                "name": "healthStatusItems"
            },
            "x-object-type": "PaginatedEntity",
            "x-subpackage": "health"
        },
        "href": {
            "description": "Represents a href link.",
            "properties": {
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "href"
            },
            "x-object-type": "DataEntity"
        },
        "investigation": {
            "description": "Represents an investigation of a build problem.",
            "properties": {
                "assignee": {
                    "$ref": "#/definitions/user"
                },
                "assignment": {
                    "$ref": "#/definitions/comment"
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "resolution": {
                    "$ref": "#/definitions/Resolution"
                },
                "responsible": {
                    "$ref": "#/definitions/user"
                },
                "scope": {
                    "$ref": "#/definitions/ProblemScope"
                },
                "state": {
                    "enum": [
                        "TAKEN",
                        "FIXED",
                        "GIVEN_UP",
                        "NONE"
                    ],
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "target": {
                    "$ref": "#/definitions/ProblemTarget"
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "investigation"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "buildType"
        },
        "InvestigationLocator": {
            "description": "Represents a locator string for filtering Investigation entities.",
            "properties": {
                "affectedProject": {
                    "description": "Project (direct or indirect parent) locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "assignee": {
                    "type": "string"
                },
                "assignmentProject": {
                    "description": "Project (direct parent) locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "buildType": {
                    "description": "Build type locator.",
                    "format": "BuildTypeLocator",
                    "type": "string"
                },
                "count": {
                    "description": "For paginated calls, how many entities to return per page.",
                    "format": "int32",
                    "type": "integer"
                },
                "item": {
                    "description": "Supply multiple locators and return a union of the results.",
                    "format": "item:(<locator1>),item:(<locator2>...)",
                    "type": "string"
                },
                "lookupLimit": {
                    "description": "Limit processing to the latest `<lookupLimit>` entities.",
                    "format": "int32",
                    "type": "integer"
                },
                "problem": {
                    "description": "Problem locator.",
                    "format": "ProblemLocator",
                    "type": "string"
                },
                "reporter": {
                    "type": "string"
                },
                "resolution": {
                    "enum": [
                        "manually",
                        "whenFixed",
                        "atTime"
                    ],
                    "type": "string"
                },
                "sinceDate": {
                    "description": "yyyyMMddTHHmmss+ZZZZ",
                    "format": "date-time",
                    "type": "string"
                },
                "start": {
                    "description": "For paginated calls, from which entity to start rendering the page.",
                    "format": "int32",
                    "type": "integer"
                },
                "state": {
                    "enum": [
                        "taken",
                        "fixed",
                        "given_up",
                        "none"
                    ],
                    "type": "string"
                },
                "test": {
                    "description": "Test locator.",
                    "format": "TestLocator",
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "test",
                        "problem",
                        "anyProblem",
                        "unknown"
                    ],
                    "type": "string"
                }
            },
            "type": "object",
            "x-base-entity": "Investigation",
            "x-is-locator": true,
            "x-model-examples": [
                "`assignee:John Smith` \u2014 find investigations assigned to `John Smith`.",
                "`state:taken` \u2014 find investigations which are currently in work."
            ],
            "x-object-type": "LocatorEntity",
            "x-subpackage": "locator"
        },
        "investigations": {
            "description": "Represents a paginated list of Investigation entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "investigation": {
                    "items": {
                        "$ref": "#/definitions/investigation",
                        "xml": {
                            "name": "investigation"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                },
                "nextHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "prevHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-base-entity": "Investigation",
            "x-is-data": true,
            "x-is-list": true,
            "x-is-paginated": true,
            "xml": {
                "name": "investigations"
            },
            "x-object-type": "PaginatedEntity",
            "x-subpackage": "buildType"
        },
        "Issue": {
            "description": "Represents an issue related to the specific change.",
            "properties": {
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "url": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "x-object-type": "DataEntity",
            "x-subpackage": "issue"
        },
        "issues": {
            "description": "Represents a list of Issue entities.",
            "properties": {
                "issues": {
                    "items": {
                        "$ref": "#/definitions/Issue",
                        "xml": {
                            "name": "issue"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true,
                    "xml": {
                        "name": "issue"
                    }
                }
            },
            "type": "object",
            "x-base-entity": "Issue",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "issues"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "issue"
        },
        "issuesUsages": {
            "description": "Represents a list of IssueUsage entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "issueUsage": {
                    "items": {
                        "$ref": "#/definitions/IssueUsage",
                        "xml": {
                            "name": "issueUsage"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "IssueUsage",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "issuesUsages"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "issue"
        },
        "IssueUsage": {
            "description": "Represents a relation between the issue and the Changes entity.",
            "properties": {
                "changes": {
                    "$ref": "#/definitions/changes"
                },
                "issue": {
                    "$ref": "#/definitions/Issue"
                }
            },
            "type": "object",
            "x-is-data": true,
            "x-object-type": "DataEntity",
            "x-subpackage": "issue"
        },
        "items": {
            "description": "Represents a list of items (strings).",
            "properties": {
                "item": {
                    "items": {
                        "type": "string",
                        "xml": {
                            "name": "item"
                        }
                    },
                    "type": "array"
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "items"
            },
            "x-object-type": "DataEntity"
        },
        "licenseKey": {
            "description": "Represents a license key details.",
            "properties": {
                "active": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "agents": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "buildTypes": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "errorDetails": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "expirationDate": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "expired": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "key": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "maintenanceEndDate": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "obsolete": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "rawType": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "servers": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "type": {
                    "enum": [
                        "evaluation",
                        "eap",
                        "open_source",
                        "commercial",
                        "enterprise",
                        "professional"
                    ],
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "unlimitedAgents": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "unlimitedBuildTypes": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "valid": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "licenseKey"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "server"
        },
        "licenseKeys": {
            "description": "Represents a list of LicenseKey entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "licenseKey": {
                    "items": {
                        "$ref": "#/definitions/licenseKey",
                        "xml": {
                            "name": "licenseKey"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "LicenseKey",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "licenseKeys"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "server"
        },
        "licensingData": {
            "description": "Represents license state details (available build configurations, agents, etc.).",
            "properties": {
                "agentsLeft": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "buildTypesLeft": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "licenseKeys": {
                    "$ref": "#/definitions/licenseKeys"
                },
                "licenseUseExceeded": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "maxAgents": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "maxBuildTypes": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "serverEffectiveReleaseDate": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "serverLicenseType": {
                    "enum": [
                        "evaluation",
                        "eap",
                        "open_source",
                        "commercial",
                        "enterprise",
                        "professional"
                    ],
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "unlimitedAgents": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "unlimitedBuildTypes": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "licensingData"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "server"
        },
        "link": {
            "description": "Represents a list of URLs.",
            "properties": {
                "relativeUrl": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "type": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "url": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "link"
            },
            "x-object-type": "DataEntity"
        },
        "links": {
            "description": "Represents a list of Link entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "link": {
                    "items": {
                        "$ref": "#/definitions/link",
                        "xml": {
                            "name": "link"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "Link",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "links"
            },
            "x-object-type": "ListEntity"
        },
        "metaData": {
            "description": "Represents a named Entries entity.",
            "properties": {
                "entries": {
                    "$ref": "#/definitions/entries"
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-base-entity": "Entries",
            "x-is-data": true,
            "xml": {
                "name": "metaData"
            },
            "x-object-type": "DataEntity"
        },
        "metric": {
            "description": "Represents the specific server metric.",
            "properties": {
                "description": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "metricTags": {
                    "$ref": "#/definitions/metricTags"
                },
                "metricValues": {
                    "$ref": "#/definitions/metricValues"
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "prometheusName": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/teamcity-monitoring-and-diagnostics.html#Metrics",
            "x-help-article-name": "Metrics",
            "x-is-data": true,
            "xml": {
                "name": "metric"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "metrics"
        },
        "metrics": {
            "description": "Represents a list of Metric entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "metric": {
                    "items": {
                        "$ref": "#/definitions/metric",
                        "xml": {
                            "name": "metric"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "Metric",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "metrics"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "metrics"
        },
        "metricTag": {
            "description": "Represents a metric tag.",
            "properties": {
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "value": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/teamcity-monitoring-and-diagnostics.html#Metrics",
            "x-help-article-name": "Metrics",
            "x-is-data": true,
            "xml": {
                "name": "metricTag"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "metrics"
        },
        "metricTags": {
            "description": "Represents a list of MetricTag entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "metricTag": {
                    "items": {
                        "$ref": "#/definitions/metricTag",
                        "xml": {
                            "name": "metricTag"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "MetricTag",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "metricTags"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "metrics"
        },
        "metricValue": {
            "description": "Represents a metric value.",
            "properties": {
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "tags": {
                    "$ref": "#/definitions/metricTags"
                },
                "value": {
                    "format": "double",
                    "type": "number",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/teamcity-monitoring-and-diagnostics.html#Metrics",
            "x-help-article-name": "Metrics",
            "x-is-data": true,
            "xml": {
                "name": "metricValue"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "metrics"
        },
        "metricValues": {
            "description": "Represents a list of MetricValue entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "metricValue": {
                    "items": {
                        "$ref": "#/definitions/metricValue",
                        "xml": {
                            "name": "metricValue"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "MetricValue",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "metricValues"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "metrics"
        },
        "multipleOperationResult": {
            "description": "Represents a list of OperationResult entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "errorCount": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "operationResult": {
                    "items": {
                        "$ref": "#/definitions/operationResult",
                        "xml": {
                            "name": "operationResult"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "OperationResult",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "multipleOperationResult"
            },
            "x-object-type": "ListEntity"
        },
        "mute": {
            "description": "Represents a muted test.",
            "properties": {
                "assignment": {
                    "$ref": "#/definitions/comment"
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "resolution": {
                    "$ref": "#/definitions/Resolution"
                },
                "scope": {
                    "$ref": "#/definitions/ProblemScope"
                },
                "target": {
                    "$ref": "#/definitions/ProblemTarget"
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "mute"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "problem"
        },
        "MuteLocator": {
            "description": "Represents a locator string for filtering Mute entities.",
            "properties": {
                "affectedProject": {
                    "description": "Project (direct or indirect parent) locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "creationDate": {
                    "description": "yyyyMMddTHHmmss+ZZZZ",
                    "format": "date-time",
                    "type": "string"
                },
                "id": {
                    "format": "int32",
                    "type": "integer"
                },
                "item": {
                    "description": "Supply multiple locators and return a union of the results.",
                    "format": "item:(<locator1>),item:(<locator2>...)",
                    "type": "string"
                },
                "problem": {
                    "description": "Problem locator.",
                    "format": "ProblemLocator",
                    "type": "string"
                },
                "project": {
                    "description": "Project (direct parent) locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "reporter": {
                    "description": "User who muted this test.",
                    "type": "string"
                },
                "resolution": {
                    "enum": [
                        "manually",
                        "whenFixed",
                        "atTime"
                    ],
                    "type": "string"
                },
                "test": {
                    "description": "Test locator.",
                    "format": "TestLocator",
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "test",
                        "problem",
                        "anyProblem",
                        "unknown"
                    ],
                    "type": "string"
                },
                "unmuteDate": {
                    "description": "yyyyMMddTHHmmss+ZZZZ",
                    "format": "date-time",
                    "type": "string"
                }
            },
            "type": "object",
            "x-base-entity": "Mute",
            "x-is-locator": true,
            "x-model-examples": [
                "`project:<projectLocator>` \u2014 find muted problem under project found by `projectLocator`.",
                "`type:test` \u2014 find last 100 muted tests."
            ],
            "x-object-type": "LocatorEntity",
            "x-subpackage": "locator"
        },
        "mutes": {
            "description": "Represents a paginated list of Mute entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "mute": {
                    "items": {
                        "$ref": "#/definitions/mute",
                        "xml": {
                            "name": "mute"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                },
                "nextHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "prevHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-base-entity": "Mute",
            "x-is-data": true,
            "x-is-list": true,
            "x-is-paginated": true,
            "xml": {
                "name": "mutes"
            },
            "x-object-type": "PaginatedEntity",
            "x-subpackage": "problem"
        },
        "newBuildTypeDescription": {
            "description": "Represents a build configuration stub.",
            "properties": {
                "buildTypesIdsMap": {
                    "$ref": "#/definitions/properties"
                },
                "copyAllAssociatedSettings": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "projectsIdsMap": {
                    "$ref": "#/definitions/properties"
                },
                "sourceBuildType": {
                    "$ref": "#/definitions/buildType"
                },
                "sourceBuildTypeLocator": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "vcsRootsIdsMap": {
                    "$ref": "#/definitions/properties"
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "newBuildTypeDescription"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "buildType"
        },
        "newProjectDescription": {
            "description": "Represents a project stub.",
            "properties": {
                "buildTypesIdsMap": {
                    "$ref": "#/definitions/properties"
                },
                "copyAllAssociatedSettings": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "parentProject": {
                    "$ref": "#/definitions/project"
                },
                "projectsIdsMap": {
                    "$ref": "#/definitions/properties"
                },
                "sourceProject": {
                    "$ref": "#/definitions/project"
                },
                "sourceProjectLocator": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "vcsRootsIdsMap": {
                    "$ref": "#/definitions/properties"
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "newProjectDescription"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "project"
        },
        "node": {
            "description": "Represents a TeamCity node.",
            "properties": {
                "current": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "disabledResponsibilities": {
                    "$ref": "#/definitions/disabledResponsibilities"
                },
                "effectiveResponsibilities": {
                    "$ref": "#/definitions/effectiveResponsibilities"
                },
                "enabledResponsibilities": {
                    "$ref": "#/definitions/enabledResponsibilities"
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "role": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "state": {
                    "enum": [
                        "online",
                        "offline",
                        "stopping",
                        "starting"
                    ],
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "url": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/multinode-setup.html",
            "x-help-article-name": "Multi-node setup",
            "x-is-data": true,
            "xml": {
                "name": "node"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "nodes"
        },
        "nodes": {
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "node": {
                    "items": {
                        "$ref": "#/definitions/node",
                        "xml": {
                            "name": "node"
                        }
                    },
                    "type": "array"
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "nodes"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "nodes"
        },
        "operationResult": {
            "description": "Represents a relation between a message and a related entity.",
            "properties": {
                "message": {
                    "type": "string"
                },
                "related": {
                    "$ref": "#/definitions/relatedEntity"
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "operationResult"
            },
            "x-object-type": "DataEntity"
        },
        "ParsedTestName": {
            "description": "Represents test metadata (package, method, class, and so on).",
            "properties": {
                "testClass": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "testMethodName": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "testNameWithoutPrefix": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "testNameWithParameters": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "testPackage": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "testShortName": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "testSuite": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "x-object-type": "DataEntity",
            "x-subpackage": "problem"
        },
        "permission": {
            "description": "Represents a permission.",
            "properties": {
                "global": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/role-and-permission.html",
            "x-help-article-name": "Roles",
            "x-is-data": true,
            "xml": {
                "name": "permission"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "user"
        },
        "permissionAssignment": {
            "description": "Represents a relation between the specific permission and a project.",
            "properties": {
                "permission": {
                    "$ref": "#/definitions/permission"
                },
                "project": {
                    "$ref": "#/definitions/project"
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "permissionAssignment"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "user"
        },
        "permissionAssignments": {
            "description": "Represents a list of PermissionAssignment entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "permissionAssignment": {
                    "items": {
                        "$ref": "#/definitions/permissionAssignment",
                        "xml": {
                            "name": "permissionAssignment"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "PermissionAssignment",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "permissionAssignments"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "user"
        },
        "permissionRestriction": {
            "description": "Represents permission restrictions of an authentication token.",
            "properties": {
                "isGlobalScope": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "permission": {
                    "$ref": "#/definitions/permission"
                },
                "project": {
                    "$ref": "#/definitions/project"
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "permissionRestriction"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "user"
        },
        "permissionRestrictions": {
            "description": "Represents a list of PermissionRestriction entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "permissionRestriction": {
                    "items": {
                        "$ref": "#/definitions/permissionRestriction",
                        "xml": {
                            "name": "permissionRestriction"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "PermissionRestriction",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "permissionRestrictions"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "user"
        },
        "pinInfo": {
            "description": "Represents the pinned status of this build.",
            "properties": {
                "comment": {
                    "$ref": "#/definitions/comment"
                },
                "status": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/pinned-build.html",
            "x-help-article-name": "Pinning Build",
            "x-is-data": true,
            "xml": {
                "name": "pinInfo"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "build"
        },
        "plugin": {
            "description": "Represents a plugin.",
            "properties": {
                "displayName": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "loadPath": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "parameters": {
                    "$ref": "#/definitions/properties"
                },
                "version": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "plugin"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "plugin"
        },
        "plugins": {
            "description": "Represents a list of Plugin entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "plugin": {
                    "items": {
                        "$ref": "#/definitions/plugin",
                        "xml": {
                            "name": "plugin"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "Plugin",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "plugins"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "plugin"
        },
        "problem": {
            "description": "Represents an issue with the test.",
            "properties": {
                "description": {
                    "type": "string"
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "identity": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "investigations": {
                    "$ref": "#/definitions/investigations"
                },
                "locator": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "mutes": {
                    "$ref": "#/definitions/mutes"
                },
                "problemOccurrences": {
                    "$ref": "#/definitions/problemOccurrences"
                },
                "type": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "problem"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "problem"
        },
        "ProblemLocator": {
            "description": "Represents a locator string for filtering Problem entities.",
            "properties": {
                "affectedProject": {
                    "description": "Project (direct or indirect parent) locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "build": {
                    "description": "Build locator.",
                    "format": "BuildLocator",
                    "type": "string"
                },
                "count": {
                    "description": "For paginated calls, how many entities to return per page.",
                    "format": "int32",
                    "type": "integer"
                },
                "currentlyFailing": {
                    "description": "Is currently failing.",
                    "type": "boolean"
                },
                "currentlyInvestigated": {
                    "description": "Is currently investigated.",
                    "type": "boolean"
                },
                "currentlyMuted": {
                    "description": "Is currently muted.",
                    "type": "boolean"
                },
                "id": {
                    "description": "Entity ID.",
                    "format": "int32",
                    "type": "integer"
                },
                "identity": {
                    "type": "string"
                },
                "item": {
                    "description": "Supply multiple locators and return a union of the results.",
                    "format": "item:(<locator1>),item:(<locator2>...)",
                    "type": "string"
                },
                "lookupLimit": {
                    "description": "Limit processing to the latest `<lookupLimit>` entities.",
                    "format": "int32",
                    "type": "integer"
                },
                "start": {
                    "description": "For paginated calls, from which entity to start rendering the page.",
                    "format": "int32",
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "x-base-entity": "Problem",
            "x-is-locator": true,
            "x-model-examples": [
                "`currentlyInvestigated:true` \u2014 find last 100 build problems which are being currently investigated.",
                "`build:<buildLocator>` \u2014 find build problems under build found by `buildLocator`."
            ],
            "x-object-type": "LocatorEntity",
            "x-subpackage": "locator"
        },
        "problemOccurrence": {
            "description": "Represents an instance of a failed test in the specific build.",
            "properties": {
                "additionalData": {
                    "type": "string"
                },
                "build": {
                    "$ref": "#/definitions/build"
                },
                "currentlyInvestigated": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "currentlyMuted": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "details": {
                    "type": "string"
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "identity": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "logAnchor": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "mute": {
                    "$ref": "#/definitions/mute"
                },
                "muted": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "newFailure": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "problem": {
                    "$ref": "#/definitions/problem"
                },
                "type": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "problemOccurrence"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "problem"
        },
        "ProblemOccurrenceLocator": {
            "description": "Represents a locator string for filtering ProblemOccurrence entities.",
            "properties": {
                "affectedProject": {
                    "description": "Project (direct or indirect parent) locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "build": {
                    "description": "Build locator.",
                    "format": "BuildLocator",
                    "type": "string"
                },
                "count": {
                    "description": "For paginated calls, how many entities to return per page.",
                    "format": "int32",
                    "type": "integer"
                },
                "currentlyFailing": {
                    "description": "Is currently failing.",
                    "type": "boolean"
                },
                "currentlyInvestigated": {
                    "description": "Is currently investigated.",
                    "type": "boolean"
                },
                "currentlyMuted": {
                    "description": "Is currently muted.",
                    "type": "boolean"
                },
                "identity": {
                    "type": "string"
                },
                "item": {
                    "description": "Supply multiple locators and return a union of the results.",
                    "format": "item:(<locator1>),item:(<locator2>...)",
                    "type": "string"
                },
                "lookupLimit": {
                    "description": "Limit processing to the latest `<lookupLimit>` entities.",
                    "format": "int32",
                    "type": "integer"
                },
                "muted": {
                    "description": "Has ever been muted.",
                    "type": "boolean"
                },
                "problem": {
                    "type": "string"
                },
                "start": {
                    "description": "For paginated calls, from which entity to start rendering the page.",
                    "format": "int32",
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "x-base-entity": "ProblemOccurrence",
            "x-is-locator": true,
            "x-model-examples": [
                "`currentlyInvestigated:true` \u2014 find last 100 build problem occurrences which are being currently investigated.",
                "`build:<buildLocator>` \u2014 find build problem occurrences under build found by `buildLocator`."
            ],
            "x-object-type": "LocatorEntity",
            "x-subpackage": "locator"
        },
        "problemOccurrences": {
            "description": "Represents a paginated list of ProblemOccurrence entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "failed": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "ignored": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "muted": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "newFailed": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "nextHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "passed": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "prevHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "problemOccurrence": {
                    "items": {
                        "$ref": "#/definitions/problemOccurrence",
                        "xml": {
                            "name": "problemOccurrence"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "ProblemOccurrence",
            "x-is-data": true,
            "x-is-list": true,
            "x-is-paginated": true,
            "xml": {
                "name": "problemOccurrences"
            },
            "x-object-type": "PaginatedEntity",
            "x-subpackage": "problem"
        },
        "problems": {
            "description": "Represents a paginated list of Problem entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "nextHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "prevHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "problem": {
                    "items": {
                        "$ref": "#/definitions/problem",
                        "xml": {
                            "name": "problem"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "Problem",
            "x-is-data": true,
            "x-is-list": true,
            "x-is-paginated": true,
            "xml": {
                "name": "problems"
            },
            "x-object-type": "PaginatedEntity",
            "x-subpackage": "problem"
        },
        "ProblemScope": {
            "description": "Represents an investigation scope.",
            "properties": {
                "buildType": {
                    "$ref": "#/definitions/buildType"
                },
                "buildTypes": {
                    "$ref": "#/definitions/buildTypes"
                },
                "project": {
                    "$ref": "#/definitions/project"
                }
            },
            "type": "object",
            "x-is-data": true,
            "x-object-type": "DataEntity",
            "x-subpackage": "buildType"
        },
        "ProblemTarget": {
            "description": "Represents an investigation target.",
            "properties": {
                "anyProblem": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "problems": {
                    "$ref": "#/definitions/problems"
                },
                "tests": {
                    "$ref": "#/definitions/tests"
                }
            },
            "type": "object",
            "x-is-data": true,
            "x-object-type": "DataEntity",
            "x-subpackage": "buildType"
        },
        "progress-info": {
            "description": "Represents a progress estimate of this build.",
            "properties": {
                "currentStageText": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "elapsedSeconds": {
                    "format": "int64",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "estimatedTotalSeconds": {
                    "format": "int64",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "lastActivityTime": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "leftSeconds": {
                    "format": "int64",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "outdated": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "outdatedReasonBuild": {
                    "$ref": "#/definitions/build"
                },
                "percentageComplete": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "probablyHanging": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "progress-info"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "build"
        },
        "project": {
            "description": "Represents a project.",
            "properties": {
                "ancestorProjects": {
                    "$ref": "#/definitions/projects"
                },
                "archived": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "buildTypes": {
                    "$ref": "#/definitions/buildTypes"
                },
                "cloudProfiles": {
                    "$ref": "#/definitions/cloudProfiles"
                },
                "defaultTemplate": {
                    "$ref": "#/definitions/buildType"
                },
                "description": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "internalId": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "links": {
                    "$ref": "#/definitions/links"
                },
                "locator": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "parameters": {
                    "$ref": "#/definitions/properties"
                },
                "parentProject": {
                    "$ref": "#/definitions/project"
                },
                "parentProjectId": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "parentProjectInternalId": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "parentProjectName": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "projectFeatures": {
                    "$ref": "#/definitions/projectFeatures"
                },
                "projects": {
                    "$ref": "#/definitions/projects"
                },
                "readOnlyUI": {
                    "$ref": "#/definitions/StateField"
                },
                "templates": {
                    "$ref": "#/definitions/buildTypes"
                },
                "uuid": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "vcsRoots": {
                    "$ref": "#/definitions/vcs-roots"
                },
                "virtual": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "webUrl": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/project.html",
            "x-help-article-name": "Project",
            "x-is-data": true,
            "xml": {
                "name": "project"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "project"
        },
        "projectFeature": {
            "description": "Represents a project feature.",
            "properties": {
                "disabled": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "inherited": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "properties": {
                    "$ref": "#/definitions/properties"
                },
                "type": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "projectFeature"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "project"
        },
        "projectFeatures": {
            "description": "Represents a list of ProjectFeature entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "projectFeature": {
                    "items": {
                        "$ref": "#/definitions/projectFeature",
                        "xml": {
                            "name": "projectFeature"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "ProjectFeature",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "projectFeatures"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "project"
        },
        "ProjectLocator": {
            "description": "Represents a locator string for filtering Project entities.",
            "properties": {
                "affectedProject": {
                    "description": "Project (direct or indirect parent) locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "archived": {
                    "description": "Is archived.",
                    "type": "boolean"
                },
                "build": {
                    "description": "Build locator.",
                    "format": "BuildLocator",
                    "type": "string"
                },
                "buildType": {
                    "description": "Build type locator.",
                    "format": "BuildTypeLocator",
                    "type": "string"
                },
                "count": {
                    "description": "For paginated calls, how many entities to return per page.",
                    "format": "int32",
                    "type": "integer"
                },
                "defaultTemplate": {
                    "description": "Default template locator.",
                    "format": "BuildTypeLocator",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "internalId": {
                    "type": "string"
                },
                "item": {
                    "description": "Supply multiple locators and return a union of the results.",
                    "format": "item:(<locator1>),item:(<locator2>...)",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "pool": {
                    "description": "Associated agent pool locator.",
                    "format": "AgentPoolLocator",
                    "type": "string"
                },
                "project": {
                    "description": "Project (direct parent) locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "projectFeature": {
                    "description": "Project feature locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "start": {
                    "description": "For paginated calls, from which entity to start rendering the page.",
                    "format": "int32",
                    "type": "integer"
                },
                "uuid": {
                    "type": "string"
                },
                "vcsRoot": {
                    "description": "VCS root locator.",
                    "format": "VcsRootLocator",
                    "type": "string"
                },
                "virtual": {
                    "description": "Is virtual (default=false).",
                    "type": "boolean"
                }
            },
            "type": "object",
            "x-base-entity": "Project",
            "x-is-locator": true,
            "x-model-examples": [
                "`name:MyProject` \u2014 find a project with name `MyProject`.",
                "`archived:false` \u2014 find projects which are not archived."
            ],
            "x-object-type": "LocatorEntity",
            "x-subpackage": "locator"
        },
        "projects": {
            "description": "Represents a paginated list of Project entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "nextHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "prevHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "project": {
                    "items": {
                        "$ref": "#/definitions/project",
                        "xml": {
                            "name": "project"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "Project",
            "x-is-data": true,
            "x-is-list": true,
            "x-is-paginated": true,
            "xml": {
                "name": "projects"
            },
            "x-object-type": "PaginatedEntity",
            "x-subpackage": "project"
        },
        "properties": {
            "description": "Represents a list of Property entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "property": {
                    "items": {
                        "$ref": "#/definitions/property",
                        "xml": {
                            "name": "property"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "Property",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "properties"
            },
            "x-object-type": "ListEntity"
        },
        "property": {
            "description": "Represents a name-value-type relation.",
            "properties": {
                "inherited": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "type": {
                    "$ref": "#/definitions/type"
                },
                "value": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "property"
            },
            "x-object-type": "DataEntity"
        },
        "related": {
            "description": "Represents a link to the Builds entity.",
            "properties": {
                "builds": {
                    "$ref": "#/definitions/builds"
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "related"
            },
            "x-object-type": "DataEntity"
        },
        "relatedEntities": {
            "description": "Represents a list of RelatedEntity entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "entity": {
                    "items": {
                        "$ref": "#/definitions/relatedEntity",
                        "xml": {
                            "name": "entity"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "RelatedEntity",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "relatedEntities"
            },
            "x-object-type": "ListEntity"
        },
        "relatedEntity": {
            "description": "Represents a related entity.",
            "properties": {
                "agent": {
                    "$ref": "#/definitions/agent"
                },
                "agentPool": {
                    "$ref": "#/definitions/agentPool"
                },
                "build": {
                    "$ref": "#/definitions/build"
                },
                "buildType": {
                    "$ref": "#/definitions/buildType"
                },
                "change": {
                    "$ref": "#/definitions/change"
                },
                "group": {
                    "$ref": "#/definitions/group"
                },
                "internalId": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "problem": {
                    "$ref": "#/definitions/problem"
                },
                "project": {
                    "$ref": "#/definitions/project"
                },
                "test": {
                    "$ref": "#/definitions/test"
                },
                "text": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "unknown": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "user": {
                    "$ref": "#/definitions/user"
                },
                "vcsRoot": {
                    "$ref": "#/definitions/vcs-root"
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "relatedEntity"
            },
            "x-object-type": "DataEntity"
        },
        "repositoryState": {
            "description": "Represents the list of the repository Branch entities with their recent revisions.",
            "properties": {
                "branch": {
                    "items": {
                        "$ref": "#/definitions/branchVersion",
                        "xml": {
                            "name": "branch"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                },
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "timestamp": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-base-entity": "BranchVersion",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "repositoryState"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "change"
        },
        "requirements": {
            "description": "Represents a list of unmet requirements of a build.",
            "properties": {
                "description": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "requirements"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "agent"
        },
        "Resolution": {
            "description": "Represents an investigation resolution timestamp and details.",
            "properties": {
                "time": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "manually",
                        "whenFixed",
                        "atTime"
                    ],
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "x-object-type": "DataEntity",
            "x-subpackage": "problem"
        },
        "responsibility": {
            "description": "Represents a single responsibility of a TeamCity node.",
            "properties": {
                "description": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/multinode-setup.html",
            "x-help-article-name": "Multi-node setup",
            "x-is-data": true,
            "xml": {
                "name": "responsibility"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "nodes"
        },
        "Revision": {
            "description": "Represents a revision related to a VCS change.",
            "properties": {
                "checkout-rules": {
                    "type": "string"
                },
                "internalVersion": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "vcsBranchName": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "vcs-root-instance": {
                    "$ref": "#/definitions/vcs-root-instance"
                },
                "version": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/revision.html",
            "x-help-article-name": "Revision",
            "x-is-data": true,
            "x-object-type": "DataEntity",
            "x-subpackage": "change"
        },
        "Revisions": {
            "description": "Represents a list of Revision entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "failOnMissingRevisions": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "revision": {
                    "items": {
                        "$ref": "#/definitions/Revision",
                        "xml": {
                            "name": "revision"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "Revision",
            "x-is-data": true,
            "x-is-list": true,
            "x-object-type": "ListEntity",
            "x-subpackage": "change"
        },
        "role": {
            "description": "Represents a user/group role.",
            "properties": {
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "roleId": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "scope": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/role-and-permission.html",
            "x-help-article-name": "Roles",
            "x-is-data": true,
            "xml": {
                "name": "role"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "user"
        },
        "roles": {
            "description": "Represents a list of Role entities.",
            "properties": {
                "role": {
                    "items": {
                        "$ref": "#/definitions/role",
                        "xml": {
                            "name": "role"
                        }
                    },
                    "type": "array"
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "roles"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "user"
        },
        "server": {
            "description": "Represents various details of this server including the installation version.",
            "properties": {
                "agentPools": {
                    "$ref": "#/definitions/href"
                },
                "agents": {
                    "$ref": "#/definitions/href"
                },
                "artifactsUrl": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "buildDate": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "buildNumber": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "buildQueue": {
                    "$ref": "#/definitions/href"
                },
                "builds": {
                    "$ref": "#/definitions/href"
                },
                "currentTime": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "internalId": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "investigations": {
                    "$ref": "#/definitions/href"
                },
                "mutes": {
                    "$ref": "#/definitions/href"
                },
                "nodes": {
                    "$ref": "#/definitions/href"
                },
                "projects": {
                    "$ref": "#/definitions/href"
                },
                "role": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "startTime": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "userGroups": {
                    "$ref": "#/definitions/href"
                },
                "users": {
                    "$ref": "#/definitions/href"
                },
                "vcsRoots": {
                    "$ref": "#/definitions/href"
                },
                "version": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "versionMajor": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "versionMinor": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "webUrl": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "server"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "server"
        },
        "snapshot-dependencies": {
            "description": "Represents a list of SnapshotDependency entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "snapshot-dependency": {
                    "items": {
                        "$ref": "#/definitions/snapshot-dependency",
                        "xml": {
                            "name": "snapshot-dependency"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "SnapshotDependency",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "snapshot-dependencies"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "buildType"
        },
        "snapshot-dependency": {
            "description": "Represents a snapshot dependency relation.",
            "properties": {
                "disabled": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "inherited": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "properties": {
                    "$ref": "#/definitions/properties"
                },
                "source-buildType": {
                    "$ref": "#/definitions/buildType"
                },
                "type": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "snapshot-dependency"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "buildType"
        },
        "SnapshotDependencyLink": {
            "properties": {
                "build": {
                    "$ref": "#/definitions/build"
                },
                "buildType": {
                    "$ref": "#/definitions/buildType"
                },
                "buildTypeBranch": {
                    "type": "string"
                }
            },
            "type": "object",
            "x-is-data": true,
            "x-object-type": "DataEntity",
            "x-subpackage": "change"
        },
        "StateField": {
            "description": "Represents a project state field (as of now, limited to the read-only state of project).",
            "properties": {
                "inherited": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "value": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "x-object-type": "DataEntity",
            "x-subpackage": "project"
        },
        "step": {
            "description": "Represents a build step.",
            "properties": {
                "disabled": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "inherited": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "properties": {
                    "$ref": "#/definitions/properties"
                },
                "type": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "step"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "buildType"
        },
        "steps": {
            "description": "Represents a list of Step entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "step": {
                    "items": {
                        "$ref": "#/definitions/step",
                        "xml": {
                            "name": "step"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "Step",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "steps"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "buildType"
        },
        "tag": {
            "description": "Represents a single build tag.",
            "properties": {
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "owner": {
                    "$ref": "#/definitions/user"
                },
                "private": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/build-tag.html",
            "x-help-article-name": "Tagging Build",
            "x-is-data": true,
            "xml": {
                "name": "tag"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "build"
        },
        "TagLocator": {
            "description": "Represents a locator string for filtering Tag entities.",
            "properties": {
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "private": {
                    "type": "string"
                }
            },
            "type": "object",
            "x-base-entity": "Tag",
            "x-is-locator": true,
            "x-object-type": "LocatorEntity",
            "x-subpackage": "locator"
        },
        "tags": {
            "description": "Represents a list of Tag entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "tag": {
                    "items": {
                        "$ref": "#/definitions/tag",
                        "xml": {
                            "name": "tag"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "Tag",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "tags"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "build"
        },
        "TeamCityNodeLocator": {
            "description": "Represents a locator string for filtering Node entities.",
            "properties": {
                "item": {
                    "description": "Supply multiple locators and return a union of the results.",
                    "format": "item:(<locator1>),item:(<locator2>...)",
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            },
            "type": "object",
            "x-base-entity": "Node",
            "x-is-locator": true,
            "x-model-examples": [
                "`id:node-1` - find a node with id `node-1`.",
                "`state:<stateLocator>` - find all nodes having the given state.",
                "`role:<role>` - finds a node with the specified role, possible values are: main_node or secondary_node."
            ],
            "x-object-type": "LocatorEntity",
            "x-subpackage": "locator"
        },
        "test": {
            "description": "Represents a test.",
            "properties": {
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "investigations": {
                    "$ref": "#/definitions/investigations"
                },
                "locator": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "mutes": {
                    "$ref": "#/definitions/mutes"
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "parsedTestName": {
                    "$ref": "#/definitions/ParsedTestName"
                },
                "testOccurrences": {
                    "$ref": "#/definitions/testOccurrences"
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "test"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "problem"
        },
        "testCounters": {
            "description": "Represents a test results counter (how many times this test was successful/failed/muted/ignored).",
            "properties": {
                "all": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "duration": {
                    "format": "int64",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "failed": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "ignored": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "muted": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "newFailed": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "success": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "testCounters"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "problem"
        },
        "TestLocator": {
            "description": "Represents a locator string for filtering Test entities.",
            "properties": {
                "affectedProject": {
                    "description": "Project (direct or indirect parent) locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "count": {
                    "description": "For paginated calls, how many entities to return per page.",
                    "format": "int32",
                    "type": "integer"
                },
                "currentlyFailing": {
                    "description": "Is currently failing.",
                    "type": "boolean"
                },
                "currentlyInvestigated": {
                    "description": "Is currently investigated.",
                    "type": "boolean"
                },
                "currentlyMuted": {
                    "description": "Is currently muted.",
                    "type": "boolean"
                },
                "id": {
                    "description": "Entity ID.",
                    "format": "int32",
                    "type": "integer"
                },
                "item": {
                    "description": "Supply multiple locators and return a union of the results.",
                    "format": "item:(<locator1>),item:(<locator2>...)",
                    "type": "string"
                },
                "lookupLimit": {
                    "description": "Limit processing to the latest `<lookupLimit>` entities.",
                    "format": "int32",
                    "type": "integer"
                },
                "muteAffected": {
                    "description": "Build type locator (for finding out if this test is affected by mutes in build type).",
                    "format": "BuildTypeLocator",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "start": {
                    "description": "For paginated calls, from which entity to start rendering the page.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object",
            "x-base-entity": "Test",
            "x-is-locator": true,
            "x-model-examples": [
                "`currentlyInvestigated:true` \u2014 find last 100 tests which are being currently investigated.",
                "`build:<buildLocator>` \u2014 find tests under build found by `buildLocator`."
            ],
            "x-object-type": "LocatorEntity",
            "x-subpackage": "locator"
        },
        "testOccurrence": {
            "description": "Represents a relation between a test and the specific build.",
            "properties": {
                "build": {
                    "$ref": "#/definitions/build"
                },
                "currentlyInvestigated": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "currentlyMuted": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "details": {
                    "type": "string"
                },
                "duration": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "firstFailed": {
                    "$ref": "#/definitions/testOccurrence"
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "ignored": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "ignoreDetails": {
                    "type": "string"
                },
                "invocations": {
                    "$ref": "#/definitions/testOccurrences"
                },
                "logAnchor": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/testRunMetadata"
                },
                "mute": {
                    "$ref": "#/definitions/mute"
                },
                "muted": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "newFailure": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "nextFixed": {
                    "$ref": "#/definitions/testOccurrence"
                },
                "runOrder": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "status": {
                    "enum": [
                        "UNKNOWN",
                        "NORMAL",
                        "WARNING",
                        "FAILURE",
                        "ERROR"
                    ],
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "test": {
                    "$ref": "#/definitions/test"
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "testOccurrence"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "problem"
        },
        "TestOccurrenceLocator": {
            "description": "Represents a locator string for filtering TestOccurrence entities.",
            "properties": {
                "affectedProject": {
                    "description": "Project (direct or indirect parent) locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "branch": {
                    "type": "string"
                },
                "build": {
                    "description": "Build locator.",
                    "format": "BuildLocator",
                    "type": "string"
                },
                "buildType": {
                    "description": "Build type locator.",
                    "format": "BuildTypeLocator",
                    "type": "string"
                },
                "count": {
                    "description": "For paginated calls, how many entities to return per page.",
                    "format": "int32",
                    "type": "integer"
                },
                "currentlyFailing": {
                    "description": "Is currently failing.",
                    "type": "boolean"
                },
                "currentlyInvestigated": {
                    "description": "Is currently investigated.",
                    "type": "boolean"
                },
                "currentlyMuted": {
                    "type": "string"
                },
                "id": {
                    "description": "Entity ID.",
                    "format": "int32",
                    "type": "integer"
                },
                "ignored": {
                    "description": "Is ignored.",
                    "type": "boolean"
                },
                "includePersonal": {
                    "type": "boolean"
                },
                "item": {
                    "description": "Supply multiple locators and return a union of the results.",
                    "format": "item:(<locator1>),item:(<locator2>...)",
                    "type": "string"
                },
                "lookupLimit": {
                    "description": "Limit processing to the latest `<lookupLimit>` entities.",
                    "format": "int32",
                    "type": "integer"
                },
                "muted": {
                    "description": "Is muted.",
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "newFailure": {
                    "type": "string"
                },
                "start": {
                    "description": "For paginated calls, from which entity to start rendering the page.",
                    "format": "int32",
                    "type": "integer"
                },
                "status": {
                    "enum": [
                        "unknown",
                        "normal",
                        "warning",
                        "failure",
                        "error"
                    ],
                    "type": "string"
                },
                "test": {
                    "description": "Test locator.",
                    "format": "TestLocator",
                    "type": "string"
                }
            },
            "type": "object",
            "x-base-entity": "TestOccurrence",
            "x-is-locator": true,
            "x-model-examples": [
                "`currentlyInvestigated:true` \u2014 find last 100 test occurrences which are being currently investigated.",
                "`build:<buildLocator>` \u2014 find test occurrences under build found by `buildLocator`."
            ],
            "x-object-type": "LocatorEntity",
            "x-subpackage": "locator"
        },
        "testOccurrences": {
            "description": "Represents a paginated list of TestOccurrence entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "failed": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "ignored": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "muted": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "newFailed": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "nextHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "passed": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "prevHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "testCounters": {
                    "$ref": "#/definitions/testCounters"
                },
                "testOccurrence": {
                    "items": {
                        "$ref": "#/definitions/testOccurrence",
                        "xml": {
                            "name": "testOccurrence"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "TestOccurrence",
            "x-is-data": true,
            "x-is-list": true,
            "x-is-paginated": true,
            "xml": {
                "name": "testOccurrences"
            },
            "x-object-type": "PaginatedEntity",
            "x-subpackage": "problem"
        },
        "testRunMetadata": {
            "description": "Represents a list of TypedValue entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "typedValues": {
                    "items": {
                        "$ref": "#/definitions/typedValue",
                        "xml": {
                            "name": "typedValues"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "TypedValue",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "testRunMetadata"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "problem"
        },
        "tests": {
            "description": "Represents a paginated list of Test entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "myTestCounters": {
                    "$ref": "#/definitions/testCounters"
                },
                "nextHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "prevHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "test": {
                    "items": {
                        "$ref": "#/definitions/test",
                        "xml": {
                            "name": "test"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "Test",
            "x-is-data": true,
            "x-is-list": true,
            "x-is-paginated": true,
            "xml": {
                "name": "tests"
            },
            "x-object-type": "PaginatedEntity",
            "x-subpackage": "problem"
        },
        "token": {
            "description": "Represents an authentication token.",
            "properties": {
                "creationTime": {
                    "format": "date-time",
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "expirationTime": {
                    "format": "date-time",
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "permissionRestrictions": {
                    "$ref": "#/definitions/permissionRestrictions"
                },
                "value": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "token"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "user"
        },
        "tokens": {
            "description": "Represents a list of Token entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "token": {
                    "items": {
                        "$ref": "#/definitions/token",
                        "xml": {
                            "name": "token"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "Token",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "tokens"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "user"
        },
        "trigger": {
            "description": "Represents a build trigger.",
            "properties": {
                "buildCustomization": {
                    "$ref": "#/definitions/BuildTriggerCustomization"
                },
                "disabled": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "inherited": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "properties": {
                    "$ref": "#/definitions/properties"
                },
                "type": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "trigger"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "buildType"
        },
        "TriggeredBy": {
            "description": "Represents the user/trigger/dependency which caused this build to start.",
            "properties": {
                "build": {
                    "$ref": "#/definitions/build"
                },
                "buildType": {
                    "$ref": "#/definitions/buildType"
                },
                "date": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "details": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "displayText": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "properties": {
                    "$ref": "#/definitions/properties"
                },
                "rawValue": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "type": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "user": {
                    "$ref": "#/definitions/user"
                }
            },
            "type": "object",
            "x-is-data": true,
            "x-object-type": "DataEntity",
            "x-subpackage": "build"
        },
        "triggers": {
            "description": "Represents a list of Trigger entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "trigger": {
                    "items": {
                        "$ref": "#/definitions/trigger",
                        "xml": {
                            "name": "trigger"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "Trigger",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "triggers"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "buildType"
        },
        "type": {
            "description": "Represents a build parameter type string.",
            "properties": {
                "rawValue": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "type"
            },
            "x-object-type": "DataEntity"
        },
        "typedValue": {
            "description": "Represents a name-value-type relation.",
            "properties": {
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "type": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "value": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "typedValue"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "problem"
        },
        "user": {
            "description": "Represents a user.",
            "properties": {
                "avatars": {
                    "$ref": "#/definitions/userAvatars"
                },
                "email": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "enabled2FA": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "groups": {
                    "$ref": "#/definitions/groups"
                },
                "hasPassword": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "format": "int64",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "lastLogin": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "locator": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "password": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "properties": {
                    "$ref": "#/definitions/properties"
                },
                "realm": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "roles": {
                    "$ref": "#/definitions/roles"
                },
                "username": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/user-account.html",
            "x-help-article-name": "User Account",
            "x-is-data": true,
            "xml": {
                "name": "user"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "user"
        },
        "userApprovalRule": {
            "description": "Represents user approval rule and its current status for the given build.",
            "properties": {
                "approved": {
                    "type": "boolean"
                },
                "user": {
                    "$ref": "#/definitions/user"
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "userApprovalRule"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "buildapproval"
        },
        "userApprovals": {
            "description": "Represents a list of UserApprovalRule entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "userApproval": {
                    "items": {
                        "$ref": "#/definitions/userApprovalRule",
                        "xml": {
                            "name": "userApproval"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "UserApprovalRule",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "userApprovals"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "buildapproval"
        },
        "userAvatars": {
            "description": "Represents a group of links to the user's avatars",
            "properties": {
                "urlToSize20": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "urlToSize28": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "urlToSize32": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "urlToSize40": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "urlToSize56": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "urlToSize64": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "urlToSize80": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "userAvatars"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "user"
        },
        "UserGroupLocator": {
            "description": "Represents a locator string for filtering Group entities.",
            "properties": {
                "item": {
                    "description": "Supply multiple locators and return a union of the results.",
                    "format": "item:(<locator1>),item:(<locator2>...)",
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "x-base-entity": "Group",
            "x-is-locator": true,
            "x-model-examples": [
                "'name:MyGroupName' \u2013 find group with name `MyGroupName`.",
                "'key:MyGroupKey' \u2013 find group with key `MyGroupKey`."
            ],
            "x-object-type": "LocatorEntity",
            "x-subpackage": "locator"
        },
        "UserLocator": {
            "description": "Represents a locator string for filtering User entities.",
            "properties": {
                "affectedGroup": {
                    "description": "User group (direct or indirect parent) locator.",
                    "format": "UserGroupLocator",
                    "type": "string"
                },
                "current": {
                    "description": "Return user that has issued this request.",
                    "format": "current",
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "group": {
                    "description": "User group (direct parent) locator.",
                    "format": "UserGroupLocator",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "item": {
                    "description": "Supply multiple locators and return a union of the results.",
                    "format": "item:(<locator1>),item:(<locator2>...)",
                    "type": "string"
                },
                "lastLogin": {
                    "format": "date-time",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "property": {
                    "enum": [
                        "exists",
                        "not-exists",
                        "equals",
                        "does-not-equal",
                        "starts-with",
                        "contains",
                        "does-not-contain",
                        "ends-with",
                        "any",
                        "matches",
                        "does-not-match",
                        "more-than",
                        "no-more-than",
                        "less-than",
                        "no-less-than",
                        "ver-more-than",
                        "ver-no-more-than",
                        "ver-less-than",
                        "ver-no-less-than"
                    ],
                    "format": "property:(name:<name>,value:<value>,matchType:<matchType>)",
                    "type": "string"
                },
                "role": {
                    "description": "Role locator.",
                    "format": "RoleLocator",
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "x-base-entity": "User",
            "x-is-locator": true,
            "x-model-examples": [
                "`name:John Smith` \u2014 find user with name `John Smith`.",
                "`group:<groupLocator>` \u2014 find all users in user group found by `groupLocator`."
            ],
            "x-object-type": "LocatorEntity",
            "x-subpackage": "locator"
        },
        "users": {
            "description": "Represents a list of User entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "user": {
                    "items": {
                        "$ref": "#/definitions/user",
                        "xml": {
                            "name": "user"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "User",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "users"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "user"
        },
        "VcsCheckStatus": {
            "description": "Represents the last known repository check status.",
            "properties": {
                "requestorType": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "status": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "timestamp": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/configuring-vcs-roots.html",
            "x-help-article-name": "VCS Root",
            "x-is-data": true,
            "xml": {
                "name": "VcsCheckStatus"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "change"
        },
        "vcsLabel": {
            "description": "Represents a VCS-side label of this build's sources.",
            "properties": {
                "buildId": {
                    "format": "int64",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "failureReason": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "status": {
                    "enum": [
                        "none",
                        "set",
                        "is being set",
                        "failed",
                        "disabled for the vcs root",
                        "not supported yet for the vcs"
                    ],
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "text": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "vcs-root-instance": {
                    "$ref": "#/definitions/vcs-root-instance"
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/vcs-labeling.html",
            "x-help-article-name": "Labeling Sources",
            "x-is-data": true,
            "xml": {
                "name": "vcsLabel"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "build"
        },
        "vcsLabels": {
            "description": "Represents a list of VcsLabel entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "vcsLabel": {
                    "items": {
                        "$ref": "#/definitions/vcsLabel",
                        "xml": {
                            "name": "vcsLabel"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "VcsLabel",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "vcsLabels"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "build"
        },
        "vcs-root": {
            "description": "Represents a VCS root.",
            "properties": {
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "internalId": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "locator": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "modificationCheckInterval": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "project": {
                    "$ref": "#/definitions/project"
                },
                "projectLocator": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "properties": {
                    "$ref": "#/definitions/properties"
                },
                "repositoryIdStrings": {
                    "$ref": "#/definitions/items"
                },
                "uuid": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "vcsName": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "vcsRootInstances": {
                    "$ref": "#/definitions/vcs-root-instances"
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/vcs-root.html",
            "x-help-article-name": "VCS Root",
            "x-is-data": true,
            "xml": {
                "name": "vcs-root"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "change"
        },
        "vcs-root-entries": {
            "description": "Represents a list of VcsRootEntry entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "vcs-root-entry": {
                    "items": {
                        "$ref": "#/definitions/vcs-root-entry",
                        "xml": {
                            "name": "vcs-root-entry"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "VcsRootEntry",
            "x-is-data": true,
            "x-is-list": true,
            "xml": {
                "name": "vcs-root-entries"
            },
            "x-object-type": "ListEntity",
            "x-subpackage": "buildType"
        },
        "vcs-root-entry": {
            "description": "Represents a VCS root assigned to this build configuration.",
            "properties": {
                "checkout-rules": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "inherited": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "vcs-root": {
                    "$ref": "#/definitions/vcs-root"
                }
            },
            "type": "object",
            "x-is-data": true,
            "xml": {
                "name": "vcs-root-entry"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "buildType"
        },
        "vcs-root-instance": {
            "description": "Represents a relation between a VCS root and unique settings set for this root.",
            "properties": {
                "commitHookMode": {
                    "type": "boolean",
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "lastVersion": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "lastVersionInternal": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "modificationCheckInterval": {
                    "format": "int32",
                    "type": "integer",
                    "xml": {
                        "attribute": true
                    }
                },
                "name": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "projectLocator": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "properties": {
                    "$ref": "#/definitions/properties"
                },
                "repositoryIdStrings": {
                    "$ref": "#/definitions/items"
                },
                "repositoryState": {
                    "$ref": "#/definitions/repositoryState"
                },
                "status": {
                    "$ref": "#/definitions/vcsStatus"
                },
                "vcsName": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "vcs-root": {
                    "$ref": "#/definitions/vcs-root"
                },
                "vcs-root-id": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                },
                "vcsRootInternalId": {
                    "type": "string",
                    "xml": {
                        "attribute": true
                    }
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/configuring-vcs-settings.html#VCS+Settings+Overview",
            "x-help-article-name": "VCS Settings",
            "x-is-data": true,
            "xml": {
                "name": "vcs-root-instance"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "change"
        },
        "VcsRootInstanceLocator": {
            "description": "Represents a locator string for filtering VcsRootInstance entities.",
            "properties": {
                "affectedProject": {
                    "description": "Project (direct or indirect parent) locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "build": {
                    "description": "Build locator.",
                    "format": "BuildLocator",
                    "type": "string"
                },
                "buildType": {
                    "description": "Build type locator.",
                    "format": "BuildTypeLocator",
                    "type": "string"
                },
                "count": {
                    "description": "For paginated calls, how many entities to return per page.",
                    "format": "int32",
                    "type": "integer"
                },
                "id": {
                    "description": "Entity ID.",
                    "format": "int32",
                    "type": "integer"
                },
                "item": {
                    "description": "Supply multiple locators and return a union of the results.",
                    "format": "item:(<locator1>),item:(<locator2>...)",
                    "type": "string"
                },
                "lookupLimit": {
                    "description": "Limit processing to the latest `<lookupLimit>` entities.",
                    "format": "int32",
                    "type": "integer"
                },
                "project": {
                    "description": "Project (direct parent) locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "property": {
                    "enum": [
                        "exists",
                        "not-exists",
                        "equals",
                        "does-not-equal",
                        "starts-with",
                        "contains",
                        "does-not-contain",
                        "ends-with",
                        "any",
                        "matches",
                        "does-not-match",
                        "more-than",
                        "no-more-than",
                        "less-than",
                        "no-less-than",
                        "ver-more-than",
                        "ver-no-more-than",
                        "ver-less-than",
                        "ver-no-less-than"
                    ],
                    "format": "property:(name:<name>,value:<value>,matchType:<matchType>)",
                    "type": "string"
                },
                "start": {
                    "description": "For paginated calls, from which entity to start rendering the page.",
                    "format": "int32",
                    "type": "integer"
                },
                "type": {
                    "description": "Type of VCS (e.g. jetbrains.git).",
                    "type": "string"
                },
                "vcsRoot": {
                    "description": "VCS root locator.",
                    "format": "VcsRootLocator",
                    "type": "string"
                },
                "versionedSettings": {
                    "description": "Is used for versioned settings.",
                    "type": "boolean"
                }
            },
            "type": "object",
            "x-base-entity": "VcsRootInstance",
            "x-is-locator": true,
            "x-model-examples": [
                "`vcsRoot:<vcsRootLocator>` \u2014 find all VCS root instances of a VCS root found by `vcsRootLocator`.",
                "`project:<projectLocator>` \u2014 find all VCS root instances defined under project found by `projectLocator`."
            ],
            "x-object-type": "LocatorEntity",
            "x-subpackage": "locator"
        },
        "vcs-root-instances": {
            "description": "Represents a paginated list of VcsRootInstance entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "nextHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "prevHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "vcs-root-instance": {
                    "items": {
                        "$ref": "#/definitions/vcs-root-instance",
                        "xml": {
                            "name": "vcs-root-instance"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "VcsRootInstance",
            "x-is-data": true,
            "x-is-list": true,
            "x-is-paginated": true,
            "xml": {
                "name": "vcs-root-instances"
            },
            "x-object-type": "PaginatedEntity",
            "x-subpackage": "buildType"
        },
        "VcsRootLocator": {
            "description": "Represents a locator string for filtering VcsRoot entities.",
            "properties": {
                "affectedProject": {
                    "description": "Project (direct or indirect parent) locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "count": {
                    "description": "For paginated calls, how many entities to return per page.",
                    "format": "int32",
                    "type": "integer"
                },
                "id": {
                    "description": "Entity ID.",
                    "format": "int32",
                    "type": "integer"
                },
                "internalId": {
                    "type": "string"
                },
                "item": {
                    "description": "Supply multiple locators and return a union of the results.",
                    "format": "item:(<locator1>),item:(<locator2>...)",
                    "type": "string"
                },
                "lookupLimit": {
                    "description": "Limit processing to the latest `<lookupLimit>` entities.",
                    "format": "int32",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "project": {
                    "description": "Project (direct parent) locator.",
                    "format": "ProjectLocator",
                    "type": "string"
                },
                "property": {
                    "enum": [
                        "exists",
                        "not-exists",
                        "equals",
                        "does-not-equal",
                        "starts-with",
                        "contains",
                        "does-not-contain",
                        "ends-with",
                        "any",
                        "matches",
                        "does-not-match",
                        "more-than",
                        "no-more-than",
                        "less-than",
                        "no-less-than",
                        "ver-more-than",
                        "ver-no-more-than",
                        "ver-less-than",
                        "ver-no-less-than"
                    ],
                    "format": "property:(name:<name>,value:<value>,matchType:<matchType>)",
                    "type": "string"
                },
                "start": {
                    "description": "For paginated calls, from which entity to start rendering the page.",
                    "format": "int32",
                    "type": "integer"
                },
                "type": {
                    "description": "Type of VCS (e.g. jetbrains.git).",
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            },
            "type": "object",
            "x-base-entity": "VcsRoot",
            "x-is-locator": true,
            "x-model-examples": [
                "`type:jetbrains.git` \u2014 find all `Git`-typed VCS roots.",
                "`project:<projectLocator>` \u2014 find all VCS roots defined under project found by `projectLocator`."
            ],
            "x-object-type": "LocatorEntity",
            "x-subpackage": "locator"
        },
        "vcs-roots": {
            "description": "Represents a paginated list of VcsRoot entities.",
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "href": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "nextHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "prevHref": {
                    "type": "string",
                    "x-defined-in-base": true,
                    "xml": {
                        "attribute": true
                    }
                },
                "vcs-root": {
                    "items": {
                        "$ref": "#/definitions/vcs-root",
                        "xml": {
                            "name": "vcs-root"
                        }
                    },
                    "type": "array",
                    "x-is-first-container-var": true
                }
            },
            "type": "object",
            "x-base-entity": "VcsRoot",
            "x-is-data": true,
            "x-is-list": true,
            "x-is-paginated": true,
            "xml": {
                "name": "vcs-roots"
            },
            "x-object-type": "PaginatedEntity",
            "x-subpackage": "buildType"
        },
        "vcsStatus": {
            "description": "Represents links to the last or previous VCS root check.",
            "properties": {
                "current": {
                    "$ref": "#/definitions/VcsCheckStatus"
                },
                "previous": {
                    "$ref": "#/definitions/VcsCheckStatus"
                }
            },
            "type": "object",
            "x-help-article-link": "https://www.jetbrains.com/help/teamcity/configuring-vcs-roots.html",
            "x-help-article-name": "VCS Root",
            "x-is-data": true,
            "xml": {
                "name": "vcsStatus"
            },
            "x-object-type": "DataEntity",
            "x-subpackage": "change"
        }
    },
    "host": "localhost",
    "info": {
        "title": "TeamCity REST API",
        "version": "2018.1"
    },
    "paths": {
        "/app/rest": {
            "get": {
                "description": "",
                "operationId": "getRootEndpointsOfRoot",
                "parameters": [
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get root endpoints.",
                "tags": [
                    "Root"
                ]
            }
        },
        "/app/rest/agentPools": {
            "get": {
                "description": "",
                "operationId": "getAllAgentPools",
                "parameters": [
                    {
                        "format": "AgentPoolLocator",
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/agentPools"
                        }
                    }
                },
                "summary": "Get all agent pools.",
                "tags": [
                    "AgentPool"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "createAgentPool",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/agentPool"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/agentPool"
                        }
                    }
                },
                "summary": "Create a new agent pool.",
                "tags": [
                    "AgentPool"
                ]
            }
        },
        "/app/rest/agentPools/{agentPoolLocator}": {
            "delete": {
                "description": "",
                "operationId": "deleteAgentPool",
                "parameters": [
                    {
                        "format": "AgentPoolLocator",
                        "in": "path",
                        "name": "agentPoolLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Delete the agent pool matching the locator.",
                "tags": [
                    "AgentPool"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getAgentPoolOfAgentPool",
                "parameters": [
                    {
                        "format": "AgentPoolLocator",
                        "in": "path",
                        "name": "agentPoolLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/agentPool"
                        }
                    }
                },
                "summary": "Get the agent pool matching the locator.",
                "tags": [
                    "AgentPool"
                ]
            }
        },
        "/app/rest/agentPools/{agentPoolLocator}/{field}": {
            "get": {
                "description": "",
                "operationId": "getFieldFromAgentPool",
                "parameters": [
                    {
                        "format": "AgentPoolLocator",
                        "in": "path",
                        "name": "agentPoolLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "field",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get a field of the matching agent pool.",
                "tags": [
                    "AgentPool"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "setAgentPoolField",
                "parameters": [
                    {
                        "format": "AgentPoolLocator",
                        "in": "path",
                        "name": "agentPoolLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "field",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Update a field of the matching agent pool.",
                "tags": [
                    "AgentPool"
                ]
            }
        },
        "/app/rest/agentPools/{agentPoolLocator}/agents": {
            "get": {
                "description": "",
                "operationId": "getAllAgentsFromAgentPool",
                "parameters": [
                    {
                        "format": "AgentPoolLocator",
                        "in": "path",
                        "name": "agentPoolLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "format": "AgentLocator",
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/agents"
                        }
                    }
                },
                "summary": "Get the agent of the matching agent pool.",
                "tags": [
                    "AgentPool"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addAgentToAgentPool",
                "parameters": [
                    {
                        "format": "AgentPoolLocator",
                        "in": "path",
                        "name": "agentPoolLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/agent"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/agent"
                        }
                    }
                },
                "summary": "Assign the agent to the matching agent pool.",
                "tags": [
                    "AgentPool"
                ]
            }
        },
        "/app/rest/agentPools/{agentPoolLocator}/projects": {
            "delete": {
                "description": "",
                "operationId": "deleteAllProjectsFromAgentPool",
                "parameters": [
                    {
                        "format": "AgentPoolLocator",
                        "in": "path",
                        "name": "agentPoolLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Unassign all projects from the matching agent pool.",
                "tags": [
                    "AgentPool"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getAllProjectsFromAgentPool",
                "parameters": [
                    {
                        "format": "AgentPoolLocator",
                        "in": "path",
                        "name": "agentPoolLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/projects"
                        }
                    }
                },
                "summary": "Get all projects of the matching agent pool.",
                "tags": [
                    "AgentPool"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addProjectToAgentPool",
                "parameters": [
                    {
                        "format": "AgentPoolLocator",
                        "in": "path",
                        "name": "agentPoolLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/project"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/project"
                        }
                    }
                },
                "summary": "Assign the project to the matching agent pool.",
                "tags": [
                    "AgentPool"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "setAgentPoolProjects",
                "parameters": [
                    {
                        "format": "AgentPoolLocator",
                        "in": "path",
                        "name": "agentPoolLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/projects"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/projects"
                        }
                    }
                },
                "summary": "Update projects of the matching agent pool.",
                "tags": [
                    "AgentPool"
                ]
            }
        },
        "/app/rest/agentPools/{agentPoolLocator}/projects/{projectLocator}": {
            "delete": {
                "description": "",
                "operationId": "deleteProjectFromAgentPool",
                "parameters": [
                    {
                        "format": "AgentPoolLocator",
                        "in": "path",
                        "name": "agentPoolLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Unassign the project from the matching agent pool.",
                "tags": [
                    "AgentPool"
                ]
            }
        },
        "/app/rest/agents": {
            "get": {
                "description": "",
                "operationId": "getAllAgents",
                "parameters": [
                    {
                        "format": "AgentLocator",
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/agents"
                        }
                    }
                },
                "summary": "Get all known agents.",
                "tags": [
                    "Agent"
                ]
            }
        },
        "/app/rest/agents/{agentLocator}": {
            "delete": {
                "description": "",
                "operationId": "deleteAgent",
                "parameters": [
                    {
                        "format": "AgentLocator",
                        "in": "path",
                        "name": "agentLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Delete an inactive agent.",
                "tags": [
                    "Agent"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getAgent",
                "parameters": [
                    {
                        "format": "AgentLocator",
                        "in": "path",
                        "name": "agentLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/agent"
                        }
                    }
                },
                "summary": "Get agent matching the locator.",
                "tags": [
                    "Agent"
                ]
            }
        },
        "/app/rest/agents/{agentLocator}/{field}": {
            "get": {
                "description": "",
                "operationId": "getAgentField",
                "parameters": [
                    {
                        "format": "AgentLocator",
                        "in": "path",
                        "name": "agentLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "field",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get a field of the matching agent.",
                "tags": [
                    "Agent"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "setAgentField",
                "parameters": [
                    {
                        "format": "AgentLocator",
                        "in": "path",
                        "name": "agentLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "field",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Update a field of the matching agent.",
                "tags": [
                    "Agent"
                ]
            }
        },
        "/app/rest/agents/{agentLocator}/authorizedInfo": {
            "get": {
                "description": "",
                "operationId": "getAuthorizedInfo",
                "parameters": [
                    {
                        "format": "AgentLocator",
                        "in": "path",
                        "name": "agentLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/authorizedInfo"
                        }
                    }
                },
                "summary": "Get the authorization info of the matching agent.",
                "tags": [
                    "Agent"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "setAuthorizedInfo",
                "parameters": [
                    {
                        "format": "AgentLocator",
                        "in": "path",
                        "name": "agentLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/authorizedInfo"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/authorizedInfo"
                        }
                    }
                },
                "summary": "Update the authorization info of the matching agent.",
                "tags": [
                    "Agent"
                ]
            }
        },
        "/app/rest/agents/{agentLocator}/compatibilityPolicy": {
            "get": {
                "description": "",
                "operationId": "getBuildConfigurationRunPolicy",
                "parameters": [
                    {
                        "format": "AgentLocator",
                        "in": "path",
                        "name": "agentLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/compatibilityPolicy"
                        }
                    }
                },
                "summary": "Get the build configuration run policy of the matching agent.",
                "tags": [
                    "Agent"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "setBuildConfigurationRunPolicy",
                "parameters": [
                    {
                        "format": "AgentLocator",
                        "in": "path",
                        "name": "agentLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/compatibilityPolicy"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/compatibilityPolicy"
                        }
                    }
                },
                "summary": "Update build configuration run policy of agent matching locator.",
                "tags": [
                    "Agent"
                ]
            }
        },
        "/app/rest/agents/{agentLocator}/compatibleBuildTypes": {
            "get": {
                "description": "",
                "operationId": "getCompatibleBuildTypes",
                "parameters": [
                    {
                        "format": "AgentLocator",
                        "in": "path",
                        "name": "agentLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/buildTypes"
                        }
                    }
                },
                "summary": "Get build types compatible with the matching agent.",
                "tags": [
                    "Agent"
                ]
            }
        },
        "/app/rest/agents/{agentLocator}/enabledInfo": {
            "get": {
                "description": "",
                "operationId": "getEnabledInfo",
                "parameters": [
                    {
                        "format": "AgentLocator",
                        "in": "path",
                        "name": "agentLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/enabledInfo"
                        }
                    }
                },
                "summary": "Check if the matching agent is enabled.",
                "tags": [
                    "Agent"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "setEnabledInfo",
                "parameters": [
                    {
                        "format": "AgentLocator",
                        "in": "path",
                        "name": "agentLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/enabledInfo"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/enabledInfo"
                        }
                    }
                },
                "summary": "Update the enablement status of the matching agent.",
                "tags": [
                    "Agent"
                ]
            }
        },
        "/app/rest/agents/{agentLocator}/incompatibleBuildTypes": {
            "get": {
                "description": "",
                "operationId": "getIncompatibleBuildTypes",
                "parameters": [
                    {
                        "format": "AgentLocator",
                        "in": "path",
                        "name": "agentLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/compatibilities"
                        }
                    }
                },
                "summary": "Get build types incompatible with the matching agent.",
                "tags": [
                    "Agent"
                ]
            }
        },
        "/app/rest/agents/{agentLocator}/pool": {
            "get": {
                "description": "",
                "operationId": "getAgentPool",
                "parameters": [
                    {
                        "format": "AgentLocator",
                        "in": "path",
                        "name": "agentLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/agentPool"
                        }
                    }
                },
                "summary": "Get the agent pool of the matching agent.",
                "tags": [
                    "Agent"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "setAgentPool",
                "parameters": [
                    {
                        "format": "AgentLocator",
                        "in": "path",
                        "name": "agentLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/agentPool"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/agentPool"
                        }
                    }
                },
                "summary": "Assign the matching agent to the specified agent pool.",
                "tags": [
                    "Agent"
                ]
            }
        },
        "/app/rest/apiVersion": {
            "get": {
                "description": "",
                "operationId": "getApiVersion",
                "parameters": [
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get the API version.",
                "tags": [
                    "Root"
                ]
            }
        },
        "/app/rest/audit": {
            "get": {
                "description": "",
                "operationId": "getAllAuditEvents",
                "parameters": [
                    {
                        "format": "AuditLocator",
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/auditEvents"
                        }
                    }
                },
                "summary": "Get all audit events.",
                "tags": [
                    "Audit"
                ]
            }
        },
        "/app/rest/audit/{auditEventLocator}": {
            "get": {
                "description": "",
                "operationId": "getAuditEvent",
                "parameters": [
                    {
                        "format": "AuditLocator",
                        "in": "path",
                        "name": "auditEventLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/auditEvent"
                        }
                    }
                },
                "summary": "Get audit event matching the locator.",
                "tags": [
                    "Audit"
                ]
            }
        },
        "/app/rest/avatars/{userLocator}": {
            "delete": {
                "description": "",
                "operationId": "deleteAvatar",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Delete a users avatar",
                "tags": [
                    "Avatar"
                ]
            },
            "put": {
                "consumes": [
                    "multipart/form-data"
                ],
                "description": "",
                "operationId": "putAvatar",
                "parameters": [
                    {
                        "in": "formData",
                        "name": "avatar",
                        "required": false,
                        "type": "file"
                    },
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Update a users avatar",
                "tags": [
                    "Avatar"
                ]
            }
        },
        "/app/rest/avatars/{userLocator}/{size}/avatar.{hash}.png": {
            "get": {
                "description": "",
                "operationId": "getAvatarWithHash",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "avatar's size",
                        "format": "int32",
                        "in": "path",
                        "maximum": 300,
                        "minimum": 2,
                        "name": "size",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "in": "path",
                        "name": "hash",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "image/png"
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "examples": {
                            "image/png": ""
                        }
                    }
                },
                "summary": "Get a users avatar",
                "tags": [
                    "Avatar"
                ]
            }
        },
        "/app/rest/avatars/{userLocator}/{size}/avatar.png": {
            "get": {
                "description": "",
                "operationId": "getAvatar",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "avatar's size",
                        "format": "int32",
                        "in": "path",
                        "maximum": 300,
                        "minimum": 2,
                        "name": "size",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "image/png"
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "examples": {
                            "image/png": ""
                        }
                    }
                },
                "summary": "Get a users avatar",
                "tags": [
                    "Avatar"
                ]
            }
        },
        "/app/rest/buildQueue": {
            "delete": {
                "description": "",
                "operationId": "deleteAllQueuedBuilds",
                "parameters": [
                    {
                        "format": "BuildQueueLocator",
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Delete all queued builds.",
                "tags": [
                    "BuildQueue"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getAllQueuedBuilds",
                "parameters": [
                    {
                        "format": "BuildQueueLocator",
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/builds"
                        }
                    }
                },
                "summary": "Get all queued builds.",
                "tags": [
                    "BuildQueue"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addBuildToQueue",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/build"
                        }
                    },
                    {
                        "in": "query",
                        "name": "moveToTop",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/build"
                        }
                    }
                },
                "summary": "Add a new build to the queue.",
                "tags": [
                    "BuildQueue"
                ]
            }
        },
        "/app/rest/buildQueue/{buildLocator}/approvalInfo": {
            "get": {
                "description": "",
                "operationId": "getApprovalInfo",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/approvalInfo"
                        }
                    }
                },
                "summary": "Get approval info of a queued matching build.",
                "tags": [
                    "BuildQueue"
                ]
            }
        },
        "/app/rest/buildQueue/{buildLocator}/approve": {
            "post": {
                "description": "",
                "operationId": "approveQueuedBuild",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/approvalInfo"
                        }
                    }
                },
                "summary": "Approve queued build with approval feature enabled.",
                "tags": [
                    "BuildQueue"
                ]
            }
        },
        "/app/rest/buildQueue/{buildLocator}/tags": {
            "get": {
                "description": "",
                "operationId": "getQueuedBuildTags",
                "parameters": [
                    {
                        "format": "BuildQueueLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/tags"
                        }
                    }
                },
                "summary": "Get tags of the queued matching build.",
                "tags": [
                    "BuildQueue"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addTagsToBuildOfBuildQueue",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/tags"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Add tags to the matching build.",
                "tags": [
                    "BuildQueue"
                ]
            }
        },
        "/app/rest/buildQueue/{queuedBuildLocator}": {
            "delete": {
                "description": "",
                "operationId": "deleteQueuedBuild",
                "parameters": [
                    {
                        "format": "BuildQueueLocator",
                        "in": "path",
                        "name": "queuedBuildLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Delete a queued matching build.",
                "tags": [
                    "BuildQueue"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getQueuedBuild",
                "parameters": [
                    {
                        "format": "BuildQueueLocator",
                        "in": "path",
                        "name": "queuedBuildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/build"
                        }
                    }
                },
                "summary": "Get a queued matching build.",
                "tags": [
                    "BuildQueue"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "cancelQueuedBuild",
                "parameters": [
                    {
                        "format": "BuildQueueLocator",
                        "in": "path",
                        "name": "queuedBuildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/buildCancelRequest"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/build"
                        }
                    }
                },
                "summary": "Cancel a queued matching build.",
                "tags": [
                    "BuildQueue"
                ]
            }
        },
        "/app/rest/buildQueue/{queuedBuildLocator}/compatibleAgents": {
            "get": {
                "description": "",
                "operationId": "getCompatibleAgentsForBuild",
                "parameters": [
                    {
                        "format": "BuildQueueLocator",
                        "in": "path",
                        "name": "queuedBuildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/agents"
                        }
                    }
                },
                "summary": "Get compatible agents for a queued matching build.",
                "tags": [
                    "BuildQueue"
                ]
            }
        },
        "/app/rest/buildQueue/order": {
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "setQueuedBuildsOrder",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/builds"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/builds"
                        }
                    }
                },
                "summary": "Update the build queue order.",
                "tags": [
                    "BuildQueue"
                ]
            }
        },
        "/app/rest/buildQueue/order/{queuePosition}": {
            "get": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "getQueuedBuildPosition",
                "parameters": [
                    {
                        "in": "path",
                        "name": "queuePosition",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/build"
                        }
                    }
                },
                "summary": "Get the queue position of a queued matching build.",
                "tags": [
                    "BuildQueue"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "setQueuedBuildPosition",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/build"
                        }
                    },
                    {
                        "in": "path",
                        "name": "queuePosition",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/build"
                        }
                    }
                },
                "summary": "Update the queue position of a queued matching build.",
                "tags": [
                    "BuildQueue"
                ]
            }
        },
        "/app/rest/builds": {
            "get": {
                "description": "",
                "operationId": "getAllBuilds",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/builds"
                        }
                    }
                },
                "summary": "Get all builds.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}": {
            "delete": {
                "description": "",
                "operationId": "deleteBuild",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Delete build matching the locator.",
                "tags": [
                    "Build"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getBuild",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/build"
                        }
                    }
                },
                "summary": "Get build matching the locator.",
                "tags": [
                    "Build"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "cancelBuild",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/buildCancelRequest"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/build"
                        }
                    }
                },
                "summary": "cancelBuild",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/{field}": {
            "get": {
                "description": "",
                "operationId": "getBuildField",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "field",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get a field of the matching build.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/artifactDependencyChanges": {
            "get": {
                "description": "",
                "operationId": "getArtifactDependencyChanges",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/buildChanges"
                        }
                    }
                },
                "summary": "Get artifact dependency changes of the matching build.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/artifacts": {
            "get": {
                "description": "",
                "operationId": "getFilesListOfBuild",
                "parameters": [
                    {
                        "in": "query",
                        "name": "basePath",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "resolveParameters",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "logBuildUsage",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/files"
                        }
                    }
                },
                "summary": "List all files.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/artifacts/{path}": {
            "get": {
                "description": "",
                "operationId": "getFilesListForSubpathOfBuild",
                "parameters": [
                    {
                        "in": "path",
                        "name": "path",
                        "pattern": "(.*)?",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "basePath",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "resolveParameters",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "logBuildUsage",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/files"
                        }
                    }
                },
                "summary": "List files under this path.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/artifacts/archived{path}": {
            "get": {
                "description": "",
                "operationId": "getZippedFileOfBuild",
                "parameters": [
                    {
                        "in": "path",
                        "name": "path",
                        "pattern": "(/.*)?",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "basePath",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "resolveParameters",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "logBuildUsage",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "examples": {
                            "*/*": ""
                        }
                    }
                },
                "summary": "Get specific file zipped.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/artifacts/files{path}": {
            "get": {
                "description": "",
                "operationId": "downloadFileOfBuild",
                "parameters": [
                    {
                        "in": "path",
                        "name": "path",
                        "pattern": "(/.*)?",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "resolveParameters",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "logBuildUsage",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "examples": {
                            "*/*": ""
                        }
                    }
                },
                "summary": "Download specific file.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/artifacts/metadata{path}": {
            "get": {
                "description": "",
                "operationId": "getFileMetadataOfBuild",
                "parameters": [
                    {
                        "in": "path",
                        "name": "path",
                        "pattern": "(/.*)?",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "resolveParameters",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "logBuildUsage",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/file"
                        }
                    }
                },
                "summary": "Get metadata of specific file.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/artifactsDirectory": {
            "get": {
                "description": "",
                "operationId": "getArtifactsDirectory",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get the artifacts' directory of the matching build.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/caches/finishProperties": {
            "delete": {
                "description": "",
                "operationId": "resetBuildFinishProperties",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        }
                    }
                },
                "summary": "Remove build parameters from the matching build.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/canceledInfo": {
            "get": {
                "description": "",
                "operationId": "getCanceledInfo",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/comment"
                        }
                    }
                },
                "summary": "Check if the matching build is canceled.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/comment": {
            "delete": {
                "description": "",
                "operationId": "deleteBuildComment",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Remove the build comment matching the locator.",
                "tags": [
                    "Build"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "setBuildComment",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Update the comment on the matching build.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/finish": {
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "setFinishedTime",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Marks the running build as finished by passing agent the current time of the build to finish.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/finishDate": {
            "get": {
                "description": "",
                "operationId": "getBuildFinishDate",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get the finish date of the matching build.",
                "tags": [
                    "Build"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "setBuildFinishDate",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Marks the running build as finished by passing agent the current time of the build to finish.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/log": {
            "post": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "addLogMessageToBuild",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Adds a message to the build log. Service messages are accepted.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/number": {
            "get": {
                "description": "",
                "operationId": "getBuildNumber",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get the number of the matching build.",
                "tags": [
                    "Build"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "setBuildNumber",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Update the number of the matching build.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/pinInfo": {
            "get": {
                "description": "",
                "operationId": "getBuildPinInfo",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/pinInfo"
                        }
                    }
                },
                "summary": "Check if the matching build is pinned.",
                "tags": [
                    "Build"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "setBuildPinInfo",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/pinInfo"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/pinInfo"
                        }
                    }
                },
                "summary": "Update the pin info of the matching build.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/problemOccurrences": {
            "get": {
                "description": "",
                "operationId": "getBuildProblems",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/problemOccurrences"
                        }
                    }
                },
                "summary": "Get build problems of the matching build.",
                "tags": [
                    "Build"
                ]
            },
            "post": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "addProblemToBuild",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/problemOccurrence"
                        }
                    }
                },
                "summary": "Add a build problem to the matching build.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/relatedIssues": {
            "get": {
                "description": "",
                "operationId": "getBuildRelatedIssues",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/issuesUsages"
                        }
                    }
                },
                "summary": "Get related issues of the matching build.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/resolved/{value}": {
            "get": {
                "description": "",
                "operationId": "getBuildResolved",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "value",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get the resolvement status of the matching build.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/resulting-properties": {
            "get": {
                "description": "",
                "operationId": "getBuildActualParameters",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/properties"
                        }
                    }
                },
                "summary": "Get actual build parameters of the matching build.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/resulting-properties/{propertyName}": {
            "get": {
                "description": "",
                "operationId": "getBuildResultingProperties",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "propertyName",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Update a build parameter of the matching build.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/runningData": {
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "markBuildAsRunning",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/build"
                        }
                    }
                },
                "summary": "Starts the queued build as an agent-less build and returns the corresponding running build.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/sources/files/{fileName}": {
            "get": {
                "description": "",
                "operationId": "getBuildSourceFile",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "fileName",
                        "pattern": ".+",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "examples": {
                            "application/octet-stream": ""
                        }
                    }
                },
                "summary": "Get a source file of the matching build.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/statistics": {
            "get": {
                "description": "",
                "operationId": "getBuildStatisticValues",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/properties"
                        }
                    }
                },
                "summary": "Get all statistical values of the matching build.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/statistics/{name}": {
            "get": {
                "description": "",
                "operationId": "getBuildStatisticValue",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get a statistical value of the matching build.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/status": {
            "get": {
                "description": "",
                "operationId": "getBuildStatus",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get status of the matching build.",
                "tags": [
                    "Build"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "setBuildStatus",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/BuildStatusUpdate"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        }
                    }
                },
                "summary": "Change status of the build.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/statusIcon{suffix}": {
            "get": {
                "description": "",
                "operationId": "getBuildStatusIcon",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "suffix",
                        "pattern": "(.*)?",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Get the status icon (in specified format) of the matching build.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/statusText": {
            "get": {
                "description": "",
                "operationId": "getBuildStatusText",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get the build status text of the matching build.",
                "tags": [
                    "Build"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "setBuildStatusText",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Update the build status of the matching build.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/tags": {
            "get": {
                "description": "",
                "operationId": "getBuildTags",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "format": "TagLocator",
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/tags"
                        }
                    }
                },
                "summary": "Get tags of the matching build.",
                "tags": [
                    "Build"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addTagsToBuild",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/tags"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/tags"
                        }
                    }
                },
                "summary": "Add tags to the matching build.",
                "tags": [
                    "Build"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "setBuildTags",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "format": "TagLocator",
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/tags"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/tags"
                        }
                    }
                },
                "summary": "Update tags of the matching build.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/testOccurrences": {
            "get": {
                "description": "",
                "operationId": "getBuildTestOccurrences",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/testOccurrences"
                        }
                    }
                },
                "summary": "Get test occurrences of the matching build.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/{buildLocator}/vcsLabels": {
            "get": {
                "description": "",
                "operationId": "getBuildVcsLabels",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/vcsLabels"
                        }
                    }
                },
                "summary": "Get VCS labels of the matching build.",
                "tags": [
                    "Build"
                ]
            },
            "post": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "addBuildVcsLabel",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "format": "VcsRootInstanceLocator",
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/vcsLabels"
                        }
                    }
                },
                "summary": "Add a VCS label to the matching build.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/aggregated/{buildLocator}/status": {
            "get": {
                "description": "",
                "operationId": "getAggregatedBuildStatus",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get the build status of aggregated matching builds.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/aggregated/{buildLocator}/statusIcon{suffix}": {
            "get": {
                "description": "",
                "operationId": "getAggregatedBuildStatusIcon",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "suffix",
                        "pattern": "(.*)?",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Get the status icon (in specified format) of aggregated matching builds.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/multiple/{buildLocator}": {
            "delete": {
                "description": "",
                "operationId": "deleteMultipleBuilds",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/multipleOperationResult"
                        }
                    }
                },
                "summary": "Delete multiple builds matching the locator.",
                "tags": [
                    "Build"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getMultipleBuilds",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/builds"
                        }
                    }
                },
                "summary": "Get multiple builds matching the locator.",
                "tags": [
                    "Build"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "cancelMultiple",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/buildCancelRequest"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/multipleOperationResult"
                        }
                    }
                },
                "summary": "cancelMultipleBuilds",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/multiple/{buildLocator}/comment": {
            "delete": {
                "description": "",
                "operationId": "deleteMultipleBuildComments",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/multipleOperationResult"
                        }
                    }
                },
                "summary": "Delete comments of multiple matching builds.",
                "tags": [
                    "Build"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "setMultipleBuildComments",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/multipleOperationResult"
                        }
                    }
                },
                "summary": "Update comments in multiple matching builds.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/multiple/{buildLocator}/pinInfo": {
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "pinMultipleBuilds",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/pinInfo"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/multipleOperationResult"
                        }
                    }
                },
                "summary": "Pin multiple matching builds.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/builds/multiple/{buildLocator}/tags": {
            "delete": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "removeMultipleBuildTags",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/tags"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/multipleOperationResult"
                        }
                    }
                },
                "summary": "Remove tags from multiple matching builds.",
                "tags": [
                    "Build"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addTagsToMultipleBuilds",
                "parameters": [
                    {
                        "format": "BuildLocator",
                        "in": "path",
                        "name": "buildLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/tags"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/multipleOperationResult"
                        }
                    }
                },
                "summary": "Add tags to multiple matching builds.",
                "tags": [
                    "Build"
                ]
            }
        },
        "/app/rest/buildTypes": {
            "get": {
                "description": "",
                "operationId": "getAllBuildTypes",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/buildTypes"
                        }
                    }
                },
                "summary": "Get all build configurations.",
                "tags": [
                    "BuildType"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "createBuildType",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/buildType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/buildType"
                        }
                    }
                },
                "summary": "Create a new build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}": {
            "delete": {
                "description": "",
                "operationId": "deleteBuildType",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Delete build configuration matching the locator.",
                "tags": [
                    "BuildType"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getBuildType",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/buildType"
                        }
                    }
                },
                "summary": "Get build configuration matching the locator.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/{field}": {
            "get": {
                "description": "",
                "operationId": "getBuildTypeField",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "field",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get a field of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "setBuildTypeField",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "field",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Update a field of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/agent-requirements": {
            "get": {
                "description": "",
                "operationId": "getAllAgentRequirements",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/agent-requirements"
                        }
                    }
                },
                "summary": "Get all agent requirements of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addAgentRequirementToBuildType",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/agent-requirement"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/agent-requirement"
                        }
                    }
                },
                "summary": "Add an agent requirement to the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "replaceAllAgentRequirements",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/agent-requirements"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/agent-requirements"
                        }
                    }
                },
                "summary": "Update all agent requirements of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}": {
            "delete": {
                "description": "",
                "operationId": "deleteAgentRequirement",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "agentRequirementLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Remove an agent requirement of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getAgentRequirement",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "agentRequirementLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/agent-requirement"
                        }
                    }
                },
                "summary": "Get an agent requirement of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "replaceAgentRequirement",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "agentRequirementLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/agent-requirement"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/agent-requirement"
                        }
                    }
                },
                "summary": "Update an agent requirement of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}": {
            "get": {
                "description": "",
                "operationId": "getAgentRequirementParameter",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "agentRequirementLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "fieldName",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get a setting of an agent requirement of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "setAgentRequirementParameter",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "agentRequirementLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "fieldName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Update a parameter of an agent requirement of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/aliases": {
            "get": {
                "description": "",
                "operationId": "getAliases",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "field",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/items"
                        }
                    }
                },
                "summary": "Get external IDs of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/artifact-dependencies": {
            "get": {
                "description": "",
                "operationId": "getAllArtifactDependencies",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/artifact-dependencies"
                        }
                    }
                },
                "summary": "Get all artifact dependencies of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addArtifactDependencyToBuildType",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/artifact-dependency"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/artifact-dependency"
                        }
                    }
                },
                "summary": "Add an artifact dependency to the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "replaceAllArtifactDependencies",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/artifact-dependencies"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/artifact-dependencies"
                        }
                    }
                },
                "summary": "Update all artifact dependencies of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}": {
            "delete": {
                "description": "",
                "operationId": "deleteArtifactDependency",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "artifactDepLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Remove an artifact dependency from the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getArtifactDependency",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "artifactDepLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/artifact-dependency"
                        }
                    }
                },
                "summary": "Get an artifact dependency of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "replaceArtifactDependency",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "artifactDepLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/artifact-dependency"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/artifact-dependency"
                        }
                    }
                },
                "summary": "Update an artifact dependency of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}": {
            "get": {
                "description": "",
                "operationId": "getArtifactDependencyParameter",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "artifactDepLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "fieldName",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get a parameter of an artifact dependency of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "setArtifactDependencyParameter",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "artifactDepLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "fieldName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Update a parameter of an artifact dependency of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/branches": {
            "get": {
                "description": "",
                "operationId": "getAllBranchesOfBuildType",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/branches"
                        }
                    }
                },
                "summary": "Get all branches of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/builds": {
            "get": {
                "description": "",
                "operationId": "getBuildTypeBuilds",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/builds"
                        }
                    }
                },
                "summary": "Get builds of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/buildTags": {
            "get": {
                "description": "",
                "operationId": "getBuildTypeBuildTags",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "field",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/tags"
                        }
                    }
                },
                "summary": "Get tags of builds of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/features": {
            "get": {
                "description": "",
                "operationId": "getAllBuildFeatures",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/features"
                        }
                    }
                },
                "summary": "Get all build features of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addBuildFeatureToBuildType",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/feature"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/feature"
                        }
                    }
                },
                "summary": "Add build feature to the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "replaceAllBuildFeatures",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/features"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/features"
                        }
                    }
                },
                "summary": "Update all build features of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/features/{featureId}": {
            "delete": {
                "description": "",
                "operationId": "deleteFeatureOfBuildType",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "featureId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Remove a build feature of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getBuildFeature",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "featureId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/feature"
                        }
                    }
                },
                "summary": "Get a build feature of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "replaceBuildFeature",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "featureId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/feature"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/feature"
                        }
                    }
                },
                "summary": "Update a build feature of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}": {
            "get": {
                "description": "",
                "operationId": "getBuildFeatureSetting",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "featureId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get the setting of a build feature of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "setBuildFeatureParameter",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "featureId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Update a parameter of a build feature of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters": {
            "get": {
                "description": "",
                "operationId": "getAllBuildFeatureParameters",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "featureId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/properties"
                        }
                    }
                },
                "summary": "Get all parameters of a build feature of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "replaceBuildFeatureParameters",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "featureId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/properties"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/properties"
                        }
                    }
                },
                "summary": "Update a parameter of a build feature of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}": {
            "get": {
                "description": "",
                "operationId": "getBuildFeatureParameter",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "featureId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "parameterName",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get a parameter of a build feature of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "addParameterToBuildFeature",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "featureId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "parameterName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Update build feature parameter for the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/investigations": {
            "get": {
                "description": "",
                "operationId": "getAllInvestigationsOfBuildType",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/investigations"
                        }
                    }
                },
                "summary": "Get all investigations of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/parameters": {
            "delete": {
                "description": "",
                "operationId": "deleteBuildParametersOfBuildType",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Delete all build parameters.",
                "tags": [
                    "BuildType"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getBuildParametersOfBuildType",
                "parameters": [
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/properties"
                        }
                    }
                },
                "summary": "Get build parameters.",
                "tags": [
                    "BuildType"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "createBuildParameterOfBuildType",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/property"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/property"
                        }
                    }
                },
                "summary": "Create a build parameter.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "updateBuildParametersOfBuildType",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/properties"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/properties"
                        }
                    }
                },
                "summary": "Update build parameters.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/parameters/{name}": {
            "delete": {
                "description": "",
                "operationId": "deleteBuildParameterOfBuildType",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Delete build parameter.",
                "tags": [
                    "BuildType"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getBuildParameterOfBuildType",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/property"
                        }
                    }
                },
                "summary": "Get build parameter.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "updateBuildParameterOfBuildType",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/property"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/property"
                        }
                    }
                },
                "summary": "Update build parameter.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/parameters/{name}/type": {
            "get": {
                "description": "",
                "operationId": "getBuildParameterTypeOfBuildType",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/type"
                        }
                    }
                },
                "summary": "Get type of build parameter.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "updateBuildParameterTypeOfBuildType",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/type"
                        }
                    },
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/type"
                        }
                    }
                },
                "summary": "Update type of build parameter.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/parameters/{name}/type/rawValue": {
            "get": {
                "description": "",
                "operationId": "getBuildParameterSpecificationOfBuildType",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get build parameter specification.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "updateBuildParameterSpecificationOfBuildType",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Update build parameter specification.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/parameters/{name}/value": {
            "get": {
                "description": "",
                "operationId": "getBuildParameterValueOfBuildType",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get value of build parameter.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "updateBuildParameterValueOfBuildType",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Update value of build parameter.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/settingsFile": {
            "get": {
                "description": "",
                "operationId": "getBuildTypeSettingsFile",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get the settings file of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/snapshot-dependencies": {
            "get": {
                "description": "",
                "operationId": "getAllSnapshotDependencies",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/snapshot-dependencies"
                        }
                    }
                },
                "summary": "Get all snapshot dependencies of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addSnapshotDependencyToBuildType",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/snapshot-dependency"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/snapshot-dependency"
                        }
                    }
                },
                "summary": "Add a snapshot dependency to the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "replaceAllSnapshotDependencies",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/snapshot-dependencies"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/snapshot-dependencies"
                        }
                    }
                },
                "summary": "Update all snapshot dependencies of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}": {
            "delete": {
                "description": "",
                "operationId": "deleteSnapshotDependency",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "snapshotDepLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Delete a snapshot dependency of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getSnapshotDependency",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "snapshotDepLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/snapshot-dependency"
                        }
                    }
                },
                "summary": "Get a snapshot dependency of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "replaceSnapshotDependency",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "snapshotDepLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/snapshot-dependency"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/snapshot-dependency"
                        }
                    }
                },
                "summary": "Update a snapshot dependency of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/steps": {
            "get": {
                "description": "",
                "operationId": "getAllBuildSteps",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/steps"
                        }
                    }
                },
                "summary": "Get all build steps of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addBuildStepToBuildType",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/step"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/step"
                        }
                    }
                },
                "summary": "Add a build step to the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "replaceAllBuildSteps",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/steps"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/steps"
                        }
                    }
                },
                "summary": "Update all build steps of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/steps/{stepId}": {
            "delete": {
                "description": "",
                "operationId": "deleteBuildStep",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "stepId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Delete a build step of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getBuildStep",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "stepId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/step"
                        }
                    }
                },
                "summary": "Get a build step of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "replaceBuildStep",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "stepId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/step"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/step"
                        }
                    }
                },
                "summary": "Replace a build step of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}": {
            "get": {
                "description": "",
                "operationId": "getBuildStepSetting",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "stepId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "fieldName",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get the setting of a build step of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "setBuildStepParameter",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "stepId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "fieldName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Update a parameter of a build step of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters": {
            "get": {
                "description": "",
                "operationId": "getAllBuildStepParameters",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "stepId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/properties"
                        }
                    }
                },
                "summary": "Get all parameters of a build step of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "deleteBuildStepParameters",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "stepId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/properties"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/properties"
                        }
                    }
                },
                "summary": "Update a parameter of a build step of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}": {
            "get": {
                "description": "",
                "operationId": "getBuildStepParameter",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "stepId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "parameterName",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get a parameter of a build step of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "addParameterToBuildStep",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "stepId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "parameterName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Add a parameter to a build step of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/templates": {
            "delete": {
                "description": "",
                "operationId": "removeAllTemplates",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "inlineSettings",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Detach all templates from the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getAllBuildTemplates",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/buildTypes"
                        }
                    }
                },
                "summary": "Get all build templates of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addBuildTemplate",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/buildType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "optimizeSettings",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/buildType"
                        }
                    }
                },
                "summary": "Add a build template to the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "setBuildTypeTemplates",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/buildTypes"
                        }
                    },
                    {
                        "in": "query",
                        "name": "optimizeSettings",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/buildTypes"
                        }
                    }
                },
                "summary": "Update all templates of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/templates/{templateLocator}": {
            "delete": {
                "description": "",
                "operationId": "removeTemplate",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "templateLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "inlineSettings",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Detach a template from the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getBuildTemplate",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "templateLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/buildType"
                        }
                    }
                },
                "summary": "Get a template of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/triggers": {
            "get": {
                "description": "",
                "operationId": "getAllTriggers",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/triggers"
                        }
                    }
                },
                "summary": "Get all triggers of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addTriggerToBuildType",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/trigger"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/trigger"
                        }
                    }
                },
                "summary": "Add a trigger to the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "replaceAllTriggers",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/triggers"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/triggers"
                        }
                    }
                },
                "summary": "Update all triggers of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}": {
            "delete": {
                "description": "",
                "operationId": "deleteTrigger",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "triggerLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Delete a trigger of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getTrigger",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "triggerLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/trigger"
                        }
                    }
                },
                "summary": "Get a trigger of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "replaceTrigger",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "triggerLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/trigger"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/trigger"
                        }
                    }
                },
                "summary": "Update a trigger of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}": {
            "get": {
                "description": "",
                "operationId": "getTriggerParameter",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "triggerLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "fieldName",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get a parameter of a trigger of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "setTriggerParameter",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "triggerLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "fieldName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Update a parameter of a trigger of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/vcs/files/latest": {
            "get": {
                "description": "",
                "operationId": "getFilesListOfBuildType",
                "parameters": [
                    {
                        "in": "query",
                        "name": "basePath",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "resolveParameters",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/files"
                        }
                    }
                },
                "summary": "List all files.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/vcs/files/latest/{path}": {
            "get": {
                "description": "",
                "operationId": "getFilesListForSubpathOfBuildType",
                "parameters": [
                    {
                        "in": "path",
                        "name": "path",
                        "pattern": "(.*)?",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "basePath",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "resolveParameters",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/files"
                        }
                    }
                },
                "summary": "List files under this path.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/vcs/files/latest/archived{path}": {
            "get": {
                "description": "",
                "operationId": "getZippedFileOfBuildType",
                "parameters": [
                    {
                        "in": "path",
                        "name": "path",
                        "pattern": "(/.*)?",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "basePath",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "resolveParameters",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "examples": {
                            "*/*": ""
                        }
                    }
                },
                "summary": "Get specific file zipped.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/vcs/files/latest/files{path}": {
            "get": {
                "description": "",
                "operationId": "downloadFileOfBuildType",
                "parameters": [
                    {
                        "in": "path",
                        "name": "path",
                        "pattern": "(/.*)?",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "resolveParameters",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "examples": {
                            "*/*": ""
                        }
                    }
                },
                "summary": "Download specific file.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/vcs/files/latest/metadata{path}": {
            "get": {
                "description": "",
                "operationId": "getFileMetadataOfBuildType",
                "parameters": [
                    {
                        "in": "path",
                        "name": "path",
                        "pattern": "(/.*)?",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "resolveParameters",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/file"
                        }
                    }
                },
                "summary": "Get metadata of specific file.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/vcs-root-entries": {
            "get": {
                "description": "",
                "operationId": "getAllVcsRootsOfBuildType",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/vcs-root-entries"
                        }
                    }
                },
                "summary": "Get all VCS roots of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addVcsRootToBuildType",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/vcs-root-entry"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/vcs-root-entry"
                        }
                    }
                },
                "summary": "Add a VCS root to the matching build.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "replaceAllVcsRoots",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/vcs-root-entries"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/vcs-root-entries"
                        }
                    }
                },
                "summary": "Update all VCS roots of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}": {
            "delete": {
                "description": "",
                "operationId": "deleteVcsRootOfBuildType",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "format": "VcsRootLocator",
                        "in": "path",
                        "name": "vcsRootLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Remove a VCS root of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getVcsRoot",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "format": "VcsRootLocator",
                        "in": "path",
                        "name": "vcsRootLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/vcs-root-entry"
                        }
                    }
                },
                "summary": "Get a VCS root of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "updateBuildTypeVcsRoot",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "format": "VcsRootLocator",
                        "in": "path",
                        "name": "vcsRootLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/vcs-root-entry"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/vcs-root-entry"
                        }
                    }
                },
                "summary": "Update a VCS root of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules": {
            "get": {
                "description": "",
                "operationId": "getVcsRootCheckoutRules",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "format": "VcsRootLocator",
                        "in": "path",
                        "name": "vcsRootLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get checkout rules of a VCS root of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "updateBuildTypeVcsRootCheckoutRules",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "format": "VcsRootLocator",
                        "in": "path",
                        "name": "vcsRootLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Update checkout rules of a VCS root of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/buildTypes/{btLocator}/vcsRootInstances": {
            "get": {
                "description": "",
                "operationId": "getVcsRootInstancesOfBuildType",
                "parameters": [
                    {
                        "format": "BuildTypeLocator",
                        "in": "path",
                        "name": "btLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/vcs-root-instances"
                        }
                    }
                },
                "summary": "Get all VCS root instances of the matching build configuration.",
                "tags": [
                    "BuildType"
                ]
            }
        },
        "/app/rest/changes": {
            "get": {
                "description": "",
                "operationId": "getAllChanges",
                "parameters": [
                    {
                        "format": "ChangeLocator",
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/changes"
                        }
                    }
                },
                "summary": "Get all changes.",
                "tags": [
                    "Change"
                ]
            }
        },
        "/app/rest/changes/{changeLocator}": {
            "get": {
                "description": "",
                "operationId": "getChange",
                "parameters": [
                    {
                        "format": "ChangeLocator",
                        "in": "path",
                        "name": "changeLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/change"
                        }
                    }
                },
                "summary": "Get change matching the locator.",
                "tags": [
                    "Change"
                ]
            }
        },
        "/app/rest/changes/{changeLocator}/{field}": {
            "get": {
                "description": "",
                "operationId": "getChangeField",
                "parameters": [
                    {
                        "format": "ChangeLocator",
                        "in": "path",
                        "name": "changeLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "field",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get a field of the matching change.",
                "tags": [
                    "Change"
                ]
            }
        },
        "/app/rest/changes/{changeLocator}/attributes": {
            "get": {
                "description": "",
                "operationId": "getChangeAttributes",
                "parameters": [
                    {
                        "format": "ChangeLocator",
                        "in": "path",
                        "name": "changeLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/entries"
                        }
                    }
                },
                "summary": "Get attributes of the matching change.",
                "tags": [
                    "Change"
                ]
            }
        },
        "/app/rest/changes/{changeLocator}/duplicates": {
            "get": {
                "description": "",
                "operationId": "getChangeDuplicates",
                "parameters": [
                    {
                        "format": "ChangeLocator",
                        "in": "path",
                        "name": "changeLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/changes"
                        }
                    }
                },
                "summary": "Get duplicates of the matching change.",
                "tags": [
                    "Change"
                ]
            }
        },
        "/app/rest/changes/{changeLocator}/issues": {
            "get": {
                "description": "",
                "operationId": "getChangeIssue",
                "parameters": [
                    {
                        "format": "ChangeLocator",
                        "in": "path",
                        "name": "changeLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/issues"
                        }
                    }
                },
                "summary": "Get issues of the matching change.",
                "tags": [
                    "Change"
                ]
            }
        },
        "/app/rest/changes/{changeLocator}/parentChanges": {
            "get": {
                "description": "",
                "operationId": "getChangeParentChanges",
                "parameters": [
                    {
                        "format": "ChangeLocator",
                        "in": "path",
                        "name": "changeLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/changes"
                        }
                    }
                },
                "summary": "Get parent changes of the matching change.",
                "tags": [
                    "Change"
                ]
            }
        },
        "/app/rest/changes/{changeLocator}/parentRevisions": {
            "get": {
                "description": "",
                "operationId": "getChangeParentRevisions",
                "parameters": [
                    {
                        "format": "ChangeLocator",
                        "in": "path",
                        "name": "changeLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/items"
                        }
                    }
                },
                "summary": "Get parent revisions of the matching change.",
                "tags": [
                    "Change"
                ]
            }
        },
        "/app/rest/changes/{changeLocator}/vcsRootInstance": {
            "get": {
                "description": "",
                "operationId": "getChangeVcsRoot",
                "parameters": [
                    {
                        "format": "ChangeLocator",
                        "in": "path",
                        "name": "changeLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/vcs-root-instance"
                        }
                    }
                },
                "summary": "Get a VCS root instance of the matching change.",
                "tags": [
                    "Change"
                ]
            }
        },
        "/app/rest/cloud/images": {
            "get": {
                "description": "",
                "operationId": "getAllCloudImages",
                "parameters": [
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/cloudImages"
                        }
                    }
                },
                "summary": "Get all cloud images.",
                "tags": [
                    "CloudInstance"
                ]
            }
        },
        "/app/rest/cloud/images/{imageLocator}": {
            "get": {
                "description": "",
                "operationId": "getCloudImage",
                "parameters": [
                    {
                        "in": "path",
                        "name": "imageLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/cloudImage"
                        }
                    }
                },
                "summary": "Get cloud image matching the locator.",
                "tags": [
                    "CloudInstance"
                ]
            }
        },
        "/app/rest/cloud/instances": {
            "get": {
                "description": "",
                "operationId": "getAllCloudInstances",
                "parameters": [
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/cloudInstances"
                        }
                    }
                },
                "summary": "Get all cloud instances.",
                "tags": [
                    "CloudInstance"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "startInstance",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/cloudInstance"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        }
                    }
                },
                "summary": "Start a new cloud instance.",
                "tags": [
                    "CloudInstance"
                ]
            }
        },
        "/app/rest/cloud/instances/{instanceLocator}": {
            "delete": {
                "description": "",
                "operationId": "stopInstance",
                "parameters": [
                    {
                        "in": "path",
                        "name": "instanceLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Stop cloud instance matching the locator.",
                "tags": [
                    "CloudInstance"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getCloudInstance",
                "parameters": [
                    {
                        "in": "path",
                        "name": "instanceLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/cloudInstance"
                        }
                    }
                },
                "summary": "Get cloud instance matching the locator.",
                "tags": [
                    "CloudInstance"
                ]
            }
        },
        "/app/rest/cloud/profiles": {
            "get": {
                "description": "",
                "operationId": "getAllCloudProfiles",
                "parameters": [
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/cloudProfiles"
                        }
                    }
                },
                "summary": "Get all cloud profiles.",
                "tags": [
                    "CloudInstance"
                ]
            }
        },
        "/app/rest/cloud/profiles/{profileLocator}": {
            "get": {
                "description": "",
                "operationId": "getCloudProfile",
                "parameters": [
                    {
                        "in": "path",
                        "name": "profileLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/cloudProfile"
                        }
                    }
                },
                "summary": "Get cloud profile matching the locator.",
                "tags": [
                    "CloudInstance"
                ]
            }
        },
        "/app/rest/health": {
            "get": {
                "operationId": "getHealthItems",
                "parameters": [
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/healthStatusItems"
                        }
                    }
                },
                "tags": [
                    "health"
                ]
            }
        },
        "/app/rest/health/{locator}": {
            "get": {
                "operationId": "getSingleHealthItem",
                "parameters": [
                    {
                        "in": "path",
                        "name": "locator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/healthItem"
                        }
                    }
                },
                "tags": [
                    "health"
                ]
            }
        },
        "/app/rest/health/category": {
            "get": {
                "operationId": "getCategories",
                "parameters": [
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/healthCategories"
                        }
                    }
                },
                "tags": [
                    "health"
                ]
            }
        },
        "/app/rest/health/category/{locator}": {
            "get": {
                "operationId": "getSingleCategory",
                "parameters": [
                    {
                        "in": "path",
                        "name": "locator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/healthCategory"
                        }
                    }
                },
                "tags": [
                    "health"
                ]
            }
        },
        "/app/rest/info": {
            "get": {
                "description": "",
                "operationId": "getPluginInfo",
                "parameters": [
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/plugin"
                        }
                    }
                },
                "summary": "Get the plugin info.",
                "tags": [
                    "Root"
                ]
            }
        },
        "/app/rest/investigations": {
            "get": {
                "description": "",
                "operationId": "getAllInvestigations",
                "parameters": [
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/investigations"
                        }
                    }
                },
                "summary": "Get all investigations.",
                "tags": [
                    "Investigation"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addInvestigation",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/investigation"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/investigation"
                        }
                    }
                },
                "summary": "Create a new investigation.",
                "tags": [
                    "Investigation"
                ]
            }
        },
        "/app/rest/investigations/{investigationLocator}": {
            "delete": {
                "description": "",
                "operationId": "deleteInvestigation",
                "parameters": [
                    {
                        "format": "InvestigationLocator",
                        "in": "path",
                        "name": "investigationLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        }
                    }
                },
                "summary": "Delete investigation matching the locator.",
                "tags": [
                    "Investigation"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getInvestigation",
                "parameters": [
                    {
                        "format": "InvestigationLocator",
                        "in": "path",
                        "name": "investigationLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/investigation"
                        }
                    }
                },
                "summary": "Get investigation matching the locator.",
                "tags": [
                    "Investigation"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "replaceInvestigation",
                "parameters": [
                    {
                        "format": "InvestigationLocator",
                        "in": "path",
                        "name": "investigationLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/investigation"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/investigation"
                        }
                    }
                },
                "summary": "Update investigation matching the locator.",
                "tags": [
                    "Investigation"
                ]
            }
        },
        "/app/rest/investigations/multiple": {
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addMultipleInvestigations",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/investigations"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/investigations"
                        }
                    }
                },
                "summary": "Create multiple new investigations.",
                "tags": [
                    "Investigation"
                ]
            }
        },
        "/app/rest/mutes": {
            "get": {
                "description": "",
                "operationId": "getAllMutedTests",
                "parameters": [
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/mutes"
                        }
                    }
                },
                "summary": "Get all muted tests.",
                "tags": [
                    "Mute"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "muteTest",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/mute"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/mute"
                        }
                    }
                },
                "summary": "Mute a test.",
                "tags": [
                    "Mute"
                ]
            }
        },
        "/app/rest/mutes/{muteLocator}": {
            "delete": {
                "description": "",
                "operationId": "unmuteTest",
                "parameters": [
                    {
                        "format": "MuteLocator",
                        "in": "path",
                        "name": "muteLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        }
                    }
                },
                "summary": "Unmute the matching test.",
                "tags": [
                    "Mute"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getMutedTest",
                "parameters": [
                    {
                        "format": "MuteLocator",
                        "in": "path",
                        "name": "muteLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/mute"
                        }
                    }
                },
                "summary": "Get a muted test.",
                "tags": [
                    "Mute"
                ]
            }
        },
        "/app/rest/mutes/multiple": {
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "muteMultipleTests",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/mutes"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/mutes"
                        }
                    }
                },
                "summary": "Mute multiple tests.",
                "tags": [
                    "Mute"
                ]
            }
        },
        "/app/rest/problemOccurrences": {
            "get": {
                "description": "",
                "operationId": "getAllBuildProblemOccurrences",
                "parameters": [
                    {
                        "format": "ProblemOccurrenceLocator",
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/problemOccurrences"
                        }
                    }
                },
                "summary": "Get all build problem occurrences.",
                "tags": [
                    "ProblemOccurrence"
                ]
            }
        },
        "/app/rest/problemOccurrences/{problemLocator}": {
            "get": {
                "description": "",
                "operationId": "getBuildProblemOccurrence",
                "parameters": [
                    {
                        "format": "ProblemOccurrenceLocator",
                        "in": "path",
                        "name": "problemLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/problemOccurrence"
                        }
                    }
                },
                "summary": "Get a matching build problem occurrence.",
                "tags": [
                    "ProblemOccurrence"
                ]
            }
        },
        "/app/rest/problems": {
            "get": {
                "description": "",
                "operationId": "getAllBuildProblems",
                "parameters": [
                    {
                        "format": "ProblemLocator",
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/problems"
                        }
                    }
                },
                "summary": "Get all build problems.",
                "tags": [
                    "Problem"
                ]
            }
        },
        "/app/rest/problems/{problemLocator}": {
            "get": {
                "description": "",
                "operationId": "getBuildProblem",
                "parameters": [
                    {
                        "format": "ProblemLocator",
                        "in": "path",
                        "name": "problemLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/problem"
                        }
                    }
                },
                "summary": "Get a matching build problem.",
                "tags": [
                    "Problem"
                ]
            }
        },
        "/app/rest/projects": {
            "get": {
                "description": "",
                "operationId": "getAllProjects",
                "parameters": [
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/projects"
                        }
                    }
                },
                "summary": "Get all projects.",
                "tags": [
                    "Project"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addProject",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/newProjectDescription"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/project"
                        }
                    }
                },
                "summary": "Create a new project.",
                "tags": [
                    "Project"
                ]
            }
        },
        "/app/rest/projects/{projectLocator}": {
            "delete": {
                "description": "",
                "operationId": "deleteProject",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Delete project matching the locator.",
                "tags": [
                    "Project"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getProject",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/project"
                        }
                    }
                },
                "summary": "Get project matching the locator.",
                "tags": [
                    "Project"
                ]
            }
        },
        "/app/rest/projects/{projectLocator}/{field}": {
            "get": {
                "description": "",
                "operationId": "getProjectField",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "field",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get a field of the matching project.",
                "tags": [
                    "Project"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "setProjectField",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "field",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Update a field of the matching project.",
                "tags": [
                    "Project"
                ]
            }
        },
        "/app/rest/projects/{projectLocator}/agentPools": {
            "get": {
                "description": "",
                "operationId": "getAgentPoolsProject",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/agentPools"
                        }
                    }
                },
                "summary": "Get agent pools appointed to the matching project.",
                "tags": [
                    "Project"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addAgentPoolsProject",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/agentPool"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/agentPool"
                        }
                    }
                },
                "summary": "Assign the matching project to the agent pool.",
                "tags": [
                    "Project"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "setAgentPoolsProject",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/agentPools"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/agentPools"
                        }
                    }
                },
                "summary": "Update agent pools apppointed to the matching project.",
                "tags": [
                    "Project"
                ]
            }
        },
        "/app/rest/projects/{projectLocator}/agentPools/{agentPoolLocator}": {
            "delete": {
                "description": "",
                "operationId": "removeProjectFromAgentPool",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "agentPoolLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Unassign a project from the matching agent pool.",
                "tags": [
                    "Project"
                ]
            }
        },
        "/app/rest/projects/{projectLocator}/branches": {
            "get": {
                "description": "",
                "operationId": "getAllBranches",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/branches"
                        }
                    }
                },
                "summary": "Get all branches of the matching project.",
                "tags": [
                    "Project"
                ]
            }
        },
        "/app/rest/projects/{projectLocator}/buildTypes": {
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addBuildType",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/newBuildTypeDescription"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/buildType"
                        }
                    }
                },
                "summary": "Add a build configuration to the matching project.",
                "tags": [
                    "Project"
                ]
            }
        },
        "/app/rest/projects/{projectLocator}/defaultTemplate": {
            "delete": {
                "description": "",
                "operationId": "removeDefaultTemplate",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Remove the default template from the matching project.",
                "tags": [
                    "Project"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getDefaultTemplate",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/buildType"
                        }
                    }
                },
                "summary": "Get the default template of the matching project.",
                "tags": [
                    "Project"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "setDefaultTemplate",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/buildType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/buildType"
                        }
                    }
                },
                "summary": "Update the default template of the matching project.",
                "tags": [
                    "Project"
                ]
            }
        },
        "/app/rest/projects/{projectLocator}/order/buildTypes": {
            "get": {
                "description": "",
                "operationId": "getAllBuildTypesOrdered",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "field",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/buildTypes"
                        }
                    }
                },
                "summary": "Get all build configurations from the matching project, with custom ordering applied.",
                "tags": [
                    "Project"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "setBuildTypesOrder",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/buildTypes"
                        }
                    },
                    {
                        "in": "query",
                        "name": "field",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/buildTypes"
                        }
                    }
                },
                "summary": "Update custom ordering of build configurations of the matching project.",
                "tags": [
                    "Project"
                ]
            }
        },
        "/app/rest/projects/{projectLocator}/order/projects": {
            "get": {
                "description": "",
                "operationId": "getAllSubprojectsOrdered",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "field",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/projects"
                        }
                    }
                },
                "summary": "Get all subprojects of the matching project, with custom ordering applied.",
                "tags": [
                    "Project"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "setSubprojectsOrder",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/projects"
                        }
                    },
                    {
                        "in": "query",
                        "name": "field",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/projects"
                        }
                    }
                },
                "summary": "Update custom ordering of subprojects of the matching project.",
                "tags": [
                    "Project"
                ]
            }
        },
        "/app/rest/projects/{projectLocator}/parameters": {
            "delete": {
                "description": "",
                "operationId": "deleteBuildParameters",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Delete all build parameters.",
                "tags": [
                    "Project"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getBuildParameters",
                "parameters": [
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/properties"
                        }
                    }
                },
                "summary": "Get build parameters.",
                "tags": [
                    "Project"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "createBuildParameter",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/property"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/property"
                        }
                    }
                },
                "summary": "Create a build parameter.",
                "tags": [
                    "Project"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "updateBuildParameters",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/properties"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/properties"
                        }
                    }
                },
                "summary": "Update build parameters.",
                "tags": [
                    "Project"
                ]
            }
        },
        "/app/rest/projects/{projectLocator}/parameters/{name}": {
            "delete": {
                "description": "",
                "operationId": "deleteBuildParameter",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Delete build parameter.",
                "tags": [
                    "Project"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getBuildParameter",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/property"
                        }
                    }
                },
                "summary": "Get build parameter.",
                "tags": [
                    "Project"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "updateBuildParameter",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/property"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/property"
                        }
                    }
                },
                "summary": "Update build parameter.",
                "tags": [
                    "Project"
                ]
            }
        },
        "/app/rest/projects/{projectLocator}/parameters/{name}/type": {
            "get": {
                "description": "",
                "operationId": "getBuildParameterType",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/type"
                        }
                    }
                },
                "summary": "Get type of build parameter.",
                "tags": [
                    "Project"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "updateBuildParameterType",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/type"
                        }
                    },
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/type"
                        }
                    }
                },
                "summary": "Update type of build parameter.",
                "tags": [
                    "Project"
                ]
            }
        },
        "/app/rest/projects/{projectLocator}/parameters/{name}/type/rawValue": {
            "get": {
                "description": "",
                "operationId": "getBuildParameterSpecification",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get build parameter specification.",
                "tags": [
                    "Project"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "updateBuildParameterSpecification",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Update build parameter specification.",
                "tags": [
                    "Project"
                ]
            }
        },
        "/app/rest/projects/{projectLocator}/parameters/{name}/value": {
            "get": {
                "description": "",
                "operationId": "getBuildParameterValue",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get value of build parameter.",
                "tags": [
                    "Project"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "updateBuildParameterValue",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Update value of build parameter.",
                "tags": [
                    "Project"
                ]
            }
        },
        "/app/rest/projects/{projectLocator}/parentProject": {
            "get": {
                "description": "",
                "operationId": "getProjectParentProject",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/project"
                        }
                    }
                },
                "summary": "Get the parent project of the matching project.",
                "tags": [
                    "Project"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "setParentProject",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/project"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/project"
                        }
                    }
                },
                "summary": "Update the parent project of the matching project.",
                "tags": [
                    "Project"
                ]
            }
        },
        "/app/rest/projects/{projectLocator}/projectFeatures": {
            "get": {
                "description": "",
                "operationId": "getFeatures",
                "parameters": [
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "summary": "Get all features.",
                "tags": [
                    "Project"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addFeature",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/projectFeature"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "summary": "Add a feature.",
                "tags": [
                    "Project"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "updateFeatures",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/projectFeatures"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "summary": "Update all features.",
                "tags": [
                    "Project"
                ]
            }
        },
        "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}": {
            "delete": {
                "description": "",
                "operationId": "deleteFeature",
                "parameters": [
                    {
                        "in": "path",
                        "name": "featureLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Delete a matching feature.",
                "tags": [
                    "Project"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getFeature",
                "parameters": [
                    {
                        "in": "path",
                        "name": "featureLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "summary": "Get a matching feature.",
                "tags": [
                    "Project"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "updateFeature",
                "parameters": [
                    {
                        "in": "path",
                        "name": "featureLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/projectFeature"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "summary": "Update a matching feature.",
                "tags": [
                    "Project"
                ]
            }
        },
        "/app/rest/projects/{projectLocator}/secure/tokens": {
            "post": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "addSecureToken",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Create a new secure token for the matching project.",
                "tags": [
                    "Project"
                ]
            }
        },
        "/app/rest/projects/{projectLocator}/secure/values/{token}": {
            "get": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "getSecureValue",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get a secure token of the matching project.",
                "tags": [
                    "Project"
                ]
            }
        },
        "/app/rest/projects/{projectLocator}/settingsFile": {
            "get": {
                "description": "",
                "operationId": "getProjectSettingsFile",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get the settings file of the matching build configuration.",
                "tags": [
                    "Project"
                ]
            }
        },
        "/app/rest/projects/{projectLocator}/templates": {
            "get": {
                "description": "",
                "operationId": "getProjectTemplates",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/buildTypes"
                        }
                    }
                },
                "summary": "Get all templates of the matching project.",
                "tags": [
                    "Project"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addTemplate",
                "parameters": [
                    {
                        "format": "ProjectLocator",
                        "in": "path",
                        "name": "projectLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/newBuildTypeDescription"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/buildType"
                        }
                    }
                },
                "summary": "Add a build configuration template to the matching project.",
                "tags": [
                    "Project"
                ]
            }
        },
        "/app/rest/server": {
            "get": {
                "description": "",
                "operationId": "getServerInfo",
                "parameters": [
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/server"
                        }
                    }
                },
                "summary": "Get the server info.",
                "tags": [
                    "Server"
                ]
            }
        },
        "/app/rest/server/{field}": {
            "get": {
                "description": "",
                "operationId": "getServerField",
                "parameters": [
                    {
                        "in": "path",
                        "name": "field",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get a field of the server info.",
                "tags": [
                    "Server"
                ]
            }
        },
        "/app/rest/server/backup": {
            "get": {
                "description": "",
                "operationId": "getBackupStatus",
                "parameters": [
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get the latest backup status.",
                "tags": [
                    "Server"
                ]
            },
            "post": {
                "description": "",
                "operationId": "startBackup",
                "parameters": [
                    {
                        "in": "query",
                        "name": "fileName",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "addTimestamp",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "includeConfigs",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "includeDatabase",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "includeBuildLogs",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "includePersonalChanges",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "includeRunningBuilds",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "includeSupplimentaryData",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Start a new backup.",
                "tags": [
                    "Server"
                ]
            }
        },
        "/app/rest/server/files/{areaId}": {
            "get": {
                "description": "",
                "operationId": "getFilesListOfServer",
                "parameters": [
                    {
                        "in": "query",
                        "name": "basePath",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "areaId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/files"
                        }
                    }
                },
                "summary": "List all files.",
                "tags": [
                    "Server"
                ]
            }
        },
        "/app/rest/server/files/{areaId}/{path}": {
            "get": {
                "description": "",
                "operationId": "getFilesListForSubpathOfServer",
                "parameters": [
                    {
                        "in": "path",
                        "name": "path",
                        "pattern": "(.*)?",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "basePath",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "areaId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/files"
                        }
                    }
                },
                "summary": "List files under this path.",
                "tags": [
                    "Server"
                ]
            }
        },
        "/app/rest/server/files/{areaId}/archived{path}": {
            "get": {
                "description": "",
                "operationId": "getZippedFileOfServer",
                "parameters": [
                    {
                        "in": "path",
                        "name": "path",
                        "pattern": "(/.*)?",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "basePath",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "areaId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "examples": {
                            "*/*": ""
                        }
                    }
                },
                "summary": "Get specific file zipped.",
                "tags": [
                    "Server"
                ]
            }
        },
        "/app/rest/server/files/{areaId}/files{path}": {
            "get": {
                "description": "",
                "operationId": "downloadFileOfServer",
                "parameters": [
                    {
                        "in": "path",
                        "name": "path",
                        "pattern": "(/.*)?",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "areaId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "examples": {
                            "*/*": ""
                        }
                    }
                },
                "summary": "Download specific file.",
                "tags": [
                    "Server"
                ]
            }
        },
        "/app/rest/server/files/{areaId}/metadata{path}": {
            "get": {
                "description": "",
                "operationId": "getFileMetadataOfServer",
                "parameters": [
                    {
                        "in": "path",
                        "name": "path",
                        "pattern": "(/.*)?",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "areaId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/file"
                        }
                    }
                },
                "summary": "Get metadata of specific file.",
                "tags": [
                    "Server"
                ]
            }
        },
        "/app/rest/server/licensingData": {
            "get": {
                "description": "",
                "operationId": "getLicensingData",
                "parameters": [
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/licensingData"
                        }
                    }
                },
                "summary": "Get the licensing data.",
                "tags": [
                    "Server"
                ]
            }
        },
        "/app/rest/server/licensingData/licenseKeys": {
            "get": {
                "description": "",
                "operationId": "getLicenseKeys",
                "parameters": [
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/licenseKeys"
                        }
                    }
                },
                "summary": "Get all license keys.",
                "tags": [
                    "Server"
                ]
            },
            "post": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "addLicenseKeys",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/licenseKeys"
                        }
                    }
                },
                "summary": "Add license keys.",
                "tags": [
                    "Server"
                ]
            }
        },
        "/app/rest/server/licensingData/licenseKeys/{licenseKey}": {
            "delete": {
                "description": "",
                "operationId": "deleteLicenseKey",
                "parameters": [
                    {
                        "in": "path",
                        "name": "licenseKey",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Delete a license key.",
                "tags": [
                    "Server"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getLicenseKey",
                "parameters": [
                    {
                        "in": "path",
                        "name": "licenseKey",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/licenseKey"
                        }
                    }
                },
                "summary": "Get a license key.",
                "tags": [
                    "Server"
                ]
            }
        },
        "/app/rest/server/metrics": {
            "get": {
                "description": "",
                "operationId": "getAllMetrics",
                "parameters": [
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/metrics"
                        }
                    }
                },
                "summary": "Get metrics.",
                "tags": [
                    "Server"
                ]
            }
        },
        "/app/rest/server/nodes": {
            "get": {
                "description": "",
                "operationId": "getAllNodes",
                "parameters": [
                    {
                        "format": "TeamCityNodeLocator",
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/nodes"
                        }
                    }
                },
                "summary": "Get all TeamCity nodes.",
                "tags": [
                    "Node"
                ]
            }
        },
        "/app/rest/server/nodes/{nodeLocator}": {
            "get": {
                "description": "",
                "operationId": "getNode",
                "parameters": [
                    {
                        "format": "TeamCityNodeLocator",
                        "in": "path",
                        "name": "nodeLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/node"
                        }
                    }
                },
                "summary": "Get a node matching the locator.",
                "tags": [
                    "Node"
                ]
            }
        },
        "/app/rest/server/nodes/{nodeLocator}/disabledResponsibilities": {
            "get": {
                "description": "",
                "operationId": "getDisabledResponsibilities",
                "parameters": [
                    {
                        "format": "TeamCityNodeLocator",
                        "in": "path",
                        "name": "nodeLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/disabledResponsibilities"
                        }
                    }
                },
                "summary": "Get all effective responsibilities for a node matching the locator.",
                "tags": [
                    "Node"
                ]
            }
        },
        "/app/rest/server/nodes/{nodeLocator}/effectiveResponsibilities": {
            "get": {
                "description": "",
                "operationId": "getEffectiveResponsibilities",
                "parameters": [
                    {
                        "format": "TeamCityNodeLocator",
                        "in": "path",
                        "name": "nodeLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/effectiveResponsibilities"
                        }
                    }
                },
                "summary": "Get all effective responsibilities for a node matching the locator.",
                "tags": [
                    "Node"
                ]
            }
        },
        "/app/rest/server/nodes/{nodeLocator}/enabledResponsibilities": {
            "get": {
                "description": "",
                "operationId": "getEnabledResponsibilities",
                "parameters": [
                    {
                        "format": "TeamCityNodeLocator",
                        "in": "path",
                        "name": "nodeLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/enabledResponsibilities"
                        }
                    }
                },
                "summary": "Get all enabled responsibilities for a node matching the locator.",
                "tags": [
                    "Node"
                ]
            }
        },
        "/app/rest/server/nodes/{nodeLocator}/enabledResponsibilities/{name}": {
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "changeNodeResponsibility",
                "parameters": [
                    {
                        "format": "TeamCityNodeLocator",
                        "in": "path",
                        "name": "nodeLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/enabledResponsibilities"
                        }
                    }
                },
                "summary": "Enables or disables responsibility for a node.",
                "tags": [
                    "Node"
                ]
            }
        },
        "/app/rest/server/plugins": {
            "get": {
                "description": "",
                "operationId": "getAllPlugins",
                "parameters": [
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/plugins"
                        }
                    }
                },
                "summary": "Get all plugins.",
                "tags": [
                    "Server"
                ]
            }
        },
        "/app/rest/testOccurrences": {
            "get": {
                "description": "",
                "operationId": "getAllTestOccurrences",
                "parameters": [
                    {
                        "format": "TestOccurrenceLocator",
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/testOccurrences"
                        }
                    }
                },
                "summary": "Get all test occurrences.",
                "tags": [
                    "TestOccurrence"
                ]
            }
        },
        "/app/rest/testOccurrences/{testLocator}": {
            "get": {
                "description": "",
                "operationId": "getTestOccurrence",
                "parameters": [
                    {
                        "format": "TestOccurrenceLocator",
                        "in": "path",
                        "name": "testLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/testOccurrence"
                        }
                    }
                },
                "summary": "Get a matching test occurrence.",
                "tags": [
                    "TestOccurrence"
                ]
            }
        },
        "/app/rest/tests": {
            "get": {
                "description": "",
                "operationId": "getTests",
                "parameters": [
                    {
                        "format": "TestLocator",
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/tests"
                        }
                    }
                },
                "summary": "Get all tests.",
                "tags": [
                    "Test"
                ]
            }
        },
        "/app/rest/tests/{testLocator}": {
            "get": {
                "description": "",
                "operationId": "getTest",
                "parameters": [
                    {
                        "format": "TestLocator",
                        "in": "path",
                        "name": "testLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/test"
                        }
                    }
                },
                "summary": "Get a matching test.",
                "tags": [
                    "Test"
                ]
            }
        },
        "/app/rest/userGroups": {
            "get": {
                "description": "",
                "operationId": "getAllGroups",
                "parameters": [
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/groups"
                        }
                    }
                },
                "summary": "Get all user groups.",
                "tags": [
                    "Group"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addGroup",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/group"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/group"
                        }
                    }
                },
                "summary": "Add a new user group.",
                "tags": [
                    "Group"
                ]
            }
        },
        "/app/rest/userGroups/{groupLocator}": {
            "delete": {
                "description": "",
                "operationId": "deleteGroup",
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Delete user group matching the locator.",
                "tags": [
                    "Group"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getUserGroupOfGroup",
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/group"
                        }
                    }
                },
                "summary": "Get user group matching the locator.",
                "tags": [
                    "Group"
                ]
            }
        },
        "/app/rest/userGroups/{groupLocator}/parent-groups": {
            "get": {
                "description": "",
                "operationId": "getGroupParentGroups",
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/groups"
                        }
                    }
                },
                "summary": "Get parent groups of the matching user group.",
                "tags": [
                    "Group"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "setGroupParentGroups",
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/groups"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/groups"
                        }
                    }
                },
                "summary": "Update parent groups of the matching user group.",
                "tags": [
                    "Group"
                ]
            }
        },
        "/app/rest/userGroups/{groupLocator}/properties": {
            "get": {
                "description": "",
                "operationId": "getGroupProperties",
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/properties"
                        }
                    }
                },
                "summary": "Get properties of the matching user group.",
                "tags": [
                    "Group"
                ]
            }
        },
        "/app/rest/userGroups/{groupLocator}/properties/{name}": {
            "delete": {
                "description": "",
                "operationId": "removeGroupProperty",
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Remove a property of the matching user group.",
                "tags": [
                    "Group"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getGroupProperty",
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get a property of the matching user group.",
                "tags": [
                    "Group"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "setGroupProperty",
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Update a property of the matching user group.",
                "tags": [
                    "Group"
                ]
            }
        },
        "/app/rest/userGroups/{groupLocator}/roles": {
            "get": {
                "description": "",
                "operationId": "getGroupRoles",
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/roles"
                        }
                    }
                },
                "summary": "Get all roles of the matching user group.",
                "tags": [
                    "Group"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addRoleToGroup",
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/role"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/role"
                        }
                    }
                },
                "summary": "Add a role to the matching user group.",
                "tags": [
                    "Group"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "setGroupRoles",
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/roles"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/roles"
                        }
                    }
                },
                "summary": "Update roles of the matching user group.",
                "tags": [
                    "Group"
                ]
            }
        },
        "/app/rest/userGroups/{groupLocator}/roles/{roleId}/{scope}": {
            "delete": {
                "description": "",
                "operationId": "removeRoleAtScopeFromGroup",
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "roleId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "scope",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Remove a role with the specific scope from the matching user group.",
                "tags": [
                    "Group"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getGroupRoleAtScope",
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "roleId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "scope",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/role"
                        }
                    }
                },
                "summary": "Get a role with the specific scope of the matching user group.",
                "tags": [
                    "Group"
                ]
            },
            "post": {
                "description": "",
                "operationId": "addRoleAtScopeToGroup",
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "roleId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "scope",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/role"
                        }
                    }
                },
                "summary": "Add a role with the specific scope to the matching user group.",
                "tags": [
                    "Group"
                ]
            }
        },
        "/app/rest/users": {
            "get": {
                "description": "",
                "operationId": "getAllUsers",
                "parameters": [
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/users"
                        }
                    }
                },
                "summary": "Get all users.",
                "tags": [
                    "User"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addUser",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/user"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/user"
                        }
                    }
                },
                "summary": "Create a new user.",
                "tags": [
                    "User"
                ]
            }
        },
        "/app/rest/users/{userLocator}": {
            "delete": {
                "description": "",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Delete user matching the locator.",
                "tags": [
                    "User"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getUser",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/user"
                        }
                    }
                },
                "summary": "Get user matching the locator.",
                "tags": [
                    "User"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "replaceUser",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/user"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/user"
                        }
                    }
                },
                "summary": "Update user matching the locator.",
                "tags": [
                    "User"
                ]
            }
        },
        "/app/rest/users/{userLocator}/{field}": {
            "delete": {
                "description": "",
                "operationId": "deleteUserField",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "field",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Remove a property of the matching user.",
                "tags": [
                    "User"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getUserField",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "field",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get a field of the matching user.",
                "tags": [
                    "User"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "setUserField",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "field",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Update a field of the matching user.",
                "tags": [
                    "User"
                ]
            }
        },
        "/app/rest/users/{userLocator}/debug/rememberMe": {
            "delete": {
                "description": "",
                "operationId": "removeUserRememberMe",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        }
                    }
                },
                "summary": "Remove the RememberMe data of the matching user.",
                "tags": [
                    "User"
                ]
            }
        },
        "/app/rest/users/{userLocator}/groups": {
            "get": {
                "description": "",
                "operationId": "getAllUserGroups",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/groups"
                        }
                    }
                },
                "summary": "Get all groups of the matching user.",
                "tags": [
                    "User"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "setUserGroups",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/groups"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/groups"
                        }
                    }
                },
                "summary": "Update groups of the matching user.",
                "tags": [
                    "User"
                ]
            }
        },
        "/app/rest/users/{userLocator}/groups/{groupLocator}": {
            "delete": {
                "description": "",
                "operationId": "removeUserFromGroup",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "groupLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Remove the matching user from the specific group.",
                "tags": [
                    "User"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getUserGroup",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "groupLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/group"
                        }
                    }
                },
                "summary": "Get a user group of the matching user.",
                "tags": [
                    "User"
                ]
            }
        },
        "/app/rest/users/{userLocator}/permissions": {
            "get": {
                "description": "",
                "operationId": "getUserPermissions",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/permissionAssignments"
                        }
                    }
                },
                "summary": "Get all permissions effective for the matching user.",
                "tags": [
                    "User"
                ]
            }
        },
        "/app/rest/users/{userLocator}/properties": {
            "get": {
                "description": "",
                "operationId": "getUserProperties",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/properties"
                        }
                    }
                },
                "summary": "Get all properties of the matching user.",
                "tags": [
                    "User"
                ]
            }
        },
        "/app/rest/users/{userLocator}/properties/{name}": {
            "delete": {
                "description": "",
                "operationId": "removeUserProperty",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Remove a property of the matching user.",
                "tags": [
                    "User"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getUserProperty",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get a property of the matching user.",
                "tags": [
                    "User"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "setUserProperty",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Update a property of the matching user.",
                "tags": [
                    "User"
                ]
            }
        },
        "/app/rest/users/{userLocator}/roles": {
            "get": {
                "description": "",
                "operationId": "getAllUserRoles",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/roles"
                        }
                    }
                },
                "summary": "Get all user roles of the matching user.",
                "tags": [
                    "User"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addRoleToUser",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/role"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/role"
                        }
                    }
                },
                "summary": "Add a role to the matching user.",
                "tags": [
                    "User"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "setUserRoles",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/roles"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/roles"
                        }
                    }
                },
                "summary": "Update user roles of the matching user.",
                "tags": [
                    "User"
                ]
            }
        },
        "/app/rest/users/{userLocator}/roles/{roleId}/{scope}": {
            "delete": {
                "description": "",
                "operationId": "removeUserRoleAtScope",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "roleId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "scope",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Remove a role with the specific scope from the matching user.",
                "tags": [
                    "User"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getUserRolesAtScope",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "roleId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "scope",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/role"
                        }
                    }
                },
                "summary": "Get a user role with the specific scope from the matching user.",
                "tags": [
                    "User"
                ]
            },
            "put": {
                "description": "",
                "operationId": "addRoleToUserAtScope",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "roleId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "scope",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/role"
                        }
                    }
                },
                "summary": "Add a role with the specific scope to the matching user.",
                "tags": [
                    "User"
                ]
            }
        },
        "/app/rest/users/{userLocator}/tokens": {
            "get": {
                "description": "",
                "operationId": "getUserTokens",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/tokens"
                        }
                    }
                },
                "summary": "Get all authentication tokens of the matching user.",
                "tags": [
                    "User"
                ]
            },
            "post": {
                "description": "",
                "operationId": "addUserToken",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/token"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/token"
                        }
                    }
                },
                "summary": "Create a new authentication token for the matching user.",
                "tags": [
                    "User"
                ]
            }
        },
        "/app/rest/users/{userLocator}/tokens/{name}": {
            "delete": {
                "description": "",
                "operationId": "deleteUserToken",
                "parameters": [
                    {
                        "format": "UserLocator",
                        "in": "path",
                        "name": "userLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Remove an authentication token from the matching user.",
                "tags": [
                    "User"
                ]
            }
        },
        "/app/rest/vcs-root-instances": {
            "get": {
                "description": "",
                "operationId": "getAllVcsRootInstances",
                "parameters": [
                    {
                        "format": "VcsRootInstanceLocator",
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/vcs-root-instances"
                        }
                    }
                },
                "summary": "Get all VCS root instances.",
                "tags": [
                    "VcsRootInstance"
                ]
            }
        },
        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}": {
            "get": {
                "description": "",
                "operationId": "getVcsRootInstance",
                "parameters": [
                    {
                        "format": "VcsRootInstanceLocator",
                        "in": "path",
                        "name": "vcsRootInstanceLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/vcs-root-instance"
                        }
                    }
                },
                "summary": "Get VCS root instance matching the locator.",
                "tags": [
                    "VcsRootInstance"
                ]
            }
        },
        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}": {
            "delete": {
                "description": "",
                "operationId": "deleteVcsRootInstanceField",
                "parameters": [
                    {
                        "format": "VcsRootInstanceLocator",
                        "in": "path",
                        "name": "vcsRootInstanceLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "field",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Remove a field of the matching VCS root instance.",
                "tags": [
                    "VcsRootInstance"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getVcsRootInstanceField",
                "parameters": [
                    {
                        "format": "VcsRootInstanceLocator",
                        "in": "path",
                        "name": "vcsRootInstanceLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "field",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get a field of the matching VCS root instance.",
                "tags": [
                    "VcsRootInstance"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "setVcsRootInstanceField",
                "parameters": [
                    {
                        "format": "VcsRootInstanceLocator",
                        "in": "path",
                        "name": "vcsRootInstanceLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "field",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get a field of the matching VCS root instance.",
                "tags": [
                    "VcsRootInstance"
                ]
            }
        },
        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest": {
            "get": {
                "description": "",
                "operationId": "getFilesList",
                "parameters": [
                    {
                        "in": "query",
                        "name": "basePath",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "VcsRootInstanceLocator",
                        "in": "path",
                        "name": "vcsRootInstanceLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/files"
                        }
                    }
                },
                "summary": "List all files.",
                "tags": [
                    "VcsRootInstance"
                ]
            }
        },
        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/{path}": {
            "get": {
                "description": "",
                "operationId": "getFilesListForSubpath",
                "parameters": [
                    {
                        "in": "path",
                        "name": "path",
                        "pattern": "(.*)?",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "basePath",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "VcsRootInstanceLocator",
                        "in": "path",
                        "name": "vcsRootInstanceLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/files"
                        }
                    }
                },
                "summary": "List files under this path.",
                "tags": [
                    "VcsRootInstance"
                ]
            }
        },
        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/archived{path}": {
            "get": {
                "description": "",
                "operationId": "getZippedFile",
                "parameters": [
                    {
                        "in": "path",
                        "name": "path",
                        "pattern": "(/.*)?",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "basePath",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "VcsRootInstanceLocator",
                        "in": "path",
                        "name": "vcsRootInstanceLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "examples": {
                            "*/*": ""
                        }
                    }
                },
                "summary": "Get specific file zipped.",
                "tags": [
                    "VcsRootInstance"
                ]
            }
        },
        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/files{path}": {
            "get": {
                "description": "",
                "operationId": "downloadFile",
                "parameters": [
                    {
                        "in": "path",
                        "name": "path",
                        "pattern": "(/.*)?",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "format": "VcsRootInstanceLocator",
                        "in": "path",
                        "name": "vcsRootInstanceLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "examples": {
                            "*/*": ""
                        }
                    }
                },
                "summary": "Download specific file.",
                "tags": [
                    "VcsRootInstance"
                ]
            }
        },
        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/metadata{path}": {
            "get": {
                "description": "",
                "operationId": "getFileMetadata",
                "parameters": [
                    {
                        "in": "path",
                        "name": "path",
                        "pattern": "(/.*)?",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "format": "VcsRootInstanceLocator",
                        "in": "path",
                        "name": "vcsRootInstanceLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/file"
                        }
                    }
                },
                "summary": "Get metadata of specific file.",
                "tags": [
                    "VcsRootInstance"
                ]
            }
        },
        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/properties": {
            "get": {
                "description": "",
                "operationId": "getVcsRootInstanceProperties",
                "parameters": [
                    {
                        "format": "VcsRootInstanceLocator",
                        "in": "path",
                        "name": "vcsRootInstanceLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/properties"
                        }
                    }
                },
                "summary": "Get all properties of the matching VCS root instance.",
                "tags": [
                    "VcsRootInstance"
                ]
            }
        },
        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState": {
            "delete": {
                "description": "",
                "operationId": "deleteVcsRootInstanceRepositoryState",
                "parameters": [
                    {
                        "format": "VcsRootInstanceLocator",
                        "in": "path",
                        "name": "vcsRootInstanceLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Delete the last repository state of the matching VCS root instance.",
                "tags": [
                    "VcsRootInstance"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getVcsRootInstanceRepositoryState",
                "parameters": [
                    {
                        "format": "VcsRootInstanceLocator",
                        "in": "path",
                        "name": "vcsRootInstanceLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/entries"
                        }
                    }
                },
                "summary": "Get the repository state of the matching VCS root instance.",
                "tags": [
                    "VcsRootInstance"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "setVcsRootInstanceRepositoryState",
                "parameters": [
                    {
                        "format": "VcsRootInstanceLocator",
                        "in": "path",
                        "name": "vcsRootInstanceLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/entries"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/entries"
                        }
                    }
                },
                "summary": "Update the repository state of the matching VCS root instance.",
                "tags": [
                    "VcsRootInstance"
                ]
            }
        },
        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState/creationDate": {
            "get": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "getVcsRootInstanceCreationDate",
                "parameters": [
                    {
                        "format": "VcsRootInstanceLocator",
                        "in": "path",
                        "name": "vcsRootInstanceLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get the creation date of the matching VCS root instance.",
                "tags": [
                    "VcsRootInstance"
                ]
            }
        },
        "/app/rest/vcs-root-instances/checkingForChangesQueue": {
            "post": {
                "description": "",
                "operationId": "requestPendingChangesCheck",
                "parameters": [
                    {
                        "format": "VcsRootInstanceLocator",
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "requestor",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/vcs-root-instances"
                        }
                    }
                },
                "summary": "Check for the pending changes for all VCS root instances.",
                "tags": [
                    "VcsRootInstance"
                ]
            }
        },
        "/app/rest/vcs-root-instances/commitHookNotification": {
            "post": {
                "description": "",
                "operationId": "triggerCommitHookNotification",
                "parameters": [
                    {
                        "format": "VcsRootInstanceLocator",
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "okOnNothingFound",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        }
                    }
                },
                "summary": "Send the commit hook notification.",
                "tags": [
                    "VcsRootInstance"
                ]
            }
        },
        "/app/rest/vcs-roots": {
            "get": {
                "description": "",
                "operationId": "getAllVcsRoots",
                "parameters": [
                    {
                        "format": "VcsRootLocator",
                        "in": "query",
                        "name": "locator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/vcs-roots"
                        }
                    }
                },
                "summary": "Get all VCS roots.",
                "tags": [
                    "VcsRoot"
                ]
            },
            "post": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "addVcsRoot",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/vcs-root"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/vcs-root"
                        }
                    }
                },
                "summary": "Add a new VCS root.",
                "tags": [
                    "VcsRoot"
                ]
            }
        },
        "/app/rest/vcs-roots/{vcsRootLocator}": {
            "delete": {
                "description": "",
                "operationId": "deleteVcsRoot",
                "parameters": [
                    {
                        "format": "VcsRootLocator",
                        "in": "path",
                        "name": "vcsRootLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Remove VCS root matching the locator.",
                "tags": [
                    "VcsRoot"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getRootEndpoints",
                "parameters": [
                    {
                        "format": "VcsRootLocator",
                        "in": "path",
                        "name": "vcsRootLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/vcs-root"
                        }
                    }
                },
                "summary": "Get root endpoints.",
                "tags": [
                    "VcsRoot"
                ]
            }
        },
        "/app/rest/vcs-roots/{vcsRootLocator}/{field}": {
            "get": {
                "description": "",
                "operationId": "getVcsRootField",
                "parameters": [
                    {
                        "format": "VcsRootLocator",
                        "in": "path",
                        "name": "vcsRootLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "field",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get a field of the matching VCS root.",
                "tags": [
                    "VcsRoot"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "setVcsRootField",
                "parameters": [
                    {
                        "format": "VcsRootLocator",
                        "in": "path",
                        "name": "vcsRootLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "field",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Update a field of the matching VCS root.",
                "tags": [
                    "VcsRoot"
                ]
            }
        },
        "/app/rest/vcs-roots/{vcsRootLocator}/instances": {
            "get": {
                "description": "",
                "operationId": "getVcsRootInstances",
                "parameters": [
                    {
                        "format": "VcsRootLocator",
                        "in": "path",
                        "name": "vcsRootLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/vcs-root-instances"
                        }
                    }
                },
                "summary": "Get all VCS root instances of the matching VCS root.",
                "tags": [
                    "VcsRoot"
                ]
            }
        },
        "/app/rest/vcs-roots/{vcsRootLocator}/properties": {
            "delete": {
                "description": "",
                "operationId": "deleteAllVcsRootProperties",
                "parameters": [
                    {
                        "format": "VcsRootLocator",
                        "in": "path",
                        "name": "vcsRootLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Delete all properties of the matching VCS root.",
                "tags": [
                    "VcsRoot"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getAllVcsRootProperties",
                "parameters": [
                    {
                        "format": "VcsRootLocator",
                        "in": "path",
                        "name": "vcsRootLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/properties"
                        }
                    }
                },
                "summary": "Get all properties of the matching VCS root.",
                "tags": [
                    "VcsRoot"
                ]
            },
            "put": {
                "consumes": [
                    "application/xml",
                    "application/json"
                ],
                "description": "",
                "operationId": "setVcsRootProperties",
                "parameters": [
                    {
                        "format": "VcsRootLocator",
                        "in": "path",
                        "name": "vcsRootLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/properties"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "application/json": "",
                            "application/xml": ""
                        },
                        "schema": {
                            "$ref": "#/definitions/properties"
                        }
                    }
                },
                "summary": "Update all properties of the matching VCS root.",
                "tags": [
                    "VcsRoot"
                ]
            }
        },
        "/app/rest/vcs-roots/{vcsRootLocator}/properties/{name}": {
            "delete": {
                "description": "",
                "operationId": "deleteVcsRootProperty",
                "parameters": [
                    {
                        "format": "VcsRootLocator",
                        "in": "path",
                        "name": "vcsRootLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "summary": "Delete a property of the matching VCS root.",
                "tags": [
                    "VcsRoot"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getVcsRootProperty",
                "parameters": [
                    {
                        "format": "VcsRootLocator",
                        "in": "path",
                        "name": "vcsRootLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get a property on the matching VCS root.",
                "tags": [
                    "VcsRoot"
                ]
            },
            "put": {
                "consumes": [
                    "text/plain"
                ],
                "description": "",
                "operationId": "setVcsRootProperty",
                "parameters": [
                    {
                        "format": "VcsRootLocator",
                        "in": "path",
                        "name": "vcsRootLocator",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Update a property of the matching VCS root.",
                "tags": [
                    "VcsRoot"
                ]
            }
        },
        "/app/rest/vcs-roots/{vcsRootLocator}/settingsFile": {
            "get": {
                "description": "",
                "operationId": "getVcsRootSettingsFile",
                "parameters": [
                    {
                        "format": "VcsRootLocator",
                        "in": "path",
                        "name": "vcsRootLocator",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get the settings file of the matching VCS root.",
                "tags": [
                    "VcsRoot"
                ]
            }
        },
        "/app/rest/version": {
            "get": {
                "description": "",
                "operationId": "getVersion",
                "parameters": [
                ],
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "examples": {
                            "text/plain": ""
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Get the TeamCity server version.",
                "tags": [
                    "Root"
                ]
            }
        }
    },
    "swagger": "2.0",
    "tags": [
        {
            "name": "Agent"
        },
        {
            "name": "AgentPool"
        },
        {
            "name": "Audit"
        },
        {
            "name": "Avatar"
        },
        {
            "name": "Build"
        },
        {
            "name": "BuildQueue"
        },
        {
            "name": "BuildType"
        },
        {
            "name": "Change"
        },
        {
            "name": "CloudInstance"
        },
        {
            "name": "Group"
        },
        {
            "name": "Investigation"
        },
        {
            "name": "Mute"
        },
        {
            "name": "Node"
        },
        {
            "name": "Problem"
        },
        {
            "name": "ProblemOccurrence"
        },
        {
            "name": "Project"
        },
        {
            "name": "Root"
        },
        {
            "name": "Server"
        },
        {
            "name": "Test"
        },
        {
            "name": "TestOccurrence"
        },
        {
            "name": "User"
        },
        {
            "name": "VcsRoot"
        },
        {
            "name": "VcsRootInstance"
        },
        {
            "name": "health"
        }
    ]
}