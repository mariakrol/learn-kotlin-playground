/*
 * TeamCity REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.makrol.teamcity.api.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.makrol.teamcity.api.swagger.client.model.Build;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Represents a progress estimate of this build.
 */
@ApiModel(description = "Represents a progress estimate of this build.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-01-14T01:07:21.722+03:00")
public class ProgressInfo {
  @SerializedName("percentageComplete")
  private Integer percentageComplete = null;

  @SerializedName("elapsedSeconds")
  private Long elapsedSeconds = null;

  @SerializedName("estimatedTotalSeconds")
  private Long estimatedTotalSeconds = null;

  @SerializedName("leftSeconds")
  private Long leftSeconds = null;

  @SerializedName("currentStageText")
  private String currentStageText = null;

  @SerializedName("outdated")
  private Boolean outdated = null;

  @SerializedName("probablyHanging")
  private Boolean probablyHanging = null;

  @SerializedName("lastActivityTime")
  private String lastActivityTime = null;

  @SerializedName("outdatedReasonBuild")
  private Build outdatedReasonBuild = null;

  public ProgressInfo percentageComplete(Integer percentageComplete) {
    this.percentageComplete = percentageComplete;
    return this;
  }

   /**
   * Get percentageComplete
   * @return percentageComplete
  **/
  @ApiModelProperty(value = "")
  public Integer getPercentageComplete() {
    return percentageComplete;
  }

  public void setPercentageComplete(Integer percentageComplete) {
    this.percentageComplete = percentageComplete;
  }

  public ProgressInfo elapsedSeconds(Long elapsedSeconds) {
    this.elapsedSeconds = elapsedSeconds;
    return this;
  }

   /**
   * Get elapsedSeconds
   * @return elapsedSeconds
  **/
  @ApiModelProperty(value = "")
  public Long getElapsedSeconds() {
    return elapsedSeconds;
  }

  public void setElapsedSeconds(Long elapsedSeconds) {
    this.elapsedSeconds = elapsedSeconds;
  }

  public ProgressInfo estimatedTotalSeconds(Long estimatedTotalSeconds) {
    this.estimatedTotalSeconds = estimatedTotalSeconds;
    return this;
  }

   /**
   * Get estimatedTotalSeconds
   * @return estimatedTotalSeconds
  **/
  @ApiModelProperty(value = "")
  public Long getEstimatedTotalSeconds() {
    return estimatedTotalSeconds;
  }

  public void setEstimatedTotalSeconds(Long estimatedTotalSeconds) {
    this.estimatedTotalSeconds = estimatedTotalSeconds;
  }

  public ProgressInfo leftSeconds(Long leftSeconds) {
    this.leftSeconds = leftSeconds;
    return this;
  }

   /**
   * Get leftSeconds
   * @return leftSeconds
  **/
  @ApiModelProperty(value = "")
  public Long getLeftSeconds() {
    return leftSeconds;
  }

  public void setLeftSeconds(Long leftSeconds) {
    this.leftSeconds = leftSeconds;
  }

  public ProgressInfo currentStageText(String currentStageText) {
    this.currentStageText = currentStageText;
    return this;
  }

   /**
   * Get currentStageText
   * @return currentStageText
  **/
  @ApiModelProperty(value = "")
  public String getCurrentStageText() {
    return currentStageText;
  }

  public void setCurrentStageText(String currentStageText) {
    this.currentStageText = currentStageText;
  }

  public ProgressInfo outdated(Boolean outdated) {
    this.outdated = outdated;
    return this;
  }

   /**
   * Get outdated
   * @return outdated
  **/
  @ApiModelProperty(value = "")
  public Boolean isOutdated() {
    return outdated;
  }

  public void setOutdated(Boolean outdated) {
    this.outdated = outdated;
  }

  public ProgressInfo probablyHanging(Boolean probablyHanging) {
    this.probablyHanging = probablyHanging;
    return this;
  }

   /**
   * Get probablyHanging
   * @return probablyHanging
  **/
  @ApiModelProperty(value = "")
  public Boolean isProbablyHanging() {
    return probablyHanging;
  }

  public void setProbablyHanging(Boolean probablyHanging) {
    this.probablyHanging = probablyHanging;
  }

  public ProgressInfo lastActivityTime(String lastActivityTime) {
    this.lastActivityTime = lastActivityTime;
    return this;
  }

   /**
   * Get lastActivityTime
   * @return lastActivityTime
  **/
  @ApiModelProperty(value = "")
  public String getLastActivityTime() {
    return lastActivityTime;
  }

  public void setLastActivityTime(String lastActivityTime) {
    this.lastActivityTime = lastActivityTime;
  }

  public ProgressInfo outdatedReasonBuild(Build outdatedReasonBuild) {
    this.outdatedReasonBuild = outdatedReasonBuild;
    return this;
  }

   /**
   * Get outdatedReasonBuild
   * @return outdatedReasonBuild
  **/
  @ApiModelProperty(value = "")
  public Build getOutdatedReasonBuild() {
    return outdatedReasonBuild;
  }

  public void setOutdatedReasonBuild(Build outdatedReasonBuild) {
    this.outdatedReasonBuild = outdatedReasonBuild;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProgressInfo progressInfo = (ProgressInfo) o;
    return Objects.equals(this.percentageComplete, progressInfo.percentageComplete) &&
        Objects.equals(this.elapsedSeconds, progressInfo.elapsedSeconds) &&
        Objects.equals(this.estimatedTotalSeconds, progressInfo.estimatedTotalSeconds) &&
        Objects.equals(this.leftSeconds, progressInfo.leftSeconds) &&
        Objects.equals(this.currentStageText, progressInfo.currentStageText) &&
        Objects.equals(this.outdated, progressInfo.outdated) &&
        Objects.equals(this.probablyHanging, progressInfo.probablyHanging) &&
        Objects.equals(this.lastActivityTime, progressInfo.lastActivityTime) &&
        Objects.equals(this.outdatedReasonBuild, progressInfo.outdatedReasonBuild);
  }

  @Override
  public int hashCode() {
    return Objects.hash(percentageComplete, elapsedSeconds, estimatedTotalSeconds, leftSeconds, currentStageText, outdated, probablyHanging, lastActivityTime, outdatedReasonBuild);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProgressInfo {\n");
    
    sb.append("    percentageComplete: ").append(toIndentedString(percentageComplete)).append("\n");
    sb.append("    elapsedSeconds: ").append(toIndentedString(elapsedSeconds)).append("\n");
    sb.append("    estimatedTotalSeconds: ").append(toIndentedString(estimatedTotalSeconds)).append("\n");
    sb.append("    leftSeconds: ").append(toIndentedString(leftSeconds)).append("\n");
    sb.append("    currentStageText: ").append(toIndentedString(currentStageText)).append("\n");
    sb.append("    outdated: ").append(toIndentedString(outdated)).append("\n");
    sb.append("    probablyHanging: ").append(toIndentedString(probablyHanging)).append("\n");
    sb.append("    lastActivityTime: ").append(toIndentedString(lastActivityTime)).append("\n");
    sb.append("    outdatedReasonBuild: ").append(toIndentedString(outdatedReasonBuild)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

