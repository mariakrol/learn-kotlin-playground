/*
 * TeamCity REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.makrol.teamcity.api.swagger.client.api;

import com.makrol.teamcity.api.swagger.client.ApiCallback;
import com.makrol.teamcity.api.swagger.client.ApiClient;
import com.makrol.teamcity.api.swagger.client.ApiException;
import com.makrol.teamcity.api.swagger.client.ApiResponse;
import com.makrol.teamcity.api.swagger.client.Configuration;
import com.makrol.teamcity.api.swagger.client.Pair;
import com.makrol.teamcity.api.swagger.client.ProgressRequestBody;
import com.makrol.teamcity.api.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.makrol.teamcity.api.swagger.client.model.AgentPool;
import com.makrol.teamcity.api.swagger.client.model.AgentPools;
import com.makrol.teamcity.api.swagger.client.model.Branches;
import com.makrol.teamcity.api.swagger.client.model.BuildType;
import com.makrol.teamcity.api.swagger.client.model.BuildTypes;
import com.makrol.teamcity.api.swagger.client.model.NewBuildTypeDescription;
import com.makrol.teamcity.api.swagger.client.model.NewProjectDescription;
import com.makrol.teamcity.api.swagger.client.model.Project;
import com.makrol.teamcity.api.swagger.client.model.ProjectFeature;
import com.makrol.teamcity.api.swagger.client.model.ProjectFeatures;
import com.makrol.teamcity.api.swagger.client.model.Projects;
import com.makrol.teamcity.api.swagger.client.model.Properties;
import com.makrol.teamcity.api.swagger.client.model.Property;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectApi {
    private ApiClient apiClient;

    public ProjectApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addAgentPoolsProject
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addAgentPoolsProjectCall(String projectLocator, AgentPool body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/agentPools"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addAgentPoolsProjectValidateBeforeCall(String projectLocator, AgentPool body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling addAgentPoolsProject(Async)");
        }
        

        com.squareup.okhttp.Call call = addAgentPoolsProjectCall(projectLocator, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Assign the matching project to the agent pool.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @return AgentPool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AgentPool addAgentPoolsProject(String projectLocator, AgentPool body) throws ApiException {
        ApiResponse<AgentPool> resp = addAgentPoolsProjectWithHttpInfo(projectLocator, body);
        return resp.getData();
    }

    /**
     * Assign the matching project to the agent pool.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;AgentPool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AgentPool> addAgentPoolsProjectWithHttpInfo(String projectLocator, AgentPool body) throws ApiException {
        com.squareup.okhttp.Call call = addAgentPoolsProjectValidateBeforeCall(projectLocator, body, null, null);
        Type localVarReturnType = new TypeToken<AgentPool>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Assign the matching project to the agent pool. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addAgentPoolsProjectAsync(String projectLocator, AgentPool body, final ApiCallback<AgentPool> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addAgentPoolsProjectValidateBeforeCall(projectLocator, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AgentPool>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addBuildType
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBuildTypeCall(String projectLocator, NewBuildTypeDescription body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/buildTypes"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBuildTypeValidateBeforeCall(String projectLocator, NewBuildTypeDescription body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling addBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = addBuildTypeCall(projectLocator, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add a build configuration to the matching project.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return BuildType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuildType addBuildType(String projectLocator, NewBuildTypeDescription body, String fields) throws ApiException {
        ApiResponse<BuildType> resp = addBuildTypeWithHttpInfo(projectLocator, body, fields);
        return resp.getData();
    }

    /**
     * Add a build configuration to the matching project.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;BuildType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuildType> addBuildTypeWithHttpInfo(String projectLocator, NewBuildTypeDescription body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = addBuildTypeValidateBeforeCall(projectLocator, body, fields, null, null);
        Type localVarReturnType = new TypeToken<BuildType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a build configuration to the matching project. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBuildTypeAsync(String projectLocator, NewBuildTypeDescription body, String fields, final ApiCallback<BuildType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBuildTypeValidateBeforeCall(projectLocator, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuildType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addFeature
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFeatureCall(String projectLocator, ProjectFeature body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/projectFeatures"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFeatureValidateBeforeCall(String projectLocator, ProjectFeature body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling addFeature(Async)");
        }
        

        com.squareup.okhttp.Call call = addFeatureCall(projectLocator, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add a feature.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object addFeature(String projectLocator, ProjectFeature body, String fields) throws ApiException {
        ApiResponse<Object> resp = addFeatureWithHttpInfo(projectLocator, body, fields);
        return resp.getData();
    }

    /**
     * Add a feature.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> addFeatureWithHttpInfo(String projectLocator, ProjectFeature body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = addFeatureValidateBeforeCall(projectLocator, body, fields, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a feature. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFeatureAsync(String projectLocator, ProjectFeature body, String fields, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFeatureValidateBeforeCall(projectLocator, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addProject
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addProjectCall(NewProjectDescription body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addProjectValidateBeforeCall(NewProjectDescription body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = addProjectCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new project.
     * 
     * @param body  (optional)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Project addProject(NewProjectDescription body) throws ApiException {
        ApiResponse<Project> resp = addProjectWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a new project.
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Project> addProjectWithHttpInfo(NewProjectDescription body) throws ApiException {
        com.squareup.okhttp.Call call = addProjectValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new project. (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addProjectAsync(NewProjectDescription body, final ApiCallback<Project> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addProjectValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addSecureToken
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addSecureTokenCall(String projectLocator, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/secure/tokens"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addSecureTokenValidateBeforeCall(String projectLocator, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling addSecureToken(Async)");
        }
        

        com.squareup.okhttp.Call call = addSecureTokenCall(projectLocator, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new secure token for the matching project.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String addSecureToken(String projectLocator, String body) throws ApiException {
        ApiResponse<String> resp = addSecureTokenWithHttpInfo(projectLocator, body);
        return resp.getData();
    }

    /**
     * Create a new secure token for the matching project.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> addSecureTokenWithHttpInfo(String projectLocator, String body) throws ApiException {
        com.squareup.okhttp.Call call = addSecureTokenValidateBeforeCall(projectLocator, body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new secure token for the matching project. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addSecureTokenAsync(String projectLocator, String body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addSecureTokenValidateBeforeCall(projectLocator, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addTemplate
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addTemplateCall(String projectLocator, NewBuildTypeDescription body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/templates"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addTemplateValidateBeforeCall(String projectLocator, NewBuildTypeDescription body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling addTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = addTemplateCall(projectLocator, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add a build configuration template to the matching project.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return BuildType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuildType addTemplate(String projectLocator, NewBuildTypeDescription body, String fields) throws ApiException {
        ApiResponse<BuildType> resp = addTemplateWithHttpInfo(projectLocator, body, fields);
        return resp.getData();
    }

    /**
     * Add a build configuration template to the matching project.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;BuildType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuildType> addTemplateWithHttpInfo(String projectLocator, NewBuildTypeDescription body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = addTemplateValidateBeforeCall(projectLocator, body, fields, null, null);
        Type localVarReturnType = new TypeToken<BuildType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a build configuration template to the matching project. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTemplateAsync(String projectLocator, NewBuildTypeDescription body, String fields, final ApiCallback<BuildType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTemplateValidateBeforeCall(projectLocator, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuildType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createBuildParameter
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBuildParameterCall(String projectLocator, Property body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/parameters"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBuildParameterValidateBeforeCall(String projectLocator, Property body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling createBuildParameter(Async)");
        }
        

        com.squareup.okhttp.Call call = createBuildParameterCall(projectLocator, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a build parameter.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return Property
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Property createBuildParameter(String projectLocator, Property body, String fields) throws ApiException {
        ApiResponse<Property> resp = createBuildParameterWithHttpInfo(projectLocator, body, fields);
        return resp.getData();
    }

    /**
     * Create a build parameter.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Property&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Property> createBuildParameterWithHttpInfo(String projectLocator, Property body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = createBuildParameterValidateBeforeCall(projectLocator, body, fields, null, null);
        Type localVarReturnType = new TypeToken<Property>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a build parameter. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBuildParameterAsync(String projectLocator, Property body, String fields, final ApiCallback<Property> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBuildParameterValidateBeforeCall(projectLocator, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Property>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBuildParameter
     * @param name  (required)
     * @param projectLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBuildParameterCall(String name, String projectLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBuildParameterValidateBeforeCall(String name, String projectLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteBuildParameter(Async)");
        }
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling deleteBuildParameter(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBuildParameterCall(name, projectLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete build parameter.
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBuildParameter(String name, String projectLocator) throws ApiException {
        deleteBuildParameterWithHttpInfo(name, projectLocator);
    }

    /**
     * Delete build parameter.
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBuildParameterWithHttpInfo(String name, String projectLocator) throws ApiException {
        com.squareup.okhttp.Call call = deleteBuildParameterValidateBeforeCall(name, projectLocator, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete build parameter. (asynchronously)
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBuildParameterAsync(String name, String projectLocator, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBuildParameterValidateBeforeCall(name, projectLocator, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteBuildParameters
     * @param projectLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBuildParametersCall(String projectLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/parameters"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBuildParametersValidateBeforeCall(String projectLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling deleteBuildParameters(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBuildParametersCall(projectLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete all build parameters.
     * 
     * @param projectLocator  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBuildParameters(String projectLocator) throws ApiException {
        deleteBuildParametersWithHttpInfo(projectLocator);
    }

    /**
     * Delete all build parameters.
     * 
     * @param projectLocator  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBuildParametersWithHttpInfo(String projectLocator) throws ApiException {
        com.squareup.okhttp.Call call = deleteBuildParametersValidateBeforeCall(projectLocator, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete all build parameters. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBuildParametersAsync(String projectLocator, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBuildParametersValidateBeforeCall(projectLocator, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFeature
     * @param featureLocator  (required)
     * @param projectLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFeatureCall(String featureLocator, String projectLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}"
            .replaceAll("\\{" + "featureLocator" + "\\}", apiClient.escapeString(featureLocator.toString()))
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFeatureValidateBeforeCall(String featureLocator, String projectLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'featureLocator' is set
        if (featureLocator == null) {
            throw new ApiException("Missing the required parameter 'featureLocator' when calling deleteFeature(Async)");
        }
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling deleteFeature(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFeatureCall(featureLocator, projectLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a matching feature.
     * 
     * @param featureLocator  (required)
     * @param projectLocator  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFeature(String featureLocator, String projectLocator) throws ApiException {
        deleteFeatureWithHttpInfo(featureLocator, projectLocator);
    }

    /**
     * Delete a matching feature.
     * 
     * @param featureLocator  (required)
     * @param projectLocator  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFeatureWithHttpInfo(String featureLocator, String projectLocator) throws ApiException {
        com.squareup.okhttp.Call call = deleteFeatureValidateBeforeCall(featureLocator, projectLocator, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a matching feature. (asynchronously)
     * 
     * @param featureLocator  (required)
     * @param projectLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFeatureAsync(String featureLocator, String projectLocator, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFeatureValidateBeforeCall(featureLocator, projectLocator, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteProject
     * @param projectLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteProjectCall(String projectLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteProjectValidateBeforeCall(String projectLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling deleteProject(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteProjectCall(projectLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete project matching the locator.
     * 
     * @param projectLocator  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteProject(String projectLocator) throws ApiException {
        deleteProjectWithHttpInfo(projectLocator);
    }

    /**
     * Delete project matching the locator.
     * 
     * @param projectLocator  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteProjectWithHttpInfo(String projectLocator) throws ApiException {
        com.squareup.okhttp.Call call = deleteProjectValidateBeforeCall(projectLocator, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete project matching the locator. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProjectAsync(String projectLocator, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProjectValidateBeforeCall(projectLocator, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAgentPoolsProject
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAgentPoolsProjectCall(String projectLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/agentPools"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAgentPoolsProjectValidateBeforeCall(String projectLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling getAgentPoolsProject(Async)");
        }
        

        com.squareup.okhttp.Call call = getAgentPoolsProjectCall(projectLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get agent pools appointed to the matching project.
     * 
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @return AgentPools
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AgentPools getAgentPoolsProject(String projectLocator, String fields) throws ApiException {
        ApiResponse<AgentPools> resp = getAgentPoolsProjectWithHttpInfo(projectLocator, fields);
        return resp.getData();
    }

    /**
     * Get agent pools appointed to the matching project.
     * 
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;AgentPools&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AgentPools> getAgentPoolsProjectWithHttpInfo(String projectLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAgentPoolsProjectValidateBeforeCall(projectLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<AgentPools>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get agent pools appointed to the matching project. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAgentPoolsProjectAsync(String projectLocator, String fields, final ApiCallback<AgentPools> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAgentPoolsProjectValidateBeforeCall(projectLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AgentPools>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllBranches
     * @param projectLocator  (required)
     * @param locator  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllBranchesCall(String projectLocator, String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/branches"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locator", locator));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllBranchesValidateBeforeCall(String projectLocator, String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling getAllBranches(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllBranchesCall(projectLocator, locator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all branches of the matching project.
     * 
     * @param projectLocator  (required)
     * @param locator  (optional)
     * @param fields  (optional)
     * @return Branches
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Branches getAllBranches(String projectLocator, String locator, String fields) throws ApiException {
        ApiResponse<Branches> resp = getAllBranchesWithHttpInfo(projectLocator, locator, fields);
        return resp.getData();
    }

    /**
     * Get all branches of the matching project.
     * 
     * @param projectLocator  (required)
     * @param locator  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Branches&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Branches> getAllBranchesWithHttpInfo(String projectLocator, String locator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllBranchesValidateBeforeCall(projectLocator, locator, fields, null, null);
        Type localVarReturnType = new TypeToken<Branches>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all branches of the matching project. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param locator  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllBranchesAsync(String projectLocator, String locator, String fields, final ApiCallback<Branches> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllBranchesValidateBeforeCall(projectLocator, locator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Branches>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllBuildTypesOrdered
     * @param projectLocator  (required)
     * @param field  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllBuildTypesOrderedCall(String projectLocator, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/order/buildTypes"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (field != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("field", field));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllBuildTypesOrderedValidateBeforeCall(String projectLocator, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling getAllBuildTypesOrdered(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllBuildTypesOrderedCall(projectLocator, field, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all build configurations from the matching project, with custom ordering applied.
     * 
     * @param projectLocator  (required)
     * @param field  (optional)
     * @return BuildTypes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuildTypes getAllBuildTypesOrdered(String projectLocator, String field) throws ApiException {
        ApiResponse<BuildTypes> resp = getAllBuildTypesOrderedWithHttpInfo(projectLocator, field);
        return resp.getData();
    }

    /**
     * Get all build configurations from the matching project, with custom ordering applied.
     * 
     * @param projectLocator  (required)
     * @param field  (optional)
     * @return ApiResponse&lt;BuildTypes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuildTypes> getAllBuildTypesOrderedWithHttpInfo(String projectLocator, String field) throws ApiException {
        com.squareup.okhttp.Call call = getAllBuildTypesOrderedValidateBeforeCall(projectLocator, field, null, null);
        Type localVarReturnType = new TypeToken<BuildTypes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all build configurations from the matching project, with custom ordering applied. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param field  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllBuildTypesOrderedAsync(String projectLocator, String field, final ApiCallback<BuildTypes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllBuildTypesOrderedValidateBeforeCall(projectLocator, field, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuildTypes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllProjects
     * @param locator  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllProjectsCall(String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locator", locator));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllProjectsValidateBeforeCall(String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllProjectsCall(locator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all projects.
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @return Projects
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Projects getAllProjects(String locator, String fields) throws ApiException {
        ApiResponse<Projects> resp = getAllProjectsWithHttpInfo(locator, fields);
        return resp.getData();
    }

    /**
     * Get all projects.
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Projects&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Projects> getAllProjectsWithHttpInfo(String locator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllProjectsValidateBeforeCall(locator, fields, null, null);
        Type localVarReturnType = new TypeToken<Projects>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all projects. (asynchronously)
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllProjectsAsync(String locator, String fields, final ApiCallback<Projects> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllProjectsValidateBeforeCall(locator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Projects>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllSubprojectsOrdered
     * @param projectLocator  (required)
     * @param field  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllSubprojectsOrderedCall(String projectLocator, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/order/projects"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (field != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("field", field));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllSubprojectsOrderedValidateBeforeCall(String projectLocator, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling getAllSubprojectsOrdered(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllSubprojectsOrderedCall(projectLocator, field, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all subprojects of the matching project, with custom ordering applied.
     * 
     * @param projectLocator  (required)
     * @param field  (optional)
     * @return Projects
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Projects getAllSubprojectsOrdered(String projectLocator, String field) throws ApiException {
        ApiResponse<Projects> resp = getAllSubprojectsOrderedWithHttpInfo(projectLocator, field);
        return resp.getData();
    }

    /**
     * Get all subprojects of the matching project, with custom ordering applied.
     * 
     * @param projectLocator  (required)
     * @param field  (optional)
     * @return ApiResponse&lt;Projects&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Projects> getAllSubprojectsOrderedWithHttpInfo(String projectLocator, String field) throws ApiException {
        com.squareup.okhttp.Call call = getAllSubprojectsOrderedValidateBeforeCall(projectLocator, field, null, null);
        Type localVarReturnType = new TypeToken<Projects>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all subprojects of the matching project, with custom ordering applied. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param field  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllSubprojectsOrderedAsync(String projectLocator, String field, final ApiCallback<Projects> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllSubprojectsOrderedValidateBeforeCall(projectLocator, field, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Projects>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuildParameter
     * @param name  (required)
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBuildParameterCall(String name, String projectLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBuildParameterValidateBeforeCall(String name, String projectLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getBuildParameter(Async)");
        }
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling getBuildParameter(Async)");
        }
        

        com.squareup.okhttp.Call call = getBuildParameterCall(name, projectLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get build parameter.
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @return Property
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Property getBuildParameter(String name, String projectLocator, String fields) throws ApiException {
        ApiResponse<Property> resp = getBuildParameterWithHttpInfo(name, projectLocator, fields);
        return resp.getData();
    }

    /**
     * Get build parameter.
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Property&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Property> getBuildParameterWithHttpInfo(String name, String projectLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getBuildParameterValidateBeforeCall(name, projectLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<Property>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get build parameter. (asynchronously)
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBuildParameterAsync(String name, String projectLocator, String fields, final ApiCallback<Property> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBuildParameterValidateBeforeCall(name, projectLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Property>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuildParameterSpecification
     * @param name  (required)
     * @param projectLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBuildParameterSpecificationCall(String name, String projectLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}/type/rawValue"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBuildParameterSpecificationValidateBeforeCall(String name, String projectLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getBuildParameterSpecification(Async)");
        }
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling getBuildParameterSpecification(Async)");
        }
        

        com.squareup.okhttp.Call call = getBuildParameterSpecificationCall(name, projectLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get build parameter specification.
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getBuildParameterSpecification(String name, String projectLocator) throws ApiException {
        ApiResponse<String> resp = getBuildParameterSpecificationWithHttpInfo(name, projectLocator);
        return resp.getData();
    }

    /**
     * Get build parameter specification.
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getBuildParameterSpecificationWithHttpInfo(String name, String projectLocator) throws ApiException {
        com.squareup.okhttp.Call call = getBuildParameterSpecificationValidateBeforeCall(name, projectLocator, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get build parameter specification. (asynchronously)
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBuildParameterSpecificationAsync(String name, String projectLocator, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBuildParameterSpecificationValidateBeforeCall(name, projectLocator, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuildParameterType
     * @param name  (required)
     * @param projectLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBuildParameterTypeCall(String name, String projectLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}/type"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBuildParameterTypeValidateBeforeCall(String name, String projectLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getBuildParameterType(Async)");
        }
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling getBuildParameterType(Async)");
        }
        

        com.squareup.okhttp.Call call = getBuildParameterTypeCall(name, projectLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get type of build parameter.
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @return Type
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Type getBuildParameterType(String name, String projectLocator) throws ApiException {
        ApiResponse<Type> resp = getBuildParameterTypeWithHttpInfo(name, projectLocator);
        return resp.getData();
    }

    /**
     * Get type of build parameter.
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @return ApiResponse&lt;Type&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Type> getBuildParameterTypeWithHttpInfo(String name, String projectLocator) throws ApiException {
        com.squareup.okhttp.Call call = getBuildParameterTypeValidateBeforeCall(name, projectLocator, null, null);
        Type localVarReturnType = new TypeToken<Type>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get type of build parameter. (asynchronously)
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBuildParameterTypeAsync(String name, String projectLocator, final ApiCallback<Type> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBuildParameterTypeValidateBeforeCall(name, projectLocator, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Type>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuildParameterValue
     * @param name  (required)
     * @param projectLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBuildParameterValueCall(String name, String projectLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}/value"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBuildParameterValueValidateBeforeCall(String name, String projectLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getBuildParameterValue(Async)");
        }
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling getBuildParameterValue(Async)");
        }
        

        com.squareup.okhttp.Call call = getBuildParameterValueCall(name, projectLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get value of build parameter.
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getBuildParameterValue(String name, String projectLocator) throws ApiException {
        ApiResponse<String> resp = getBuildParameterValueWithHttpInfo(name, projectLocator);
        return resp.getData();
    }

    /**
     * Get value of build parameter.
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getBuildParameterValueWithHttpInfo(String name, String projectLocator) throws ApiException {
        com.squareup.okhttp.Call call = getBuildParameterValueValidateBeforeCall(name, projectLocator, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get value of build parameter. (asynchronously)
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBuildParameterValueAsync(String name, String projectLocator, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBuildParameterValueValidateBeforeCall(name, projectLocator, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuildParameters
     * @param projectLocator  (required)
     * @param locator  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBuildParametersCall(String projectLocator, String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/parameters"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locator", locator));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBuildParametersValidateBeforeCall(String projectLocator, String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling getBuildParameters(Async)");
        }
        

        com.squareup.okhttp.Call call = getBuildParametersCall(projectLocator, locator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get build parameters.
     * 
     * @param projectLocator  (required)
     * @param locator  (optional)
     * @param fields  (optional)
     * @return Properties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Properties getBuildParameters(String projectLocator, String locator, String fields) throws ApiException {
        ApiResponse<Properties> resp = getBuildParametersWithHttpInfo(projectLocator, locator, fields);
        return resp.getData();
    }

    /**
     * Get build parameters.
     * 
     * @param projectLocator  (required)
     * @param locator  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Properties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Properties> getBuildParametersWithHttpInfo(String projectLocator, String locator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getBuildParametersValidateBeforeCall(projectLocator, locator, fields, null, null);
        Type localVarReturnType = new TypeToken<Properties>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get build parameters. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param locator  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBuildParametersAsync(String projectLocator, String locator, String fields, final ApiCallback<Properties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBuildParametersValidateBeforeCall(projectLocator, locator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Properties>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDefaultTemplate
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDefaultTemplateCall(String projectLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/defaultTemplate"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDefaultTemplateValidateBeforeCall(String projectLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling getDefaultTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = getDefaultTemplateCall(projectLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the default template of the matching project.
     * 
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @return BuildType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuildType getDefaultTemplate(String projectLocator, String fields) throws ApiException {
        ApiResponse<BuildType> resp = getDefaultTemplateWithHttpInfo(projectLocator, fields);
        return resp.getData();
    }

    /**
     * Get the default template of the matching project.
     * 
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;BuildType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuildType> getDefaultTemplateWithHttpInfo(String projectLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getDefaultTemplateValidateBeforeCall(projectLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<BuildType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the default template of the matching project. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDefaultTemplateAsync(String projectLocator, String fields, final ApiCallback<BuildType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDefaultTemplateValidateBeforeCall(projectLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuildType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFeature
     * @param featureLocator  (required)
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFeatureCall(String featureLocator, String projectLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}"
            .replaceAll("\\{" + "featureLocator" + "\\}", apiClient.escapeString(featureLocator.toString()))
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFeatureValidateBeforeCall(String featureLocator, String projectLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'featureLocator' is set
        if (featureLocator == null) {
            throw new ApiException("Missing the required parameter 'featureLocator' when calling getFeature(Async)");
        }
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling getFeature(Async)");
        }
        

        com.squareup.okhttp.Call call = getFeatureCall(featureLocator, projectLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a matching feature.
     * 
     * @param featureLocator  (required)
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getFeature(String featureLocator, String projectLocator, String fields) throws ApiException {
        ApiResponse<Object> resp = getFeatureWithHttpInfo(featureLocator, projectLocator, fields);
        return resp.getData();
    }

    /**
     * Get a matching feature.
     * 
     * @param featureLocator  (required)
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getFeatureWithHttpInfo(String featureLocator, String projectLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getFeatureValidateBeforeCall(featureLocator, projectLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a matching feature. (asynchronously)
     * 
     * @param featureLocator  (required)
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFeatureAsync(String featureLocator, String projectLocator, String fields, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFeatureValidateBeforeCall(featureLocator, projectLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFeatures
     * @param projectLocator  (required)
     * @param locator  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFeaturesCall(String projectLocator, String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/projectFeatures"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locator", locator));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFeaturesValidateBeforeCall(String projectLocator, String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling getFeatures(Async)");
        }
        

        com.squareup.okhttp.Call call = getFeaturesCall(projectLocator, locator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all features.
     * 
     * @param projectLocator  (required)
     * @param locator  (optional)
     * @param fields  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getFeatures(String projectLocator, String locator, String fields) throws ApiException {
        ApiResponse<Object> resp = getFeaturesWithHttpInfo(projectLocator, locator, fields);
        return resp.getData();
    }

    /**
     * Get all features.
     * 
     * @param projectLocator  (required)
     * @param locator  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getFeaturesWithHttpInfo(String projectLocator, String locator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getFeaturesValidateBeforeCall(projectLocator, locator, fields, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all features. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param locator  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFeaturesAsync(String projectLocator, String locator, String fields, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFeaturesValidateBeforeCall(projectLocator, locator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProject
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProjectCall(String projectLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProjectValidateBeforeCall(String projectLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling getProject(Async)");
        }
        

        com.squareup.okhttp.Call call = getProjectCall(projectLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get project matching the locator.
     * 
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Project getProject(String projectLocator, String fields) throws ApiException {
        ApiResponse<Project> resp = getProjectWithHttpInfo(projectLocator, fields);
        return resp.getData();
    }

    /**
     * Get project matching the locator.
     * 
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Project> getProjectWithHttpInfo(String projectLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getProjectValidateBeforeCall(projectLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get project matching the locator. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProjectAsync(String projectLocator, String fields, final ApiCallback<Project> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProjectValidateBeforeCall(projectLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProjectField
     * @param projectLocator  (required)
     * @param field  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProjectFieldCall(String projectLocator, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/{field}"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()))
            .replaceAll("\\{" + "field" + "\\}", apiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProjectFieldValidateBeforeCall(String projectLocator, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling getProjectField(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getProjectField(Async)");
        }
        

        com.squareup.okhttp.Call call = getProjectFieldCall(projectLocator, field, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a field of the matching project.
     * 
     * @param projectLocator  (required)
     * @param field  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getProjectField(String projectLocator, String field) throws ApiException {
        ApiResponse<String> resp = getProjectFieldWithHttpInfo(projectLocator, field);
        return resp.getData();
    }

    /**
     * Get a field of the matching project.
     * 
     * @param projectLocator  (required)
     * @param field  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getProjectFieldWithHttpInfo(String projectLocator, String field) throws ApiException {
        com.squareup.okhttp.Call call = getProjectFieldValidateBeforeCall(projectLocator, field, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a field of the matching project. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param field  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProjectFieldAsync(String projectLocator, String field, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProjectFieldValidateBeforeCall(projectLocator, field, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProjectParentProject
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProjectParentProjectCall(String projectLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/parentProject"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProjectParentProjectValidateBeforeCall(String projectLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling getProjectParentProject(Async)");
        }
        

        com.squareup.okhttp.Call call = getProjectParentProjectCall(projectLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the parent project of the matching project.
     * 
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Project getProjectParentProject(String projectLocator, String fields) throws ApiException {
        ApiResponse<Project> resp = getProjectParentProjectWithHttpInfo(projectLocator, fields);
        return resp.getData();
    }

    /**
     * Get the parent project of the matching project.
     * 
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Project> getProjectParentProjectWithHttpInfo(String projectLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getProjectParentProjectValidateBeforeCall(projectLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the parent project of the matching project. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProjectParentProjectAsync(String projectLocator, String fields, final ApiCallback<Project> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProjectParentProjectValidateBeforeCall(projectLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProjectSettingsFile
     * @param projectLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProjectSettingsFileCall(String projectLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/settingsFile"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProjectSettingsFileValidateBeforeCall(String projectLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling getProjectSettingsFile(Async)");
        }
        

        com.squareup.okhttp.Call call = getProjectSettingsFileCall(projectLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the settings file of the matching build configuration.
     * 
     * @param projectLocator  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getProjectSettingsFile(String projectLocator) throws ApiException {
        ApiResponse<String> resp = getProjectSettingsFileWithHttpInfo(projectLocator);
        return resp.getData();
    }

    /**
     * Get the settings file of the matching build configuration.
     * 
     * @param projectLocator  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getProjectSettingsFileWithHttpInfo(String projectLocator) throws ApiException {
        com.squareup.okhttp.Call call = getProjectSettingsFileValidateBeforeCall(projectLocator, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the settings file of the matching build configuration. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProjectSettingsFileAsync(String projectLocator, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProjectSettingsFileValidateBeforeCall(projectLocator, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProjectTemplates
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProjectTemplatesCall(String projectLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/templates"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProjectTemplatesValidateBeforeCall(String projectLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling getProjectTemplates(Async)");
        }
        

        com.squareup.okhttp.Call call = getProjectTemplatesCall(projectLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all templates of the matching project.
     * 
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @return BuildTypes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuildTypes getProjectTemplates(String projectLocator, String fields) throws ApiException {
        ApiResponse<BuildTypes> resp = getProjectTemplatesWithHttpInfo(projectLocator, fields);
        return resp.getData();
    }

    /**
     * Get all templates of the matching project.
     * 
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;BuildTypes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuildTypes> getProjectTemplatesWithHttpInfo(String projectLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getProjectTemplatesValidateBeforeCall(projectLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<BuildTypes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all templates of the matching project. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProjectTemplatesAsync(String projectLocator, String fields, final ApiCallback<BuildTypes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProjectTemplatesValidateBeforeCall(projectLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuildTypes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSecureValue
     * @param projectLocator  (required)
     * @param token  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSecureValueCall(String projectLocator, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/secure/values/{token}"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()))
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSecureValueValidateBeforeCall(String projectLocator, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling getSecureValue(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getSecureValue(Async)");
        }
        

        com.squareup.okhttp.Call call = getSecureValueCall(projectLocator, token, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a secure token of the matching project.
     * 
     * @param projectLocator  (required)
     * @param token  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getSecureValue(String projectLocator, String token) throws ApiException {
        ApiResponse<String> resp = getSecureValueWithHttpInfo(projectLocator, token);
        return resp.getData();
    }

    /**
     * Get a secure token of the matching project.
     * 
     * @param projectLocator  (required)
     * @param token  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getSecureValueWithHttpInfo(String projectLocator, String token) throws ApiException {
        com.squareup.okhttp.Call call = getSecureValueValidateBeforeCall(projectLocator, token, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a secure token of the matching project. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param token  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSecureValueAsync(String projectLocator, String token, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSecureValueValidateBeforeCall(projectLocator, token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeDefaultTemplate
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeDefaultTemplateCall(String projectLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/defaultTemplate"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeDefaultTemplateValidateBeforeCall(String projectLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling removeDefaultTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = removeDefaultTemplateCall(projectLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove the default template from the matching project.
     * 
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeDefaultTemplate(String projectLocator, String fields) throws ApiException {
        removeDefaultTemplateWithHttpInfo(projectLocator, fields);
    }

    /**
     * Remove the default template from the matching project.
     * 
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeDefaultTemplateWithHttpInfo(String projectLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = removeDefaultTemplateValidateBeforeCall(projectLocator, fields, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove the default template from the matching project. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeDefaultTemplateAsync(String projectLocator, String fields, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeDefaultTemplateValidateBeforeCall(projectLocator, fields, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for removeProjectFromAgentPool
     * @param projectLocator  (required)
     * @param agentPoolLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeProjectFromAgentPoolCall(String projectLocator, String agentPoolLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/agentPools/{agentPoolLocator}"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()))
            .replaceAll("\\{" + "agentPoolLocator" + "\\}", apiClient.escapeString(agentPoolLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeProjectFromAgentPoolValidateBeforeCall(String projectLocator, String agentPoolLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling removeProjectFromAgentPool(Async)");
        }
        
        // verify the required parameter 'agentPoolLocator' is set
        if (agentPoolLocator == null) {
            throw new ApiException("Missing the required parameter 'agentPoolLocator' when calling removeProjectFromAgentPool(Async)");
        }
        

        com.squareup.okhttp.Call call = removeProjectFromAgentPoolCall(projectLocator, agentPoolLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Unassign a project from the matching agent pool.
     * 
     * @param projectLocator  (required)
     * @param agentPoolLocator  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeProjectFromAgentPool(String projectLocator, String agentPoolLocator) throws ApiException {
        removeProjectFromAgentPoolWithHttpInfo(projectLocator, agentPoolLocator);
    }

    /**
     * Unassign a project from the matching agent pool.
     * 
     * @param projectLocator  (required)
     * @param agentPoolLocator  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeProjectFromAgentPoolWithHttpInfo(String projectLocator, String agentPoolLocator) throws ApiException {
        com.squareup.okhttp.Call call = removeProjectFromAgentPoolValidateBeforeCall(projectLocator, agentPoolLocator, null, null);
        return apiClient.execute(call);
    }

    /**
     * Unassign a project from the matching agent pool. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param agentPoolLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeProjectFromAgentPoolAsync(String projectLocator, String agentPoolLocator, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeProjectFromAgentPoolValidateBeforeCall(projectLocator, agentPoolLocator, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for setAgentPoolsProject
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setAgentPoolsProjectCall(String projectLocator, AgentPools body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/agentPools"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setAgentPoolsProjectValidateBeforeCall(String projectLocator, AgentPools body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling setAgentPoolsProject(Async)");
        }
        

        com.squareup.okhttp.Call call = setAgentPoolsProjectCall(projectLocator, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update agent pools apppointed to the matching project.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return AgentPools
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AgentPools setAgentPoolsProject(String projectLocator, AgentPools body, String fields) throws ApiException {
        ApiResponse<AgentPools> resp = setAgentPoolsProjectWithHttpInfo(projectLocator, body, fields);
        return resp.getData();
    }

    /**
     * Update agent pools apppointed to the matching project.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;AgentPools&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AgentPools> setAgentPoolsProjectWithHttpInfo(String projectLocator, AgentPools body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = setAgentPoolsProjectValidateBeforeCall(projectLocator, body, fields, null, null);
        Type localVarReturnType = new TypeToken<AgentPools>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update agent pools apppointed to the matching project. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setAgentPoolsProjectAsync(String projectLocator, AgentPools body, String fields, final ApiCallback<AgentPools> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setAgentPoolsProjectValidateBeforeCall(projectLocator, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AgentPools>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setBuildTypesOrder
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param field  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setBuildTypesOrderCall(String projectLocator, BuildTypes body, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/order/buildTypes"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (field != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("field", field));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setBuildTypesOrderValidateBeforeCall(String projectLocator, BuildTypes body, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling setBuildTypesOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = setBuildTypesOrderCall(projectLocator, body, field, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update custom ordering of build configurations of the matching project.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param field  (optional)
     * @return BuildTypes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuildTypes setBuildTypesOrder(String projectLocator, BuildTypes body, String field) throws ApiException {
        ApiResponse<BuildTypes> resp = setBuildTypesOrderWithHttpInfo(projectLocator, body, field);
        return resp.getData();
    }

    /**
     * Update custom ordering of build configurations of the matching project.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param field  (optional)
     * @return ApiResponse&lt;BuildTypes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuildTypes> setBuildTypesOrderWithHttpInfo(String projectLocator, BuildTypes body, String field) throws ApiException {
        com.squareup.okhttp.Call call = setBuildTypesOrderValidateBeforeCall(projectLocator, body, field, null, null);
        Type localVarReturnType = new TypeToken<BuildTypes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update custom ordering of build configurations of the matching project. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param field  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setBuildTypesOrderAsync(String projectLocator, BuildTypes body, String field, final ApiCallback<BuildTypes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setBuildTypesOrderValidateBeforeCall(projectLocator, body, field, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuildTypes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setDefaultTemplate
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setDefaultTemplateCall(String projectLocator, BuildType body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/defaultTemplate"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setDefaultTemplateValidateBeforeCall(String projectLocator, BuildType body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling setDefaultTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = setDefaultTemplateCall(projectLocator, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update the default template of the matching project.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return BuildType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuildType setDefaultTemplate(String projectLocator, BuildType body, String fields) throws ApiException {
        ApiResponse<BuildType> resp = setDefaultTemplateWithHttpInfo(projectLocator, body, fields);
        return resp.getData();
    }

    /**
     * Update the default template of the matching project.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;BuildType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuildType> setDefaultTemplateWithHttpInfo(String projectLocator, BuildType body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = setDefaultTemplateValidateBeforeCall(projectLocator, body, fields, null, null);
        Type localVarReturnType = new TypeToken<BuildType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the default template of the matching project. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setDefaultTemplateAsync(String projectLocator, BuildType body, String fields, final ApiCallback<BuildType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setDefaultTemplateValidateBeforeCall(projectLocator, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuildType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setParentProject
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setParentProjectCall(String projectLocator, Project body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/parentProject"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setParentProjectValidateBeforeCall(String projectLocator, Project body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling setParentProject(Async)");
        }
        

        com.squareup.okhttp.Call call = setParentProjectCall(projectLocator, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update the parent project of the matching project.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Project setParentProject(String projectLocator, Project body, String fields) throws ApiException {
        ApiResponse<Project> resp = setParentProjectWithHttpInfo(projectLocator, body, fields);
        return resp.getData();
    }

    /**
     * Update the parent project of the matching project.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Project> setParentProjectWithHttpInfo(String projectLocator, Project body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = setParentProjectValidateBeforeCall(projectLocator, body, fields, null, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the parent project of the matching project. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setParentProjectAsync(String projectLocator, Project body, String fields, final ApiCallback<Project> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setParentProjectValidateBeforeCall(projectLocator, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setProjectField
     * @param projectLocator  (required)
     * @param field  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setProjectFieldCall(String projectLocator, String field, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/{field}"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()))
            .replaceAll("\\{" + "field" + "\\}", apiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setProjectFieldValidateBeforeCall(String projectLocator, String field, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling setProjectField(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling setProjectField(Async)");
        }
        

        com.squareup.okhttp.Call call = setProjectFieldCall(projectLocator, field, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a field of the matching project.
     * 
     * @param projectLocator  (required)
     * @param field  (required)
     * @param body  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String setProjectField(String projectLocator, String field, String body) throws ApiException {
        ApiResponse<String> resp = setProjectFieldWithHttpInfo(projectLocator, field, body);
        return resp.getData();
    }

    /**
     * Update a field of the matching project.
     * 
     * @param projectLocator  (required)
     * @param field  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> setProjectFieldWithHttpInfo(String projectLocator, String field, String body) throws ApiException {
        com.squareup.okhttp.Call call = setProjectFieldValidateBeforeCall(projectLocator, field, body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a field of the matching project. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param field  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setProjectFieldAsync(String projectLocator, String field, String body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setProjectFieldValidateBeforeCall(projectLocator, field, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setSubprojectsOrder
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param field  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setSubprojectsOrderCall(String projectLocator, Projects body, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/order/projects"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (field != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("field", field));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setSubprojectsOrderValidateBeforeCall(String projectLocator, Projects body, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling setSubprojectsOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = setSubprojectsOrderCall(projectLocator, body, field, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update custom ordering of subprojects of the matching project.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param field  (optional)
     * @return Projects
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Projects setSubprojectsOrder(String projectLocator, Projects body, String field) throws ApiException {
        ApiResponse<Projects> resp = setSubprojectsOrderWithHttpInfo(projectLocator, body, field);
        return resp.getData();
    }

    /**
     * Update custom ordering of subprojects of the matching project.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param field  (optional)
     * @return ApiResponse&lt;Projects&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Projects> setSubprojectsOrderWithHttpInfo(String projectLocator, Projects body, String field) throws ApiException {
        com.squareup.okhttp.Call call = setSubprojectsOrderValidateBeforeCall(projectLocator, body, field, null, null);
        Type localVarReturnType = new TypeToken<Projects>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update custom ordering of subprojects of the matching project. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param field  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setSubprojectsOrderAsync(String projectLocator, Projects body, String field, final ApiCallback<Projects> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setSubprojectsOrderValidateBeforeCall(projectLocator, body, field, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Projects>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBuildParameter
     * @param name  (required)
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBuildParameterCall(String name, String projectLocator, Property body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBuildParameterValidateBeforeCall(String name, String projectLocator, Property body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateBuildParameter(Async)");
        }
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling updateBuildParameter(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBuildParameterCall(name, projectLocator, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update build parameter.
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return Property
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Property updateBuildParameter(String name, String projectLocator, Property body, String fields) throws ApiException {
        ApiResponse<Property> resp = updateBuildParameterWithHttpInfo(name, projectLocator, body, fields);
        return resp.getData();
    }

    /**
     * Update build parameter.
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Property&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Property> updateBuildParameterWithHttpInfo(String name, String projectLocator, Property body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = updateBuildParameterValidateBeforeCall(name, projectLocator, body, fields, null, null);
        Type localVarReturnType = new TypeToken<Property>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update build parameter. (asynchronously)
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBuildParameterAsync(String name, String projectLocator, Property body, String fields, final ApiCallback<Property> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBuildParameterValidateBeforeCall(name, projectLocator, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Property>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBuildParameterSpecification
     * @param name  (required)
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBuildParameterSpecificationCall(String name, String projectLocator, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}/type/rawValue"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBuildParameterSpecificationValidateBeforeCall(String name, String projectLocator, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateBuildParameterSpecification(Async)");
        }
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling updateBuildParameterSpecification(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBuildParameterSpecificationCall(name, projectLocator, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update build parameter specification.
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @param body  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String updateBuildParameterSpecification(String name, String projectLocator, String body) throws ApiException {
        ApiResponse<String> resp = updateBuildParameterSpecificationWithHttpInfo(name, projectLocator, body);
        return resp.getData();
    }

    /**
     * Update build parameter specification.
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> updateBuildParameterSpecificationWithHttpInfo(String name, String projectLocator, String body) throws ApiException {
        com.squareup.okhttp.Call call = updateBuildParameterSpecificationValidateBeforeCall(name, projectLocator, body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update build parameter specification. (asynchronously)
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBuildParameterSpecificationAsync(String name, String projectLocator, String body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBuildParameterSpecificationValidateBeforeCall(name, projectLocator, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBuildParameterType
     * @param name  (required)
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBuildParameterTypeCall(String name, String projectLocator, Type body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}/type"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBuildParameterTypeValidateBeforeCall(String name, String projectLocator, Type body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateBuildParameterType(Async)");
        }
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling updateBuildParameterType(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBuildParameterTypeCall(name, projectLocator, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update type of build parameter.
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @param body  (optional)
     * @return Type
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Type updateBuildParameterType(String name, String projectLocator, Type body) throws ApiException {
        ApiResponse<Type> resp = updateBuildParameterTypeWithHttpInfo(name, projectLocator, body);
        return resp.getData();
    }

    /**
     * Update type of build parameter.
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Type&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Type> updateBuildParameterTypeWithHttpInfo(String name, String projectLocator, Type body) throws ApiException {
        com.squareup.okhttp.Call call = updateBuildParameterTypeValidateBeforeCall(name, projectLocator, body, null, null);
        Type localVarReturnType = new TypeToken<Type>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update type of build parameter. (asynchronously)
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBuildParameterTypeAsync(String name, String projectLocator, Type body, final ApiCallback<Type> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBuildParameterTypeValidateBeforeCall(name, projectLocator, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Type>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBuildParameterValue
     * @param name  (required)
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBuildParameterValueCall(String name, String projectLocator, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}/value"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBuildParameterValueValidateBeforeCall(String name, String projectLocator, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateBuildParameterValue(Async)");
        }
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling updateBuildParameterValue(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBuildParameterValueCall(name, projectLocator, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update value of build parameter.
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @param body  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String updateBuildParameterValue(String name, String projectLocator, String body) throws ApiException {
        ApiResponse<String> resp = updateBuildParameterValueWithHttpInfo(name, projectLocator, body);
        return resp.getData();
    }

    /**
     * Update value of build parameter.
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> updateBuildParameterValueWithHttpInfo(String name, String projectLocator, String body) throws ApiException {
        com.squareup.okhttp.Call call = updateBuildParameterValueValidateBeforeCall(name, projectLocator, body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update value of build parameter. (asynchronously)
     * 
     * @param name  (required)
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBuildParameterValueAsync(String name, String projectLocator, String body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBuildParameterValueValidateBeforeCall(name, projectLocator, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBuildParameters
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBuildParametersCall(String projectLocator, Properties body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/parameters"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBuildParametersValidateBeforeCall(String projectLocator, Properties body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling updateBuildParameters(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBuildParametersCall(projectLocator, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update build parameters.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return Properties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Properties updateBuildParameters(String projectLocator, Properties body, String fields) throws ApiException {
        ApiResponse<Properties> resp = updateBuildParametersWithHttpInfo(projectLocator, body, fields);
        return resp.getData();
    }

    /**
     * Update build parameters.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Properties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Properties> updateBuildParametersWithHttpInfo(String projectLocator, Properties body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = updateBuildParametersValidateBeforeCall(projectLocator, body, fields, null, null);
        Type localVarReturnType = new TypeToken<Properties>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update build parameters. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBuildParametersAsync(String projectLocator, Properties body, String fields, final ApiCallback<Properties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBuildParametersValidateBeforeCall(projectLocator, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Properties>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateFeature
     * @param featureLocator  (required)
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFeatureCall(String featureLocator, String projectLocator, ProjectFeature body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}"
            .replaceAll("\\{" + "featureLocator" + "\\}", apiClient.escapeString(featureLocator.toString()))
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFeatureValidateBeforeCall(String featureLocator, String projectLocator, ProjectFeature body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'featureLocator' is set
        if (featureLocator == null) {
            throw new ApiException("Missing the required parameter 'featureLocator' when calling updateFeature(Async)");
        }
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling updateFeature(Async)");
        }
        

        com.squareup.okhttp.Call call = updateFeatureCall(featureLocator, projectLocator, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a matching feature.
     * 
     * @param featureLocator  (required)
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object updateFeature(String featureLocator, String projectLocator, ProjectFeature body, String fields) throws ApiException {
        ApiResponse<Object> resp = updateFeatureWithHttpInfo(featureLocator, projectLocator, body, fields);
        return resp.getData();
    }

    /**
     * Update a matching feature.
     * 
     * @param featureLocator  (required)
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> updateFeatureWithHttpInfo(String featureLocator, String projectLocator, ProjectFeature body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = updateFeatureValidateBeforeCall(featureLocator, projectLocator, body, fields, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a matching feature. (asynchronously)
     * 
     * @param featureLocator  (required)
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFeatureAsync(String featureLocator, String projectLocator, ProjectFeature body, String fields, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFeatureValidateBeforeCall(featureLocator, projectLocator, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateFeatures
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFeaturesCall(String projectLocator, ProjectFeatures body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/projects/{projectLocator}/projectFeatures"
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFeaturesValidateBeforeCall(String projectLocator, ProjectFeatures body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling updateFeatures(Async)");
        }
        

        com.squareup.okhttp.Call call = updateFeaturesCall(projectLocator, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update all features.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object updateFeatures(String projectLocator, ProjectFeatures body, String fields) throws ApiException {
        ApiResponse<Object> resp = updateFeaturesWithHttpInfo(projectLocator, body, fields);
        return resp.getData();
    }

    /**
     * Update all features.
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> updateFeaturesWithHttpInfo(String projectLocator, ProjectFeatures body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = updateFeaturesValidateBeforeCall(projectLocator, body, fields, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update all features. (asynchronously)
     * 
     * @param projectLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFeaturesAsync(String projectLocator, ProjectFeatures body, String fields, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFeaturesValidateBeforeCall(projectLocator, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
