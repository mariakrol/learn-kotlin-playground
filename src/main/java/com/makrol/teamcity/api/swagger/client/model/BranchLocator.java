/*
 * TeamCity REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.makrol.teamcity.api.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Represents a locator string for filtering Branch entities.
 */
@ApiModel(description = "Represents a locator string for filtering Branch entities.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-01-14T01:07:21.722+03:00")
public class BranchLocator {
  @SerializedName("branched")
  private String branched = null;

  @SerializedName("build")
  private String build = null;

  @SerializedName("buildType")
  private String buildType = null;

  @SerializedName("default")
  private String _default = null;

  @SerializedName("item")
  private String item = null;

  @SerializedName("name")
  private String name = null;

  /**
   * Gets or Sets policy
   */
  @JsonAdapter(PolicyEnum.Adapter.class)
  public enum PolicyEnum {
    VCS_BRANCHES("VCS_BRANCHES"),
    
    ACTIVE_VCS_BRANCHES("ACTIVE_VCS_BRANCHES"),
    
    HISTORY_BRANCHES("HISTORY_BRANCHES"),
    
    ACTIVE_HISTORY_BRANCHES("ACTIVE_HISTORY_BRANCHES"),
    
    ACTIVE_HISTORY_AND_ACTIVE_VCS_BRANCHES("ACTIVE_HISTORY_AND_ACTIVE_VCS_BRANCHES"),
    
    ALL_BRANCHES("ALL_BRANCHES");

    private String value;

    PolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PolicyEnum fromValue(String text) {
      for (PolicyEnum b : PolicyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PolicyEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("policy")
  private PolicyEnum policy = null;

  public BranchLocator branched(String branched) {
    this.branched = branched;
    return this;
  }

   /**
   * Is feature branch.
   * @return branched
  **/
  @ApiModelProperty(value = "Is feature branch.")
  public String getBranched() {
    return branched;
  }

  public void setBranched(String branched) {
    this.branched = branched;
  }

  public BranchLocator build(String build) {
    this.build = build;
    return this;
  }

   /**
   * Build locator.
   * @return build
  **/
  @ApiModelProperty(value = "Build locator.")
  public String getBuild() {
    return build;
  }

  public void setBuild(String build) {
    this.build = build;
  }

  public BranchLocator buildType(String buildType) {
    this.buildType = buildType;
    return this;
  }

   /**
   * Build type locator.
   * @return buildType
  **/
  @ApiModelProperty(value = "Build type locator.")
  public String getBuildType() {
    return buildType;
  }

  public void setBuildType(String buildType) {
    this.buildType = buildType;
  }

  public BranchLocator _default(String _default) {
    this._default = _default;
    return this;
  }

   /**
   * Is default branch.
   * @return _default
  **/
  @ApiModelProperty(value = "Is default branch.")
  public String getDefault() {
    return _default;
  }

  public void setDefault(String _default) {
    this._default = _default;
  }

  public BranchLocator item(String item) {
    this.item = item;
    return this;
  }

   /**
   * Supply multiple locators and return a union of the results.
   * @return item
  **/
  @ApiModelProperty(value = "Supply multiple locators and return a union of the results.")
  public String getItem() {
    return item;
  }

  public void setItem(String item) {
    this.item = item;
  }

  public BranchLocator name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public BranchLocator policy(PolicyEnum policy) {
    this.policy = policy;
    return this;
  }

   /**
   * Get policy
   * @return policy
  **/
  @ApiModelProperty(value = "")
  public PolicyEnum getPolicy() {
    return policy;
  }

  public void setPolicy(PolicyEnum policy) {
    this.policy = policy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BranchLocator branchLocator = (BranchLocator) o;
    return Objects.equals(this.branched, branchLocator.branched) &&
        Objects.equals(this.build, branchLocator.build) &&
        Objects.equals(this.buildType, branchLocator.buildType) &&
        Objects.equals(this._default, branchLocator._default) &&
        Objects.equals(this.item, branchLocator.item) &&
        Objects.equals(this.name, branchLocator.name) &&
        Objects.equals(this.policy, branchLocator.policy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(branched, build, buildType, _default, item, name, policy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BranchLocator {\n");
    
    sb.append("    branched: ").append(toIndentedString(branched)).append("\n");
    sb.append("    build: ").append(toIndentedString(build)).append("\n");
    sb.append("    buildType: ").append(toIndentedString(buildType)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

