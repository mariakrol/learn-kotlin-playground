/*
 * TeamCity REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.makrol.teamcity.api.swagger.client.api;

import com.makrol.teamcity.api.swagger.client.ApiCallback;
import com.makrol.teamcity.api.swagger.client.ApiClient;
import com.makrol.teamcity.api.swagger.client.ApiException;
import com.makrol.teamcity.api.swagger.client.ApiResponse;
import com.makrol.teamcity.api.swagger.client.Configuration;
import com.makrol.teamcity.api.swagger.client.Pair;
import com.makrol.teamcity.api.swagger.client.ProgressRequestBody;
import com.makrol.teamcity.api.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.makrol.teamcity.api.swagger.client.model.Investigation;
import com.makrol.teamcity.api.swagger.client.model.Investigations;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InvestigationApi {
    private ApiClient apiClient;

    public InvestigationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InvestigationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addInvestigation
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInvestigationCall(Investigation body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/investigations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInvestigationValidateBeforeCall(Investigation body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = addInvestigationCall(body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new investigation.
     * 
     * @param body  (optional)
     * @param fields  (optional)
     * @return Investigation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Investigation addInvestigation(Investigation body, String fields) throws ApiException {
        ApiResponse<Investigation> resp = addInvestigationWithHttpInfo(body, fields);
        return resp.getData();
    }

    /**
     * Create a new investigation.
     * 
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Investigation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Investigation> addInvestigationWithHttpInfo(Investigation body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = addInvestigationValidateBeforeCall(body, fields, null, null);
        Type localVarReturnType = new TypeToken<Investigation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new investigation. (asynchronously)
     * 
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInvestigationAsync(Investigation body, String fields, final ApiCallback<Investigation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInvestigationValidateBeforeCall(body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Investigation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addMultipleInvestigations
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addMultipleInvestigationsCall(Investigations body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/investigations/multiple";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addMultipleInvestigationsValidateBeforeCall(Investigations body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = addMultipleInvestigationsCall(body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create multiple new investigations.
     * 
     * @param body  (optional)
     * @param fields  (optional)
     * @return Investigations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Investigations addMultipleInvestigations(Investigations body, String fields) throws ApiException {
        ApiResponse<Investigations> resp = addMultipleInvestigationsWithHttpInfo(body, fields);
        return resp.getData();
    }

    /**
     * Create multiple new investigations.
     * 
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Investigations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Investigations> addMultipleInvestigationsWithHttpInfo(Investigations body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = addMultipleInvestigationsValidateBeforeCall(body, fields, null, null);
        Type localVarReturnType = new TypeToken<Investigations>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create multiple new investigations. (asynchronously)
     * 
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addMultipleInvestigationsAsync(Investigations body, String fields, final ApiCallback<Investigations> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addMultipleInvestigationsValidateBeforeCall(body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Investigations>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteInvestigation
     * @param investigationLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInvestigationCall(String investigationLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/investigations/{investigationLocator}"
            .replaceAll("\\{" + "investigationLocator" + "\\}", apiClient.escapeString(investigationLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInvestigationValidateBeforeCall(String investigationLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'investigationLocator' is set
        if (investigationLocator == null) {
            throw new ApiException("Missing the required parameter 'investigationLocator' when calling deleteInvestigation(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteInvestigationCall(investigationLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete investigation matching the locator.
     * 
     * @param investigationLocator  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteInvestigation(String investigationLocator) throws ApiException {
        deleteInvestigationWithHttpInfo(investigationLocator);
    }

    /**
     * Delete investigation matching the locator.
     * 
     * @param investigationLocator  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteInvestigationWithHttpInfo(String investigationLocator) throws ApiException {
        com.squareup.okhttp.Call call = deleteInvestigationValidateBeforeCall(investigationLocator, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete investigation matching the locator. (asynchronously)
     * 
     * @param investigationLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInvestigationAsync(String investigationLocator, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInvestigationValidateBeforeCall(investigationLocator, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllInvestigations
     * @param locator  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllInvestigationsCall(String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/investigations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locator", locator));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllInvestigationsValidateBeforeCall(String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllInvestigationsCall(locator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all investigations.
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @return Investigations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Investigations getAllInvestigations(String locator, String fields) throws ApiException {
        ApiResponse<Investigations> resp = getAllInvestigationsWithHttpInfo(locator, fields);
        return resp.getData();
    }

    /**
     * Get all investigations.
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Investigations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Investigations> getAllInvestigationsWithHttpInfo(String locator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllInvestigationsValidateBeforeCall(locator, fields, null, null);
        Type localVarReturnType = new TypeToken<Investigations>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all investigations. (asynchronously)
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllInvestigationsAsync(String locator, String fields, final ApiCallback<Investigations> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllInvestigationsValidateBeforeCall(locator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Investigations>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInvestigation
     * @param investigationLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInvestigationCall(String investigationLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/investigations/{investigationLocator}"
            .replaceAll("\\{" + "investigationLocator" + "\\}", apiClient.escapeString(investigationLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInvestigationValidateBeforeCall(String investigationLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'investigationLocator' is set
        if (investigationLocator == null) {
            throw new ApiException("Missing the required parameter 'investigationLocator' when calling getInvestigation(Async)");
        }
        

        com.squareup.okhttp.Call call = getInvestigationCall(investigationLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get investigation matching the locator.
     * 
     * @param investigationLocator  (required)
     * @param fields  (optional)
     * @return Investigation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Investigation getInvestigation(String investigationLocator, String fields) throws ApiException {
        ApiResponse<Investigation> resp = getInvestigationWithHttpInfo(investigationLocator, fields);
        return resp.getData();
    }

    /**
     * Get investigation matching the locator.
     * 
     * @param investigationLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Investigation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Investigation> getInvestigationWithHttpInfo(String investigationLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getInvestigationValidateBeforeCall(investigationLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<Investigation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get investigation matching the locator. (asynchronously)
     * 
     * @param investigationLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInvestigationAsync(String investigationLocator, String fields, final ApiCallback<Investigation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInvestigationValidateBeforeCall(investigationLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Investigation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for replaceInvestigation
     * @param investigationLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceInvestigationCall(String investigationLocator, Investigation body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/investigations/{investigationLocator}"
            .replaceAll("\\{" + "investigationLocator" + "\\}", apiClient.escapeString(investigationLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceInvestigationValidateBeforeCall(String investigationLocator, Investigation body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'investigationLocator' is set
        if (investigationLocator == null) {
            throw new ApiException("Missing the required parameter 'investigationLocator' when calling replaceInvestigation(Async)");
        }
        

        com.squareup.okhttp.Call call = replaceInvestigationCall(investigationLocator, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update investigation matching the locator.
     * 
     * @param investigationLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return Investigation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Investigation replaceInvestigation(String investigationLocator, Investigation body, String fields) throws ApiException {
        ApiResponse<Investigation> resp = replaceInvestigationWithHttpInfo(investigationLocator, body, fields);
        return resp.getData();
    }

    /**
     * Update investigation matching the locator.
     * 
     * @param investigationLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Investigation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Investigation> replaceInvestigationWithHttpInfo(String investigationLocator, Investigation body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = replaceInvestigationValidateBeforeCall(investigationLocator, body, fields, null, null);
        Type localVarReturnType = new TypeToken<Investigation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update investigation matching the locator. (asynchronously)
     * 
     * @param investigationLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceInvestigationAsync(String investigationLocator, Investigation body, String fields, final ApiCallback<Investigation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceInvestigationValidateBeforeCall(investigationLocator, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Investigation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
