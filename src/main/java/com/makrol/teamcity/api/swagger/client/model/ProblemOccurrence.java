/*
 * TeamCity REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.makrol.teamcity.api.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.makrol.teamcity.api.swagger.client.model.Build;
import com.makrol.teamcity.api.swagger.client.model.Mute;
import com.makrol.teamcity.api.swagger.client.model.Problem;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Represents an instance of a failed test in the specific build.
 */
@ApiModel(description = "Represents an instance of a failed test in the specific build.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-01-14T01:07:21.722+03:00")
public class ProblemOccurrence {
  @SerializedName("id")
  private String id = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("identity")
  private String identity = null;

  @SerializedName("href")
  private String href = null;

  @SerializedName("muted")
  private Boolean muted = null;

  @SerializedName("currentlyInvestigated")
  private Boolean currentlyInvestigated = null;

  @SerializedName("currentlyMuted")
  private Boolean currentlyMuted = null;

  @SerializedName("logAnchor")
  private String logAnchor = null;

  @SerializedName("newFailure")
  private Boolean newFailure = null;

  @SerializedName("details")
  private String details = null;

  @SerializedName("additionalData")
  private String additionalData = null;

  @SerializedName("problem")
  private Problem problem = null;

  @SerializedName("mute")
  private Mute mute = null;

  @SerializedName("build")
  private Build build = null;

  public ProblemOccurrence id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ProblemOccurrence type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public ProblemOccurrence identity(String identity) {
    this.identity = identity;
    return this;
  }

   /**
   * Get identity
   * @return identity
  **/
  @ApiModelProperty(value = "")
  public String getIdentity() {
    return identity;
  }

  public void setIdentity(String identity) {
    this.identity = identity;
  }

  public ProblemOccurrence href(String href) {
    this.href = href;
    return this;
  }

   /**
   * Get href
   * @return href
  **/
  @ApiModelProperty(value = "")
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }

  public ProblemOccurrence muted(Boolean muted) {
    this.muted = muted;
    return this;
  }

   /**
   * Get muted
   * @return muted
  **/
  @ApiModelProperty(value = "")
  public Boolean isMuted() {
    return muted;
  }

  public void setMuted(Boolean muted) {
    this.muted = muted;
  }

  public ProblemOccurrence currentlyInvestigated(Boolean currentlyInvestigated) {
    this.currentlyInvestigated = currentlyInvestigated;
    return this;
  }

   /**
   * Get currentlyInvestigated
   * @return currentlyInvestigated
  **/
  @ApiModelProperty(value = "")
  public Boolean isCurrentlyInvestigated() {
    return currentlyInvestigated;
  }

  public void setCurrentlyInvestigated(Boolean currentlyInvestigated) {
    this.currentlyInvestigated = currentlyInvestigated;
  }

  public ProblemOccurrence currentlyMuted(Boolean currentlyMuted) {
    this.currentlyMuted = currentlyMuted;
    return this;
  }

   /**
   * Get currentlyMuted
   * @return currentlyMuted
  **/
  @ApiModelProperty(value = "")
  public Boolean isCurrentlyMuted() {
    return currentlyMuted;
  }

  public void setCurrentlyMuted(Boolean currentlyMuted) {
    this.currentlyMuted = currentlyMuted;
  }

  public ProblemOccurrence logAnchor(String logAnchor) {
    this.logAnchor = logAnchor;
    return this;
  }

   /**
   * Get logAnchor
   * @return logAnchor
  **/
  @ApiModelProperty(value = "")
  public String getLogAnchor() {
    return logAnchor;
  }

  public void setLogAnchor(String logAnchor) {
    this.logAnchor = logAnchor;
  }

  public ProblemOccurrence newFailure(Boolean newFailure) {
    this.newFailure = newFailure;
    return this;
  }

   /**
   * Get newFailure
   * @return newFailure
  **/
  @ApiModelProperty(value = "")
  public Boolean isNewFailure() {
    return newFailure;
  }

  public void setNewFailure(Boolean newFailure) {
    this.newFailure = newFailure;
  }

  public ProblemOccurrence details(String details) {
    this.details = details;
    return this;
  }

   /**
   * Get details
   * @return details
  **/
  @ApiModelProperty(value = "")
  public String getDetails() {
    return details;
  }

  public void setDetails(String details) {
    this.details = details;
  }

  public ProblemOccurrence additionalData(String additionalData) {
    this.additionalData = additionalData;
    return this;
  }

   /**
   * Get additionalData
   * @return additionalData
  **/
  @ApiModelProperty(value = "")
  public String getAdditionalData() {
    return additionalData;
  }

  public void setAdditionalData(String additionalData) {
    this.additionalData = additionalData;
  }

  public ProblemOccurrence problem(Problem problem) {
    this.problem = problem;
    return this;
  }

   /**
   * Get problem
   * @return problem
  **/
  @ApiModelProperty(value = "")
  public Problem getProblem() {
    return problem;
  }

  public void setProblem(Problem problem) {
    this.problem = problem;
  }

  public ProblemOccurrence mute(Mute mute) {
    this.mute = mute;
    return this;
  }

   /**
   * Get mute
   * @return mute
  **/
  @ApiModelProperty(value = "")
  public Mute getMute() {
    return mute;
  }

  public void setMute(Mute mute) {
    this.mute = mute;
  }

  public ProblemOccurrence build(Build build) {
    this.build = build;
    return this;
  }

   /**
   * Get build
   * @return build
  **/
  @ApiModelProperty(value = "")
  public Build getBuild() {
    return build;
  }

  public void setBuild(Build build) {
    this.build = build;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProblemOccurrence problemOccurrence = (ProblemOccurrence) o;
    return Objects.equals(this.id, problemOccurrence.id) &&
        Objects.equals(this.type, problemOccurrence.type) &&
        Objects.equals(this.identity, problemOccurrence.identity) &&
        Objects.equals(this.href, problemOccurrence.href) &&
        Objects.equals(this.muted, problemOccurrence.muted) &&
        Objects.equals(this.currentlyInvestigated, problemOccurrence.currentlyInvestigated) &&
        Objects.equals(this.currentlyMuted, problemOccurrence.currentlyMuted) &&
        Objects.equals(this.logAnchor, problemOccurrence.logAnchor) &&
        Objects.equals(this.newFailure, problemOccurrence.newFailure) &&
        Objects.equals(this.details, problemOccurrence.details) &&
        Objects.equals(this.additionalData, problemOccurrence.additionalData) &&
        Objects.equals(this.problem, problemOccurrence.problem) &&
        Objects.equals(this.mute, problemOccurrence.mute) &&
        Objects.equals(this.build, problemOccurrence.build);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, identity, href, muted, currentlyInvestigated, currentlyMuted, logAnchor, newFailure, details, additionalData, problem, mute, build);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProblemOccurrence {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    identity: ").append(toIndentedString(identity)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    muted: ").append(toIndentedString(muted)).append("\n");
    sb.append("    currentlyInvestigated: ").append(toIndentedString(currentlyInvestigated)).append("\n");
    sb.append("    currentlyMuted: ").append(toIndentedString(currentlyMuted)).append("\n");
    sb.append("    logAnchor: ").append(toIndentedString(logAnchor)).append("\n");
    sb.append("    newFailure: ").append(toIndentedString(newFailure)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    additionalData: ").append(toIndentedString(additionalData)).append("\n");
    sb.append("    problem: ").append(toIndentedString(problem)).append("\n");
    sb.append("    mute: ").append(toIndentedString(mute)).append("\n");
    sb.append("    build: ").append(toIndentedString(build)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

