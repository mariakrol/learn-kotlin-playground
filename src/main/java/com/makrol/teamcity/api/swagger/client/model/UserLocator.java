/*
 * TeamCity REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.makrol.teamcity.api.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * Represents a locator string for filtering User entities.
 */
@ApiModel(description = "Represents a locator string for filtering User entities.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-01-14T01:07:21.722+03:00")
public class UserLocator {
  @SerializedName("affectedGroup")
  private String affectedGroup = null;

  @SerializedName("current")
  private String current = null;

  @SerializedName("email")
  private String email = null;

  @SerializedName("group")
  private String group = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("item")
  private String item = null;

  @SerializedName("lastLogin")
  private OffsetDateTime lastLogin = null;

  @SerializedName("name")
  private String name = null;

  /**
   * Gets or Sets property
   */
  @JsonAdapter(PropertyEnum.Adapter.class)
  public enum PropertyEnum {
    EXISTS("exists"),
    
    NOT_EXISTS("not-exists"),
    
    EQUALS("equals"),
    
    DOES_NOT_EQUAL("does-not-equal"),
    
    STARTS_WITH("starts-with"),
    
    CONTAINS("contains"),
    
    DOES_NOT_CONTAIN("does-not-contain"),
    
    ENDS_WITH("ends-with"),
    
    ANY("any"),
    
    MATCHES("matches"),
    
    DOES_NOT_MATCH("does-not-match"),
    
    MORE_THAN("more-than"),
    
    NO_MORE_THAN("no-more-than"),
    
    LESS_THAN("less-than"),
    
    NO_LESS_THAN("no-less-than"),
    
    VER_MORE_THAN("ver-more-than"),
    
    VER_NO_MORE_THAN("ver-no-more-than"),
    
    VER_LESS_THAN("ver-less-than"),
    
    VER_NO_LESS_THAN("ver-no-less-than");

    private String value;

    PropertyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PropertyEnum fromValue(String text) {
      for (PropertyEnum b : PropertyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PropertyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PropertyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PropertyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PropertyEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("property")
  private PropertyEnum property = null;

  @SerializedName("role")
  private String role = null;

  @SerializedName("username")
  private String username = null;

  public UserLocator affectedGroup(String affectedGroup) {
    this.affectedGroup = affectedGroup;
    return this;
  }

   /**
   * User group (direct or indirect parent) locator.
   * @return affectedGroup
  **/
  @ApiModelProperty(value = "User group (direct or indirect parent) locator.")
  public String getAffectedGroup() {
    return affectedGroup;
  }

  public void setAffectedGroup(String affectedGroup) {
    this.affectedGroup = affectedGroup;
  }

  public UserLocator current(String current) {
    this.current = current;
    return this;
  }

   /**
   * Return user that has issued this request.
   * @return current
  **/
  @ApiModelProperty(value = "Return user that has issued this request.")
  public String getCurrent() {
    return current;
  }

  public void setCurrent(String current) {
    this.current = current;
  }

  public UserLocator email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @ApiModelProperty(value = "")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public UserLocator group(String group) {
    this.group = group;
    return this;
  }

   /**
   * User group (direct parent) locator.
   * @return group
  **/
  @ApiModelProperty(value = "User group (direct parent) locator.")
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }

  public UserLocator id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public UserLocator item(String item) {
    this.item = item;
    return this;
  }

   /**
   * Supply multiple locators and return a union of the results.
   * @return item
  **/
  @ApiModelProperty(value = "Supply multiple locators and return a union of the results.")
  public String getItem() {
    return item;
  }

  public void setItem(String item) {
    this.item = item;
  }

  public UserLocator lastLogin(OffsetDateTime lastLogin) {
    this.lastLogin = lastLogin;
    return this;
  }

   /**
   * Get lastLogin
   * @return lastLogin
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getLastLogin() {
    return lastLogin;
  }

  public void setLastLogin(OffsetDateTime lastLogin) {
    this.lastLogin = lastLogin;
  }

  public UserLocator name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public UserLocator property(PropertyEnum property) {
    this.property = property;
    return this;
  }

   /**
   * Get property
   * @return property
  **/
  @ApiModelProperty(value = "")
  public PropertyEnum getProperty() {
    return property;
  }

  public void setProperty(PropertyEnum property) {
    this.property = property;
  }

  public UserLocator role(String role) {
    this.role = role;
    return this;
  }

   /**
   * Role locator.
   * @return role
  **/
  @ApiModelProperty(value = "Role locator.")
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }

  public UserLocator username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @ApiModelProperty(value = "")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserLocator userLocator = (UserLocator) o;
    return Objects.equals(this.affectedGroup, userLocator.affectedGroup) &&
        Objects.equals(this.current, userLocator.current) &&
        Objects.equals(this.email, userLocator.email) &&
        Objects.equals(this.group, userLocator.group) &&
        Objects.equals(this.id, userLocator.id) &&
        Objects.equals(this.item, userLocator.item) &&
        Objects.equals(this.lastLogin, userLocator.lastLogin) &&
        Objects.equals(this.name, userLocator.name) &&
        Objects.equals(this.property, userLocator.property) &&
        Objects.equals(this.role, userLocator.role) &&
        Objects.equals(this.username, userLocator.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affectedGroup, current, email, group, id, item, lastLogin, name, property, role, username);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserLocator {\n");
    
    sb.append("    affectedGroup: ").append(toIndentedString(affectedGroup)).append("\n");
    sb.append("    current: ").append(toIndentedString(current)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    lastLogin: ").append(toIndentedString(lastLogin)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

