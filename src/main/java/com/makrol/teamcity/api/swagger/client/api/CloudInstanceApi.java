/*
 * TeamCity REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.makrol.teamcity.api.swagger.client.api;

import com.makrol.teamcity.api.swagger.client.ApiCallback;
import com.makrol.teamcity.api.swagger.client.ApiClient;
import com.makrol.teamcity.api.swagger.client.ApiException;
import com.makrol.teamcity.api.swagger.client.ApiResponse;
import com.makrol.teamcity.api.swagger.client.Configuration;
import com.makrol.teamcity.api.swagger.client.Pair;
import com.makrol.teamcity.api.swagger.client.ProgressRequestBody;
import com.makrol.teamcity.api.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.makrol.teamcity.api.swagger.client.model.CloudImage;
import com.makrol.teamcity.api.swagger.client.model.CloudImages;
import com.makrol.teamcity.api.swagger.client.model.CloudInstance;
import com.makrol.teamcity.api.swagger.client.model.CloudInstances;
import com.makrol.teamcity.api.swagger.client.model.CloudProfile;
import com.makrol.teamcity.api.swagger.client.model.CloudProfiles;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CloudInstanceApi {
    private ApiClient apiClient;

    public CloudInstanceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CloudInstanceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAllCloudImages
     * @param locator  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllCloudImagesCall(String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/cloud/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locator", locator));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllCloudImagesValidateBeforeCall(String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllCloudImagesCall(locator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all cloud images.
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @return CloudImages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudImages getAllCloudImages(String locator, String fields) throws ApiException {
        ApiResponse<CloudImages> resp = getAllCloudImagesWithHttpInfo(locator, fields);
        return resp.getData();
    }

    /**
     * Get all cloud images.
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;CloudImages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudImages> getAllCloudImagesWithHttpInfo(String locator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllCloudImagesValidateBeforeCall(locator, fields, null, null);
        Type localVarReturnType = new TypeToken<CloudImages>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all cloud images. (asynchronously)
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllCloudImagesAsync(String locator, String fields, final ApiCallback<CloudImages> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllCloudImagesValidateBeforeCall(locator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudImages>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllCloudInstances
     * @param locator  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllCloudInstancesCall(String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/cloud/instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locator", locator));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllCloudInstancesValidateBeforeCall(String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllCloudInstancesCall(locator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all cloud instances.
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @return CloudInstances
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudInstances getAllCloudInstances(String locator, String fields) throws ApiException {
        ApiResponse<CloudInstances> resp = getAllCloudInstancesWithHttpInfo(locator, fields);
        return resp.getData();
    }

    /**
     * Get all cloud instances.
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;CloudInstances&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudInstances> getAllCloudInstancesWithHttpInfo(String locator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllCloudInstancesValidateBeforeCall(locator, fields, null, null);
        Type localVarReturnType = new TypeToken<CloudInstances>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all cloud instances. (asynchronously)
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllCloudInstancesAsync(String locator, String fields, final ApiCallback<CloudInstances> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllCloudInstancesValidateBeforeCall(locator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudInstances>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllCloudProfiles
     * @param locator  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllCloudProfilesCall(String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/cloud/profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locator", locator));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllCloudProfilesValidateBeforeCall(String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllCloudProfilesCall(locator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all cloud profiles.
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @return CloudProfiles
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudProfiles getAllCloudProfiles(String locator, String fields) throws ApiException {
        ApiResponse<CloudProfiles> resp = getAllCloudProfilesWithHttpInfo(locator, fields);
        return resp.getData();
    }

    /**
     * Get all cloud profiles.
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;CloudProfiles&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudProfiles> getAllCloudProfilesWithHttpInfo(String locator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllCloudProfilesValidateBeforeCall(locator, fields, null, null);
        Type localVarReturnType = new TypeToken<CloudProfiles>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all cloud profiles. (asynchronously)
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllCloudProfilesAsync(String locator, String fields, final ApiCallback<CloudProfiles> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllCloudProfilesValidateBeforeCall(locator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudProfiles>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCloudImage
     * @param imageLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCloudImageCall(String imageLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/cloud/images/{imageLocator}"
            .replaceAll("\\{" + "imageLocator" + "\\}", apiClient.escapeString(imageLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCloudImageValidateBeforeCall(String imageLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'imageLocator' is set
        if (imageLocator == null) {
            throw new ApiException("Missing the required parameter 'imageLocator' when calling getCloudImage(Async)");
        }
        

        com.squareup.okhttp.Call call = getCloudImageCall(imageLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get cloud image matching the locator.
     * 
     * @param imageLocator  (required)
     * @param fields  (optional)
     * @return CloudImage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudImage getCloudImage(String imageLocator, String fields) throws ApiException {
        ApiResponse<CloudImage> resp = getCloudImageWithHttpInfo(imageLocator, fields);
        return resp.getData();
    }

    /**
     * Get cloud image matching the locator.
     * 
     * @param imageLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;CloudImage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudImage> getCloudImageWithHttpInfo(String imageLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getCloudImageValidateBeforeCall(imageLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<CloudImage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get cloud image matching the locator. (asynchronously)
     * 
     * @param imageLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCloudImageAsync(String imageLocator, String fields, final ApiCallback<CloudImage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCloudImageValidateBeforeCall(imageLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudImage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCloudInstance
     * @param instanceLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCloudInstanceCall(String instanceLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/cloud/instances/{instanceLocator}"
            .replaceAll("\\{" + "instanceLocator" + "\\}", apiClient.escapeString(instanceLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCloudInstanceValidateBeforeCall(String instanceLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'instanceLocator' is set
        if (instanceLocator == null) {
            throw new ApiException("Missing the required parameter 'instanceLocator' when calling getCloudInstance(Async)");
        }
        

        com.squareup.okhttp.Call call = getCloudInstanceCall(instanceLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get cloud instance matching the locator.
     * 
     * @param instanceLocator  (required)
     * @param fields  (optional)
     * @return CloudInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudInstance getCloudInstance(String instanceLocator, String fields) throws ApiException {
        ApiResponse<CloudInstance> resp = getCloudInstanceWithHttpInfo(instanceLocator, fields);
        return resp.getData();
    }

    /**
     * Get cloud instance matching the locator.
     * 
     * @param instanceLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;CloudInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudInstance> getCloudInstanceWithHttpInfo(String instanceLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getCloudInstanceValidateBeforeCall(instanceLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<CloudInstance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get cloud instance matching the locator. (asynchronously)
     * 
     * @param instanceLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCloudInstanceAsync(String instanceLocator, String fields, final ApiCallback<CloudInstance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCloudInstanceValidateBeforeCall(instanceLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudInstance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCloudProfile
     * @param profileLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCloudProfileCall(String profileLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/cloud/profiles/{profileLocator}"
            .replaceAll("\\{" + "profileLocator" + "\\}", apiClient.escapeString(profileLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCloudProfileValidateBeforeCall(String profileLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'profileLocator' is set
        if (profileLocator == null) {
            throw new ApiException("Missing the required parameter 'profileLocator' when calling getCloudProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = getCloudProfileCall(profileLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get cloud profile matching the locator.
     * 
     * @param profileLocator  (required)
     * @param fields  (optional)
     * @return CloudProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudProfile getCloudProfile(String profileLocator, String fields) throws ApiException {
        ApiResponse<CloudProfile> resp = getCloudProfileWithHttpInfo(profileLocator, fields);
        return resp.getData();
    }

    /**
     * Get cloud profile matching the locator.
     * 
     * @param profileLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;CloudProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudProfile> getCloudProfileWithHttpInfo(String profileLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getCloudProfileValidateBeforeCall(profileLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<CloudProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get cloud profile matching the locator. (asynchronously)
     * 
     * @param profileLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCloudProfileAsync(String profileLocator, String fields, final ApiCallback<CloudProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCloudProfileValidateBeforeCall(profileLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startInstance
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startInstanceCall(CloudInstance body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/cloud/instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startInstanceValidateBeforeCall(CloudInstance body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = startInstanceCall(body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Start a new cloud instance.
     * 
     * @param body  (optional)
     * @param fields  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void startInstance(CloudInstance body, String fields) throws ApiException {
        startInstanceWithHttpInfo(body, fields);
    }

    /**
     * Start a new cloud instance.
     * 
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> startInstanceWithHttpInfo(CloudInstance body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = startInstanceValidateBeforeCall(body, fields, null, null);
        return apiClient.execute(call);
    }

    /**
     * Start a new cloud instance. (asynchronously)
     * 
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startInstanceAsync(CloudInstance body, String fields, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startInstanceValidateBeforeCall(body, fields, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for stopInstance
     * @param instanceLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopInstanceCall(String instanceLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/cloud/instances/{instanceLocator}"
            .replaceAll("\\{" + "instanceLocator" + "\\}", apiClient.escapeString(instanceLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopInstanceValidateBeforeCall(String instanceLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'instanceLocator' is set
        if (instanceLocator == null) {
            throw new ApiException("Missing the required parameter 'instanceLocator' when calling stopInstance(Async)");
        }
        

        com.squareup.okhttp.Call call = stopInstanceCall(instanceLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Stop cloud instance matching the locator.
     * 
     * @param instanceLocator  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void stopInstance(String instanceLocator) throws ApiException {
        stopInstanceWithHttpInfo(instanceLocator);
    }

    /**
     * Stop cloud instance matching the locator.
     * 
     * @param instanceLocator  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> stopInstanceWithHttpInfo(String instanceLocator) throws ApiException {
        com.squareup.okhttp.Call call = stopInstanceValidateBeforeCall(instanceLocator, null, null);
        return apiClient.execute(call);
    }

    /**
     * Stop cloud instance matching the locator. (asynchronously)
     * 
     * @param instanceLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopInstanceAsync(String instanceLocator, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopInstanceValidateBeforeCall(instanceLocator, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
