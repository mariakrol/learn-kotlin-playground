/*
 * TeamCity REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.makrol.teamcity.api.swagger.client.api;

import com.makrol.teamcity.api.swagger.client.ApiCallback;
import com.makrol.teamcity.api.swagger.client.ApiClient;
import com.makrol.teamcity.api.swagger.client.ApiException;
import com.makrol.teamcity.api.swagger.client.ApiResponse;
import com.makrol.teamcity.api.swagger.client.Configuration;
import com.makrol.teamcity.api.swagger.client.Pair;
import com.makrol.teamcity.api.swagger.client.ProgressRequestBody;
import com.makrol.teamcity.api.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.makrol.teamcity.api.swagger.client.model.Agent;
import com.makrol.teamcity.api.swagger.client.model.AgentPool;
import com.makrol.teamcity.api.swagger.client.model.AgentPools;
import com.makrol.teamcity.api.swagger.client.model.Agents;
import com.makrol.teamcity.api.swagger.client.model.Project;
import com.makrol.teamcity.api.swagger.client.model.Projects;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AgentPoolApi {
    private ApiClient apiClient;

    public AgentPoolApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AgentPoolApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addAgentToAgentPool
     * @param agentPoolLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addAgentToAgentPoolCall(String agentPoolLocator, Agent body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/agentPools/{agentPoolLocator}/agents"
            .replaceAll("\\{" + "agentPoolLocator" + "\\}", apiClient.escapeString(agentPoolLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addAgentToAgentPoolValidateBeforeCall(String agentPoolLocator, Agent body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'agentPoolLocator' is set
        if (agentPoolLocator == null) {
            throw new ApiException("Missing the required parameter 'agentPoolLocator' when calling addAgentToAgentPool(Async)");
        }
        

        com.squareup.okhttp.Call call = addAgentToAgentPoolCall(agentPoolLocator, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Assign the agent to the matching agent pool.
     * 
     * @param agentPoolLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return Agent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Agent addAgentToAgentPool(String agentPoolLocator, Agent body, String fields) throws ApiException {
        ApiResponse<Agent> resp = addAgentToAgentPoolWithHttpInfo(agentPoolLocator, body, fields);
        return resp.getData();
    }

    /**
     * Assign the agent to the matching agent pool.
     * 
     * @param agentPoolLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Agent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Agent> addAgentToAgentPoolWithHttpInfo(String agentPoolLocator, Agent body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = addAgentToAgentPoolValidateBeforeCall(agentPoolLocator, body, fields, null, null);
        Type localVarReturnType = new TypeToken<Agent>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Assign the agent to the matching agent pool. (asynchronously)
     * 
     * @param agentPoolLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addAgentToAgentPoolAsync(String agentPoolLocator, Agent body, String fields, final ApiCallback<Agent> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addAgentToAgentPoolValidateBeforeCall(agentPoolLocator, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Agent>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addProjectToAgentPool
     * @param agentPoolLocator  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addProjectToAgentPoolCall(String agentPoolLocator, Project body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/agentPools/{agentPoolLocator}/projects"
            .replaceAll("\\{" + "agentPoolLocator" + "\\}", apiClient.escapeString(agentPoolLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addProjectToAgentPoolValidateBeforeCall(String agentPoolLocator, Project body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'agentPoolLocator' is set
        if (agentPoolLocator == null) {
            throw new ApiException("Missing the required parameter 'agentPoolLocator' when calling addProjectToAgentPool(Async)");
        }
        

        com.squareup.okhttp.Call call = addProjectToAgentPoolCall(agentPoolLocator, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Assign the project to the matching agent pool.
     * 
     * @param agentPoolLocator  (required)
     * @param body  (optional)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Project addProjectToAgentPool(String agentPoolLocator, Project body) throws ApiException {
        ApiResponse<Project> resp = addProjectToAgentPoolWithHttpInfo(agentPoolLocator, body);
        return resp.getData();
    }

    /**
     * Assign the project to the matching agent pool.
     * 
     * @param agentPoolLocator  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Project> addProjectToAgentPoolWithHttpInfo(String agentPoolLocator, Project body) throws ApiException {
        com.squareup.okhttp.Call call = addProjectToAgentPoolValidateBeforeCall(agentPoolLocator, body, null, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Assign the project to the matching agent pool. (asynchronously)
     * 
     * @param agentPoolLocator  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addProjectToAgentPoolAsync(String agentPoolLocator, Project body, final ApiCallback<Project> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addProjectToAgentPoolValidateBeforeCall(agentPoolLocator, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAgentPool
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAgentPoolCall(AgentPool body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/agentPools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAgentPoolValidateBeforeCall(AgentPool body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createAgentPoolCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new agent pool.
     * 
     * @param body  (optional)
     * @return AgentPool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AgentPool createAgentPool(AgentPool body) throws ApiException {
        ApiResponse<AgentPool> resp = createAgentPoolWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a new agent pool.
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;AgentPool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AgentPool> createAgentPoolWithHttpInfo(AgentPool body) throws ApiException {
        com.squareup.okhttp.Call call = createAgentPoolValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<AgentPool>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new agent pool. (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAgentPoolAsync(AgentPool body, final ApiCallback<AgentPool> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAgentPoolValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AgentPool>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAgentPool
     * @param agentPoolLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAgentPoolCall(String agentPoolLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/agentPools/{agentPoolLocator}"
            .replaceAll("\\{" + "agentPoolLocator" + "\\}", apiClient.escapeString(agentPoolLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAgentPoolValidateBeforeCall(String agentPoolLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'agentPoolLocator' is set
        if (agentPoolLocator == null) {
            throw new ApiException("Missing the required parameter 'agentPoolLocator' when calling deleteAgentPool(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAgentPoolCall(agentPoolLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete the agent pool matching the locator.
     * 
     * @param agentPoolLocator  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAgentPool(String agentPoolLocator) throws ApiException {
        deleteAgentPoolWithHttpInfo(agentPoolLocator);
    }

    /**
     * Delete the agent pool matching the locator.
     * 
     * @param agentPoolLocator  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAgentPoolWithHttpInfo(String agentPoolLocator) throws ApiException {
        com.squareup.okhttp.Call call = deleteAgentPoolValidateBeforeCall(agentPoolLocator, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete the agent pool matching the locator. (asynchronously)
     * 
     * @param agentPoolLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAgentPoolAsync(String agentPoolLocator, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAgentPoolValidateBeforeCall(agentPoolLocator, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAllProjectsFromAgentPool
     * @param agentPoolLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAllProjectsFromAgentPoolCall(String agentPoolLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/agentPools/{agentPoolLocator}/projects"
            .replaceAll("\\{" + "agentPoolLocator" + "\\}", apiClient.escapeString(agentPoolLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAllProjectsFromAgentPoolValidateBeforeCall(String agentPoolLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'agentPoolLocator' is set
        if (agentPoolLocator == null) {
            throw new ApiException("Missing the required parameter 'agentPoolLocator' when calling deleteAllProjectsFromAgentPool(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAllProjectsFromAgentPoolCall(agentPoolLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Unassign all projects from the matching agent pool.
     * 
     * @param agentPoolLocator  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAllProjectsFromAgentPool(String agentPoolLocator) throws ApiException {
        deleteAllProjectsFromAgentPoolWithHttpInfo(agentPoolLocator);
    }

    /**
     * Unassign all projects from the matching agent pool.
     * 
     * @param agentPoolLocator  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAllProjectsFromAgentPoolWithHttpInfo(String agentPoolLocator) throws ApiException {
        com.squareup.okhttp.Call call = deleteAllProjectsFromAgentPoolValidateBeforeCall(agentPoolLocator, null, null);
        return apiClient.execute(call);
    }

    /**
     * Unassign all projects from the matching agent pool. (asynchronously)
     * 
     * @param agentPoolLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAllProjectsFromAgentPoolAsync(String agentPoolLocator, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAllProjectsFromAgentPoolValidateBeforeCall(agentPoolLocator, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteProjectFromAgentPool
     * @param agentPoolLocator  (required)
     * @param projectLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteProjectFromAgentPoolCall(String agentPoolLocator, String projectLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/agentPools/{agentPoolLocator}/projects/{projectLocator}"
            .replaceAll("\\{" + "agentPoolLocator" + "\\}", apiClient.escapeString(agentPoolLocator.toString()))
            .replaceAll("\\{" + "projectLocator" + "\\}", apiClient.escapeString(projectLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteProjectFromAgentPoolValidateBeforeCall(String agentPoolLocator, String projectLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'agentPoolLocator' is set
        if (agentPoolLocator == null) {
            throw new ApiException("Missing the required parameter 'agentPoolLocator' when calling deleteProjectFromAgentPool(Async)");
        }
        
        // verify the required parameter 'projectLocator' is set
        if (projectLocator == null) {
            throw new ApiException("Missing the required parameter 'projectLocator' when calling deleteProjectFromAgentPool(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteProjectFromAgentPoolCall(agentPoolLocator, projectLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Unassign the project from the matching agent pool.
     * 
     * @param agentPoolLocator  (required)
     * @param projectLocator  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteProjectFromAgentPool(String agentPoolLocator, String projectLocator) throws ApiException {
        deleteProjectFromAgentPoolWithHttpInfo(agentPoolLocator, projectLocator);
    }

    /**
     * Unassign the project from the matching agent pool.
     * 
     * @param agentPoolLocator  (required)
     * @param projectLocator  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteProjectFromAgentPoolWithHttpInfo(String agentPoolLocator, String projectLocator) throws ApiException {
        com.squareup.okhttp.Call call = deleteProjectFromAgentPoolValidateBeforeCall(agentPoolLocator, projectLocator, null, null);
        return apiClient.execute(call);
    }

    /**
     * Unassign the project from the matching agent pool. (asynchronously)
     * 
     * @param agentPoolLocator  (required)
     * @param projectLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProjectFromAgentPoolAsync(String agentPoolLocator, String projectLocator, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProjectFromAgentPoolValidateBeforeCall(agentPoolLocator, projectLocator, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAgentPoolOfAgentPool
     * @param agentPoolLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAgentPoolOfAgentPoolCall(String agentPoolLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/agentPools/{agentPoolLocator}"
            .replaceAll("\\{" + "agentPoolLocator" + "\\}", apiClient.escapeString(agentPoolLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAgentPoolOfAgentPoolValidateBeforeCall(String agentPoolLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'agentPoolLocator' is set
        if (agentPoolLocator == null) {
            throw new ApiException("Missing the required parameter 'agentPoolLocator' when calling getAgentPoolOfAgentPool(Async)");
        }
        

        com.squareup.okhttp.Call call = getAgentPoolOfAgentPoolCall(agentPoolLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the agent pool matching the locator.
     * 
     * @param agentPoolLocator  (required)
     * @param fields  (optional)
     * @return AgentPool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AgentPool getAgentPoolOfAgentPool(String agentPoolLocator, String fields) throws ApiException {
        ApiResponse<AgentPool> resp = getAgentPoolOfAgentPoolWithHttpInfo(agentPoolLocator, fields);
        return resp.getData();
    }

    /**
     * Get the agent pool matching the locator.
     * 
     * @param agentPoolLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;AgentPool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AgentPool> getAgentPoolOfAgentPoolWithHttpInfo(String agentPoolLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAgentPoolOfAgentPoolValidateBeforeCall(agentPoolLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<AgentPool>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the agent pool matching the locator. (asynchronously)
     * 
     * @param agentPoolLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAgentPoolOfAgentPoolAsync(String agentPoolLocator, String fields, final ApiCallback<AgentPool> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAgentPoolOfAgentPoolValidateBeforeCall(agentPoolLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AgentPool>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllAgentPools
     * @param locator  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllAgentPoolsCall(String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/agentPools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locator", locator));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllAgentPoolsValidateBeforeCall(String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllAgentPoolsCall(locator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all agent pools.
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @return AgentPools
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AgentPools getAllAgentPools(String locator, String fields) throws ApiException {
        ApiResponse<AgentPools> resp = getAllAgentPoolsWithHttpInfo(locator, fields);
        return resp.getData();
    }

    /**
     * Get all agent pools.
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;AgentPools&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AgentPools> getAllAgentPoolsWithHttpInfo(String locator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllAgentPoolsValidateBeforeCall(locator, fields, null, null);
        Type localVarReturnType = new TypeToken<AgentPools>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all agent pools. (asynchronously)
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllAgentPoolsAsync(String locator, String fields, final ApiCallback<AgentPools> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllAgentPoolsValidateBeforeCall(locator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AgentPools>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllAgentsFromAgentPool
     * @param agentPoolLocator  (required)
     * @param locator  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllAgentsFromAgentPoolCall(String agentPoolLocator, String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/agentPools/{agentPoolLocator}/agents"
            .replaceAll("\\{" + "agentPoolLocator" + "\\}", apiClient.escapeString(agentPoolLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locator", locator));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllAgentsFromAgentPoolValidateBeforeCall(String agentPoolLocator, String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'agentPoolLocator' is set
        if (agentPoolLocator == null) {
            throw new ApiException("Missing the required parameter 'agentPoolLocator' when calling getAllAgentsFromAgentPool(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllAgentsFromAgentPoolCall(agentPoolLocator, locator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the agent of the matching agent pool.
     * 
     * @param agentPoolLocator  (required)
     * @param locator  (optional)
     * @param fields  (optional)
     * @return Agents
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Agents getAllAgentsFromAgentPool(String agentPoolLocator, String locator, String fields) throws ApiException {
        ApiResponse<Agents> resp = getAllAgentsFromAgentPoolWithHttpInfo(agentPoolLocator, locator, fields);
        return resp.getData();
    }

    /**
     * Get the agent of the matching agent pool.
     * 
     * @param agentPoolLocator  (required)
     * @param locator  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Agents&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Agents> getAllAgentsFromAgentPoolWithHttpInfo(String agentPoolLocator, String locator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllAgentsFromAgentPoolValidateBeforeCall(agentPoolLocator, locator, fields, null, null);
        Type localVarReturnType = new TypeToken<Agents>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the agent of the matching agent pool. (asynchronously)
     * 
     * @param agentPoolLocator  (required)
     * @param locator  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllAgentsFromAgentPoolAsync(String agentPoolLocator, String locator, String fields, final ApiCallback<Agents> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllAgentsFromAgentPoolValidateBeforeCall(agentPoolLocator, locator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Agents>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllProjectsFromAgentPool
     * @param agentPoolLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllProjectsFromAgentPoolCall(String agentPoolLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/agentPools/{agentPoolLocator}/projects"
            .replaceAll("\\{" + "agentPoolLocator" + "\\}", apiClient.escapeString(agentPoolLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllProjectsFromAgentPoolValidateBeforeCall(String agentPoolLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'agentPoolLocator' is set
        if (agentPoolLocator == null) {
            throw new ApiException("Missing the required parameter 'agentPoolLocator' when calling getAllProjectsFromAgentPool(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllProjectsFromAgentPoolCall(agentPoolLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all projects of the matching agent pool.
     * 
     * @param agentPoolLocator  (required)
     * @param fields  (optional)
     * @return Projects
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Projects getAllProjectsFromAgentPool(String agentPoolLocator, String fields) throws ApiException {
        ApiResponse<Projects> resp = getAllProjectsFromAgentPoolWithHttpInfo(agentPoolLocator, fields);
        return resp.getData();
    }

    /**
     * Get all projects of the matching agent pool.
     * 
     * @param agentPoolLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Projects&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Projects> getAllProjectsFromAgentPoolWithHttpInfo(String agentPoolLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllProjectsFromAgentPoolValidateBeforeCall(agentPoolLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<Projects>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all projects of the matching agent pool. (asynchronously)
     * 
     * @param agentPoolLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllProjectsFromAgentPoolAsync(String agentPoolLocator, String fields, final ApiCallback<Projects> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllProjectsFromAgentPoolValidateBeforeCall(agentPoolLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Projects>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFieldFromAgentPool
     * @param agentPoolLocator  (required)
     * @param field  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFieldFromAgentPoolCall(String agentPoolLocator, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/agentPools/{agentPoolLocator}/{field}"
            .replaceAll("\\{" + "agentPoolLocator" + "\\}", apiClient.escapeString(agentPoolLocator.toString()))
            .replaceAll("\\{" + "field" + "\\}", apiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFieldFromAgentPoolValidateBeforeCall(String agentPoolLocator, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'agentPoolLocator' is set
        if (agentPoolLocator == null) {
            throw new ApiException("Missing the required parameter 'agentPoolLocator' when calling getFieldFromAgentPool(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getFieldFromAgentPool(Async)");
        }
        

        com.squareup.okhttp.Call call = getFieldFromAgentPoolCall(agentPoolLocator, field, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a field of the matching agent pool.
     * 
     * @param agentPoolLocator  (required)
     * @param field  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getFieldFromAgentPool(String agentPoolLocator, String field) throws ApiException {
        ApiResponse<String> resp = getFieldFromAgentPoolWithHttpInfo(agentPoolLocator, field);
        return resp.getData();
    }

    /**
     * Get a field of the matching agent pool.
     * 
     * @param agentPoolLocator  (required)
     * @param field  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getFieldFromAgentPoolWithHttpInfo(String agentPoolLocator, String field) throws ApiException {
        com.squareup.okhttp.Call call = getFieldFromAgentPoolValidateBeforeCall(agentPoolLocator, field, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a field of the matching agent pool. (asynchronously)
     * 
     * @param agentPoolLocator  (required)
     * @param field  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFieldFromAgentPoolAsync(String agentPoolLocator, String field, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFieldFromAgentPoolValidateBeforeCall(agentPoolLocator, field, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setAgentPoolField
     * @param agentPoolLocator  (required)
     * @param field  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setAgentPoolFieldCall(String agentPoolLocator, String field, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/agentPools/{agentPoolLocator}/{field}"
            .replaceAll("\\{" + "agentPoolLocator" + "\\}", apiClient.escapeString(agentPoolLocator.toString()))
            .replaceAll("\\{" + "field" + "\\}", apiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setAgentPoolFieldValidateBeforeCall(String agentPoolLocator, String field, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'agentPoolLocator' is set
        if (agentPoolLocator == null) {
            throw new ApiException("Missing the required parameter 'agentPoolLocator' when calling setAgentPoolField(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling setAgentPoolField(Async)");
        }
        

        com.squareup.okhttp.Call call = setAgentPoolFieldCall(agentPoolLocator, field, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a field of the matching agent pool.
     * 
     * @param agentPoolLocator  (required)
     * @param field  (required)
     * @param body  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String setAgentPoolField(String agentPoolLocator, String field, String body) throws ApiException {
        ApiResponse<String> resp = setAgentPoolFieldWithHttpInfo(agentPoolLocator, field, body);
        return resp.getData();
    }

    /**
     * Update a field of the matching agent pool.
     * 
     * @param agentPoolLocator  (required)
     * @param field  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> setAgentPoolFieldWithHttpInfo(String agentPoolLocator, String field, String body) throws ApiException {
        com.squareup.okhttp.Call call = setAgentPoolFieldValidateBeforeCall(agentPoolLocator, field, body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a field of the matching agent pool. (asynchronously)
     * 
     * @param agentPoolLocator  (required)
     * @param field  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setAgentPoolFieldAsync(String agentPoolLocator, String field, String body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setAgentPoolFieldValidateBeforeCall(agentPoolLocator, field, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setAgentPoolProjects
     * @param agentPoolLocator  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setAgentPoolProjectsCall(String agentPoolLocator, Projects body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/agentPools/{agentPoolLocator}/projects"
            .replaceAll("\\{" + "agentPoolLocator" + "\\}", apiClient.escapeString(agentPoolLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setAgentPoolProjectsValidateBeforeCall(String agentPoolLocator, Projects body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'agentPoolLocator' is set
        if (agentPoolLocator == null) {
            throw new ApiException("Missing the required parameter 'agentPoolLocator' when calling setAgentPoolProjects(Async)");
        }
        

        com.squareup.okhttp.Call call = setAgentPoolProjectsCall(agentPoolLocator, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update projects of the matching agent pool.
     * 
     * @param agentPoolLocator  (required)
     * @param body  (optional)
     * @return Projects
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Projects setAgentPoolProjects(String agentPoolLocator, Projects body) throws ApiException {
        ApiResponse<Projects> resp = setAgentPoolProjectsWithHttpInfo(agentPoolLocator, body);
        return resp.getData();
    }

    /**
     * Update projects of the matching agent pool.
     * 
     * @param agentPoolLocator  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Projects&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Projects> setAgentPoolProjectsWithHttpInfo(String agentPoolLocator, Projects body) throws ApiException {
        com.squareup.okhttp.Call call = setAgentPoolProjectsValidateBeforeCall(agentPoolLocator, body, null, null);
        Type localVarReturnType = new TypeToken<Projects>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update projects of the matching agent pool. (asynchronously)
     * 
     * @param agentPoolLocator  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setAgentPoolProjectsAsync(String agentPoolLocator, Projects body, final ApiCallback<Projects> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setAgentPoolProjectsValidateBeforeCall(agentPoolLocator, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Projects>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
