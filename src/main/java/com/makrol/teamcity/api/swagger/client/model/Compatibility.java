/*
 * TeamCity REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.makrol.teamcity.api.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.makrol.teamcity.api.swagger.client.model.Agent;
import com.makrol.teamcity.api.swagger.client.model.BuildType;
import com.makrol.teamcity.api.swagger.client.model.Requirements;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Represents a compatibility relation between the agent and build configuration.
 */
@ApiModel(description = "Represents a compatibility relation between the agent and build configuration.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-01-14T01:07:21.722+03:00")
public class Compatibility {
  @SerializedName("compatible")
  private Boolean compatible = null;

  @SerializedName("agent")
  private Agent agent = null;

  @SerializedName("buildType")
  private BuildType buildType = null;

  @SerializedName("unmetRequirements")
  private Requirements unmetRequirements = null;

  public Compatibility compatible(Boolean compatible) {
    this.compatible = compatible;
    return this;
  }

   /**
   * Get compatible
   * @return compatible
  **/
  @ApiModelProperty(value = "")
  public Boolean isCompatible() {
    return compatible;
  }

  public void setCompatible(Boolean compatible) {
    this.compatible = compatible;
  }

  public Compatibility agent(Agent agent) {
    this.agent = agent;
    return this;
  }

   /**
   * Get agent
   * @return agent
  **/
  @ApiModelProperty(value = "")
  public Agent getAgent() {
    return agent;
  }

  public void setAgent(Agent agent) {
    this.agent = agent;
  }

  public Compatibility buildType(BuildType buildType) {
    this.buildType = buildType;
    return this;
  }

   /**
   * Get buildType
   * @return buildType
  **/
  @ApiModelProperty(value = "")
  public BuildType getBuildType() {
    return buildType;
  }

  public void setBuildType(BuildType buildType) {
    this.buildType = buildType;
  }

  public Compatibility unmetRequirements(Requirements unmetRequirements) {
    this.unmetRequirements = unmetRequirements;
    return this;
  }

   /**
   * Get unmetRequirements
   * @return unmetRequirements
  **/
  @ApiModelProperty(value = "")
  public Requirements getUnmetRequirements() {
    return unmetRequirements;
  }

  public void setUnmetRequirements(Requirements unmetRequirements) {
    this.unmetRequirements = unmetRequirements;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Compatibility compatibility = (Compatibility) o;
    return Objects.equals(this.compatible, compatibility.compatible) &&
        Objects.equals(this.agent, compatibility.agent) &&
        Objects.equals(this.buildType, compatibility.buildType) &&
        Objects.equals(this.unmetRequirements, compatibility.unmetRequirements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compatible, agent, buildType, unmetRequirements);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Compatibility {\n");
    
    sb.append("    compatible: ").append(toIndentedString(compatible)).append("\n");
    sb.append("    agent: ").append(toIndentedString(agent)).append("\n");
    sb.append("    buildType: ").append(toIndentedString(buildType)).append("\n");
    sb.append("    unmetRequirements: ").append(toIndentedString(unmetRequirements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

