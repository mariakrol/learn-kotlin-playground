/*
 * TeamCity REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.makrol.teamcity.api.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Represents a locator string for filtering Problem entities.
 */
@ApiModel(description = "Represents a locator string for filtering Problem entities.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-01-14T01:07:21.722+03:00")
public class ProblemLocator {
  @SerializedName("affectedProject")
  private String affectedProject = null;

  @SerializedName("build")
  private String build = null;

  @SerializedName("count")
  private Integer count = null;

  @SerializedName("currentlyFailing")
  private Boolean currentlyFailing = null;

  @SerializedName("currentlyInvestigated")
  private Boolean currentlyInvestigated = null;

  @SerializedName("currentlyMuted")
  private Boolean currentlyMuted = null;

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("identity")
  private String identity = null;

  @SerializedName("item")
  private String item = null;

  @SerializedName("lookupLimit")
  private Integer lookupLimit = null;

  @SerializedName("start")
  private Integer start = null;

  @SerializedName("type")
  private String type = null;

  public ProblemLocator affectedProject(String affectedProject) {
    this.affectedProject = affectedProject;
    return this;
  }

   /**
   * Project (direct or indirect parent) locator.
   * @return affectedProject
  **/
  @ApiModelProperty(value = "Project (direct or indirect parent) locator.")
  public String getAffectedProject() {
    return affectedProject;
  }

  public void setAffectedProject(String affectedProject) {
    this.affectedProject = affectedProject;
  }

  public ProblemLocator build(String build) {
    this.build = build;
    return this;
  }

   /**
   * Build locator.
   * @return build
  **/
  @ApiModelProperty(value = "Build locator.")
  public String getBuild() {
    return build;
  }

  public void setBuild(String build) {
    this.build = build;
  }

  public ProblemLocator count(Integer count) {
    this.count = count;
    return this;
  }

   /**
   * For paginated calls, how many entities to return per page.
   * @return count
  **/
  @ApiModelProperty(value = "For paginated calls, how many entities to return per page.")
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }

  public ProblemLocator currentlyFailing(Boolean currentlyFailing) {
    this.currentlyFailing = currentlyFailing;
    return this;
  }

   /**
   * Is currently failing.
   * @return currentlyFailing
  **/
  @ApiModelProperty(value = "Is currently failing.")
  public Boolean isCurrentlyFailing() {
    return currentlyFailing;
  }

  public void setCurrentlyFailing(Boolean currentlyFailing) {
    this.currentlyFailing = currentlyFailing;
  }

  public ProblemLocator currentlyInvestigated(Boolean currentlyInvestigated) {
    this.currentlyInvestigated = currentlyInvestigated;
    return this;
  }

   /**
   * Is currently investigated.
   * @return currentlyInvestigated
  **/
  @ApiModelProperty(value = "Is currently investigated.")
  public Boolean isCurrentlyInvestigated() {
    return currentlyInvestigated;
  }

  public void setCurrentlyInvestigated(Boolean currentlyInvestigated) {
    this.currentlyInvestigated = currentlyInvestigated;
  }

  public ProblemLocator currentlyMuted(Boolean currentlyMuted) {
    this.currentlyMuted = currentlyMuted;
    return this;
  }

   /**
   * Is currently muted.
   * @return currentlyMuted
  **/
  @ApiModelProperty(value = "Is currently muted.")
  public Boolean isCurrentlyMuted() {
    return currentlyMuted;
  }

  public void setCurrentlyMuted(Boolean currentlyMuted) {
    this.currentlyMuted = currentlyMuted;
  }

  public ProblemLocator id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Entity ID.
   * @return id
  **/
  @ApiModelProperty(value = "Entity ID.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public ProblemLocator identity(String identity) {
    this.identity = identity;
    return this;
  }

   /**
   * Get identity
   * @return identity
  **/
  @ApiModelProperty(value = "")
  public String getIdentity() {
    return identity;
  }

  public void setIdentity(String identity) {
    this.identity = identity;
  }

  public ProblemLocator item(String item) {
    this.item = item;
    return this;
  }

   /**
   * Supply multiple locators and return a union of the results.
   * @return item
  **/
  @ApiModelProperty(value = "Supply multiple locators and return a union of the results.")
  public String getItem() {
    return item;
  }

  public void setItem(String item) {
    this.item = item;
  }

  public ProblemLocator lookupLimit(Integer lookupLimit) {
    this.lookupLimit = lookupLimit;
    return this;
  }

   /**
   * Limit processing to the latest &#x60;&lt;lookupLimit&gt;&#x60; entities.
   * @return lookupLimit
  **/
  @ApiModelProperty(value = "Limit processing to the latest `<lookupLimit>` entities.")
  public Integer getLookupLimit() {
    return lookupLimit;
  }

  public void setLookupLimit(Integer lookupLimit) {
    this.lookupLimit = lookupLimit;
  }

  public ProblemLocator start(Integer start) {
    this.start = start;
    return this;
  }

   /**
   * For paginated calls, from which entity to start rendering the page.
   * @return start
  **/
  @ApiModelProperty(value = "For paginated calls, from which entity to start rendering the page.")
  public Integer getStart() {
    return start;
  }

  public void setStart(Integer start) {
    this.start = start;
  }

  public ProblemLocator type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProblemLocator problemLocator = (ProblemLocator) o;
    return Objects.equals(this.affectedProject, problemLocator.affectedProject) &&
        Objects.equals(this.build, problemLocator.build) &&
        Objects.equals(this.count, problemLocator.count) &&
        Objects.equals(this.currentlyFailing, problemLocator.currentlyFailing) &&
        Objects.equals(this.currentlyInvestigated, problemLocator.currentlyInvestigated) &&
        Objects.equals(this.currentlyMuted, problemLocator.currentlyMuted) &&
        Objects.equals(this.id, problemLocator.id) &&
        Objects.equals(this.identity, problemLocator.identity) &&
        Objects.equals(this.item, problemLocator.item) &&
        Objects.equals(this.lookupLimit, problemLocator.lookupLimit) &&
        Objects.equals(this.start, problemLocator.start) &&
        Objects.equals(this.type, problemLocator.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affectedProject, build, count, currentlyFailing, currentlyInvestigated, currentlyMuted, id, identity, item, lookupLimit, start, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProblemLocator {\n");
    
    sb.append("    affectedProject: ").append(toIndentedString(affectedProject)).append("\n");
    sb.append("    build: ").append(toIndentedString(build)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    currentlyFailing: ").append(toIndentedString(currentlyFailing)).append("\n");
    sb.append("    currentlyInvestigated: ").append(toIndentedString(currentlyInvestigated)).append("\n");
    sb.append("    currentlyMuted: ").append(toIndentedString(currentlyMuted)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identity: ").append(toIndentedString(identity)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    lookupLimit: ").append(toIndentedString(lookupLimit)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

