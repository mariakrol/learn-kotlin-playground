/*
 * TeamCity REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.makrol.teamcity.api.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Represents test metadata (package, method, class, and so on).
 */
@ApiModel(description = "Represents test metadata (package, method, class, and so on).")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-01-14T01:07:21.722+03:00")
public class ParsedTestName {
  @SerializedName("testPackage")
  private String testPackage = null;

  @SerializedName("testSuite")
  private String testSuite = null;

  @SerializedName("testClass")
  private String testClass = null;

  @SerializedName("testShortName")
  private String testShortName = null;

  @SerializedName("testNameWithoutPrefix")
  private String testNameWithoutPrefix = null;

  @SerializedName("testMethodName")
  private String testMethodName = null;

  @SerializedName("testNameWithParameters")
  private String testNameWithParameters = null;

  public ParsedTestName testPackage(String testPackage) {
    this.testPackage = testPackage;
    return this;
  }

   /**
   * Get testPackage
   * @return testPackage
  **/
  @ApiModelProperty(value = "")
  public String getTestPackage() {
    return testPackage;
  }

  public void setTestPackage(String testPackage) {
    this.testPackage = testPackage;
  }

  public ParsedTestName testSuite(String testSuite) {
    this.testSuite = testSuite;
    return this;
  }

   /**
   * Get testSuite
   * @return testSuite
  **/
  @ApiModelProperty(value = "")
  public String getTestSuite() {
    return testSuite;
  }

  public void setTestSuite(String testSuite) {
    this.testSuite = testSuite;
  }

  public ParsedTestName testClass(String testClass) {
    this.testClass = testClass;
    return this;
  }

   /**
   * Get testClass
   * @return testClass
  **/
  @ApiModelProperty(value = "")
  public String getTestClass() {
    return testClass;
  }

  public void setTestClass(String testClass) {
    this.testClass = testClass;
  }

  public ParsedTestName testShortName(String testShortName) {
    this.testShortName = testShortName;
    return this;
  }

   /**
   * Get testShortName
   * @return testShortName
  **/
  @ApiModelProperty(value = "")
  public String getTestShortName() {
    return testShortName;
  }

  public void setTestShortName(String testShortName) {
    this.testShortName = testShortName;
  }

  public ParsedTestName testNameWithoutPrefix(String testNameWithoutPrefix) {
    this.testNameWithoutPrefix = testNameWithoutPrefix;
    return this;
  }

   /**
   * Get testNameWithoutPrefix
   * @return testNameWithoutPrefix
  **/
  @ApiModelProperty(value = "")
  public String getTestNameWithoutPrefix() {
    return testNameWithoutPrefix;
  }

  public void setTestNameWithoutPrefix(String testNameWithoutPrefix) {
    this.testNameWithoutPrefix = testNameWithoutPrefix;
  }

  public ParsedTestName testMethodName(String testMethodName) {
    this.testMethodName = testMethodName;
    return this;
  }

   /**
   * Get testMethodName
   * @return testMethodName
  **/
  @ApiModelProperty(value = "")
  public String getTestMethodName() {
    return testMethodName;
  }

  public void setTestMethodName(String testMethodName) {
    this.testMethodName = testMethodName;
  }

  public ParsedTestName testNameWithParameters(String testNameWithParameters) {
    this.testNameWithParameters = testNameWithParameters;
    return this;
  }

   /**
   * Get testNameWithParameters
   * @return testNameWithParameters
  **/
  @ApiModelProperty(value = "")
  public String getTestNameWithParameters() {
    return testNameWithParameters;
  }

  public void setTestNameWithParameters(String testNameWithParameters) {
    this.testNameWithParameters = testNameWithParameters;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParsedTestName parsedTestName = (ParsedTestName) o;
    return Objects.equals(this.testPackage, parsedTestName.testPackage) &&
        Objects.equals(this.testSuite, parsedTestName.testSuite) &&
        Objects.equals(this.testClass, parsedTestName.testClass) &&
        Objects.equals(this.testShortName, parsedTestName.testShortName) &&
        Objects.equals(this.testNameWithoutPrefix, parsedTestName.testNameWithoutPrefix) &&
        Objects.equals(this.testMethodName, parsedTestName.testMethodName) &&
        Objects.equals(this.testNameWithParameters, parsedTestName.testNameWithParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(testPackage, testSuite, testClass, testShortName, testNameWithoutPrefix, testMethodName, testNameWithParameters);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParsedTestName {\n");
    
    sb.append("    testPackage: ").append(toIndentedString(testPackage)).append("\n");
    sb.append("    testSuite: ").append(toIndentedString(testSuite)).append("\n");
    sb.append("    testClass: ").append(toIndentedString(testClass)).append("\n");
    sb.append("    testShortName: ").append(toIndentedString(testShortName)).append("\n");
    sb.append("    testNameWithoutPrefix: ").append(toIndentedString(testNameWithoutPrefix)).append("\n");
    sb.append("    testMethodName: ").append(toIndentedString(testMethodName)).append("\n");
    sb.append("    testNameWithParameters: ").append(toIndentedString(testNameWithParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

