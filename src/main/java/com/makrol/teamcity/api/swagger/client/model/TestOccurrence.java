/*
 * TeamCity REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.makrol.teamcity.api.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.makrol.teamcity.api.swagger.client.model.Build;
import com.makrol.teamcity.api.swagger.client.model.Mute;
import com.makrol.teamcity.api.swagger.client.model.Test;
import com.makrol.teamcity.api.swagger.client.model.TestOccurrence;
import com.makrol.teamcity.api.swagger.client.model.TestOccurrences;
import com.makrol.teamcity.api.swagger.client.model.TestRunMetadata;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Represents a relation between a test and the specific build.
 */
@ApiModel(description = "Represents a relation between a test and the specific build.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-01-14T01:07:21.722+03:00")
public class TestOccurrence {
  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    UNKNOWN("UNKNOWN"),
    
    NORMAL("NORMAL"),
    
    WARNING("WARNING"),
    
    FAILURE("FAILURE"),
    
    ERROR("ERROR");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("ignored")
  private Boolean ignored = null;

  @SerializedName("duration")
  private Integer duration = null;

  @SerializedName("runOrder")
  private String runOrder = null;

  @SerializedName("newFailure")
  private Boolean newFailure = null;

  @SerializedName("muted")
  private Boolean muted = null;

  @SerializedName("currentlyMuted")
  private Boolean currentlyMuted = null;

  @SerializedName("currentlyInvestigated")
  private Boolean currentlyInvestigated = null;

  @SerializedName("href")
  private String href = null;

  @SerializedName("ignoreDetails")
  private String ignoreDetails = null;

  @SerializedName("details")
  private String details = null;

  @SerializedName("test")
  private Test test = null;

  @SerializedName("mute")
  private Mute mute = null;

  @SerializedName("build")
  private Build build = null;

  @SerializedName("firstFailed")
  private TestOccurrence firstFailed = null;

  @SerializedName("nextFixed")
  private TestOccurrence nextFixed = null;

  @SerializedName("invocations")
  private TestOccurrences invocations = null;

  @SerializedName("metadata")
  private TestRunMetadata metadata = null;

  @SerializedName("logAnchor")
  private String logAnchor = null;

  public TestOccurrence id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public TestOccurrence name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public TestOccurrence status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(value = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public TestOccurrence ignored(Boolean ignored) {
    this.ignored = ignored;
    return this;
  }

   /**
   * Get ignored
   * @return ignored
  **/
  @ApiModelProperty(value = "")
  public Boolean isIgnored() {
    return ignored;
  }

  public void setIgnored(Boolean ignored) {
    this.ignored = ignored;
  }

  public TestOccurrence duration(Integer duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Get duration
   * @return duration
  **/
  @ApiModelProperty(value = "")
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }

  public TestOccurrence runOrder(String runOrder) {
    this.runOrder = runOrder;
    return this;
  }

   /**
   * Get runOrder
   * @return runOrder
  **/
  @ApiModelProperty(value = "")
  public String getRunOrder() {
    return runOrder;
  }

  public void setRunOrder(String runOrder) {
    this.runOrder = runOrder;
  }

  public TestOccurrence newFailure(Boolean newFailure) {
    this.newFailure = newFailure;
    return this;
  }

   /**
   * Get newFailure
   * @return newFailure
  **/
  @ApiModelProperty(value = "")
  public Boolean isNewFailure() {
    return newFailure;
  }

  public void setNewFailure(Boolean newFailure) {
    this.newFailure = newFailure;
  }

  public TestOccurrence muted(Boolean muted) {
    this.muted = muted;
    return this;
  }

   /**
   * Get muted
   * @return muted
  **/
  @ApiModelProperty(value = "")
  public Boolean isMuted() {
    return muted;
  }

  public void setMuted(Boolean muted) {
    this.muted = muted;
  }

  public TestOccurrence currentlyMuted(Boolean currentlyMuted) {
    this.currentlyMuted = currentlyMuted;
    return this;
  }

   /**
   * Get currentlyMuted
   * @return currentlyMuted
  **/
  @ApiModelProperty(value = "")
  public Boolean isCurrentlyMuted() {
    return currentlyMuted;
  }

  public void setCurrentlyMuted(Boolean currentlyMuted) {
    this.currentlyMuted = currentlyMuted;
  }

  public TestOccurrence currentlyInvestigated(Boolean currentlyInvestigated) {
    this.currentlyInvestigated = currentlyInvestigated;
    return this;
  }

   /**
   * Get currentlyInvestigated
   * @return currentlyInvestigated
  **/
  @ApiModelProperty(value = "")
  public Boolean isCurrentlyInvestigated() {
    return currentlyInvestigated;
  }

  public void setCurrentlyInvestigated(Boolean currentlyInvestigated) {
    this.currentlyInvestigated = currentlyInvestigated;
  }

  public TestOccurrence href(String href) {
    this.href = href;
    return this;
  }

   /**
   * Get href
   * @return href
  **/
  @ApiModelProperty(value = "")
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }

  public TestOccurrence ignoreDetails(String ignoreDetails) {
    this.ignoreDetails = ignoreDetails;
    return this;
  }

   /**
   * Get ignoreDetails
   * @return ignoreDetails
  **/
  @ApiModelProperty(value = "")
  public String getIgnoreDetails() {
    return ignoreDetails;
  }

  public void setIgnoreDetails(String ignoreDetails) {
    this.ignoreDetails = ignoreDetails;
  }

  public TestOccurrence details(String details) {
    this.details = details;
    return this;
  }

   /**
   * Get details
   * @return details
  **/
  @ApiModelProperty(value = "")
  public String getDetails() {
    return details;
  }

  public void setDetails(String details) {
    this.details = details;
  }

  public TestOccurrence test(Test test) {
    this.test = test;
    return this;
  }

   /**
   * Get test
   * @return test
  **/
  @ApiModelProperty(value = "")
  public Test getTest() {
    return test;
  }

  public void setTest(Test test) {
    this.test = test;
  }

  public TestOccurrence mute(Mute mute) {
    this.mute = mute;
    return this;
  }

   /**
   * Get mute
   * @return mute
  **/
  @ApiModelProperty(value = "")
  public Mute getMute() {
    return mute;
  }

  public void setMute(Mute mute) {
    this.mute = mute;
  }

  public TestOccurrence build(Build build) {
    this.build = build;
    return this;
  }

   /**
   * Get build
   * @return build
  **/
  @ApiModelProperty(value = "")
  public Build getBuild() {
    return build;
  }

  public void setBuild(Build build) {
    this.build = build;
  }

  public TestOccurrence firstFailed(TestOccurrence firstFailed) {
    this.firstFailed = firstFailed;
    return this;
  }

   /**
   * Get firstFailed
   * @return firstFailed
  **/
  @ApiModelProperty(value = "")
  public TestOccurrence getFirstFailed() {
    return firstFailed;
  }

  public void setFirstFailed(TestOccurrence firstFailed) {
    this.firstFailed = firstFailed;
  }

  public TestOccurrence nextFixed(TestOccurrence nextFixed) {
    this.nextFixed = nextFixed;
    return this;
  }

   /**
   * Get nextFixed
   * @return nextFixed
  **/
  @ApiModelProperty(value = "")
  public TestOccurrence getNextFixed() {
    return nextFixed;
  }

  public void setNextFixed(TestOccurrence nextFixed) {
    this.nextFixed = nextFixed;
  }

  public TestOccurrence invocations(TestOccurrences invocations) {
    this.invocations = invocations;
    return this;
  }

   /**
   * Get invocations
   * @return invocations
  **/
  @ApiModelProperty(value = "")
  public TestOccurrences getInvocations() {
    return invocations;
  }

  public void setInvocations(TestOccurrences invocations) {
    this.invocations = invocations;
  }

  public TestOccurrence metadata(TestRunMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @ApiModelProperty(value = "")
  public TestRunMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(TestRunMetadata metadata) {
    this.metadata = metadata;
  }

  public TestOccurrence logAnchor(String logAnchor) {
    this.logAnchor = logAnchor;
    return this;
  }

   /**
   * Get logAnchor
   * @return logAnchor
  **/
  @ApiModelProperty(value = "")
  public String getLogAnchor() {
    return logAnchor;
  }

  public void setLogAnchor(String logAnchor) {
    this.logAnchor = logAnchor;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestOccurrence testOccurrence = (TestOccurrence) o;
    return Objects.equals(this.id, testOccurrence.id) &&
        Objects.equals(this.name, testOccurrence.name) &&
        Objects.equals(this.status, testOccurrence.status) &&
        Objects.equals(this.ignored, testOccurrence.ignored) &&
        Objects.equals(this.duration, testOccurrence.duration) &&
        Objects.equals(this.runOrder, testOccurrence.runOrder) &&
        Objects.equals(this.newFailure, testOccurrence.newFailure) &&
        Objects.equals(this.muted, testOccurrence.muted) &&
        Objects.equals(this.currentlyMuted, testOccurrence.currentlyMuted) &&
        Objects.equals(this.currentlyInvestigated, testOccurrence.currentlyInvestigated) &&
        Objects.equals(this.href, testOccurrence.href) &&
        Objects.equals(this.ignoreDetails, testOccurrence.ignoreDetails) &&
        Objects.equals(this.details, testOccurrence.details) &&
        Objects.equals(this.test, testOccurrence.test) &&
        Objects.equals(this.mute, testOccurrence.mute) &&
        Objects.equals(this.build, testOccurrence.build) &&
        Objects.equals(this.firstFailed, testOccurrence.firstFailed) &&
        Objects.equals(this.nextFixed, testOccurrence.nextFixed) &&
        Objects.equals(this.invocations, testOccurrence.invocations) &&
        Objects.equals(this.metadata, testOccurrence.metadata) &&
        Objects.equals(this.logAnchor, testOccurrence.logAnchor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, status, ignored, duration, runOrder, newFailure, muted, currentlyMuted, currentlyInvestigated, href, ignoreDetails, details, test, mute, build, firstFailed, nextFixed, invocations, metadata, logAnchor);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestOccurrence {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    ignored: ").append(toIndentedString(ignored)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    runOrder: ").append(toIndentedString(runOrder)).append("\n");
    sb.append("    newFailure: ").append(toIndentedString(newFailure)).append("\n");
    sb.append("    muted: ").append(toIndentedString(muted)).append("\n");
    sb.append("    currentlyMuted: ").append(toIndentedString(currentlyMuted)).append("\n");
    sb.append("    currentlyInvestigated: ").append(toIndentedString(currentlyInvestigated)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    ignoreDetails: ").append(toIndentedString(ignoreDetails)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    mute: ").append(toIndentedString(mute)).append("\n");
    sb.append("    build: ").append(toIndentedString(build)).append("\n");
    sb.append("    firstFailed: ").append(toIndentedString(firstFailed)).append("\n");
    sb.append("    nextFixed: ").append(toIndentedString(nextFixed)).append("\n");
    sb.append("    invocations: ").append(toIndentedString(invocations)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    logAnchor: ").append(toIndentedString(logAnchor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

