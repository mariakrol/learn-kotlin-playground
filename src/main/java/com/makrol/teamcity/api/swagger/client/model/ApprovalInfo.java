/*
 * TeamCity REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.makrol.teamcity.api.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.makrol.teamcity.api.swagger.client.model.GroupApprovals;
import com.makrol.teamcity.api.swagger.client.model.UserApprovals;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Represents approval status for this build, if applicable.
 */
@ApiModel(description = "Represents approval status for this build, if applicable.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-01-14T01:07:21.722+03:00")
public class ApprovalInfo {
  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    WAITINGFORAPPROVAL("waitingForApproval"),
    
    APPROVED("approved"),
    
    TIMEDOUT("timedOut"),
    
    CANCELED("canceled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("configurationValid")
  private Boolean configurationValid = null;

  @SerializedName("canBeApprovedByCurrentUser")
  private Boolean canBeApprovedByCurrentUser = null;

  @SerializedName("timeoutTimestamp")
  private String timeoutTimestamp = null;

  @SerializedName("userApprovals")
  private UserApprovals userApprovals = null;

  @SerializedName("groupApprovals")
  private GroupApprovals groupApprovals = null;

  public ApprovalInfo status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(value = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public ApprovalInfo configurationValid(Boolean configurationValid) {
    this.configurationValid = configurationValid;
    return this;
  }

   /**
   * Get configurationValid
   * @return configurationValid
  **/
  @ApiModelProperty(value = "")
  public Boolean isConfigurationValid() {
    return configurationValid;
  }

  public void setConfigurationValid(Boolean configurationValid) {
    this.configurationValid = configurationValid;
  }

  public ApprovalInfo canBeApprovedByCurrentUser(Boolean canBeApprovedByCurrentUser) {
    this.canBeApprovedByCurrentUser = canBeApprovedByCurrentUser;
    return this;
  }

   /**
   * Get canBeApprovedByCurrentUser
   * @return canBeApprovedByCurrentUser
  **/
  @ApiModelProperty(value = "")
  public Boolean isCanBeApprovedByCurrentUser() {
    return canBeApprovedByCurrentUser;
  }

  public void setCanBeApprovedByCurrentUser(Boolean canBeApprovedByCurrentUser) {
    this.canBeApprovedByCurrentUser = canBeApprovedByCurrentUser;
  }

  public ApprovalInfo timeoutTimestamp(String timeoutTimestamp) {
    this.timeoutTimestamp = timeoutTimestamp;
    return this;
  }

   /**
   * Get timeoutTimestamp
   * @return timeoutTimestamp
  **/
  @ApiModelProperty(value = "")
  public String getTimeoutTimestamp() {
    return timeoutTimestamp;
  }

  public void setTimeoutTimestamp(String timeoutTimestamp) {
    this.timeoutTimestamp = timeoutTimestamp;
  }

  public ApprovalInfo userApprovals(UserApprovals userApprovals) {
    this.userApprovals = userApprovals;
    return this;
  }

   /**
   * Get userApprovals
   * @return userApprovals
  **/
  @ApiModelProperty(value = "")
  public UserApprovals getUserApprovals() {
    return userApprovals;
  }

  public void setUserApprovals(UserApprovals userApprovals) {
    this.userApprovals = userApprovals;
  }

  public ApprovalInfo groupApprovals(GroupApprovals groupApprovals) {
    this.groupApprovals = groupApprovals;
    return this;
  }

   /**
   * Get groupApprovals
   * @return groupApprovals
  **/
  @ApiModelProperty(value = "")
  public GroupApprovals getGroupApprovals() {
    return groupApprovals;
  }

  public void setGroupApprovals(GroupApprovals groupApprovals) {
    this.groupApprovals = groupApprovals;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApprovalInfo approvalInfo = (ApprovalInfo) o;
    return Objects.equals(this.status, approvalInfo.status) &&
        Objects.equals(this.configurationValid, approvalInfo.configurationValid) &&
        Objects.equals(this.canBeApprovedByCurrentUser, approvalInfo.canBeApprovedByCurrentUser) &&
        Objects.equals(this.timeoutTimestamp, approvalInfo.timeoutTimestamp) &&
        Objects.equals(this.userApprovals, approvalInfo.userApprovals) &&
        Objects.equals(this.groupApprovals, approvalInfo.groupApprovals);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, configurationValid, canBeApprovedByCurrentUser, timeoutTimestamp, userApprovals, groupApprovals);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApprovalInfo {\n");
    
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    configurationValid: ").append(toIndentedString(configurationValid)).append("\n");
    sb.append("    canBeApprovedByCurrentUser: ").append(toIndentedString(canBeApprovedByCurrentUser)).append("\n");
    sb.append("    timeoutTimestamp: ").append(toIndentedString(timeoutTimestamp)).append("\n");
    sb.append("    userApprovals: ").append(toIndentedString(userApprovals)).append("\n");
    sb.append("    groupApprovals: ").append(toIndentedString(groupApprovals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

