/*
 * TeamCity REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.makrol.teamcity.api.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.makrol.teamcity.api.swagger.client.model.VcsRootInstance;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Represents a VCS-side label of this build&#39;s sources.
 */
@ApiModel(description = "Represents a VCS-side label of this build's sources.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-01-14T01:07:21.722+03:00")
public class VcsLabel {
  @SerializedName("text")
  private String text = null;

  @SerializedName("failureReason")
  private String failureReason = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NONE("none"),
    
    SET("set"),
    
    IS_BEING_SET("is being set"),
    
    FAILED("failed"),
    
    DISABLED_FOR_THE_VCS_ROOT("disabled for the vcs root"),
    
    NOT_SUPPORTED_YET_FOR_THE_VCS("not supported yet for the vcs");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("buildId")
  private Long buildId = null;

  @SerializedName("vcs-root-instance")
  private VcsRootInstance vcsRootInstance = null;

  public VcsLabel text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Get text
   * @return text
  **/
  @ApiModelProperty(value = "")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public VcsLabel failureReason(String failureReason) {
    this.failureReason = failureReason;
    return this;
  }

   /**
   * Get failureReason
   * @return failureReason
  **/
  @ApiModelProperty(value = "")
  public String getFailureReason() {
    return failureReason;
  }

  public void setFailureReason(String failureReason) {
    this.failureReason = failureReason;
  }

  public VcsLabel status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(value = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public VcsLabel buildId(Long buildId) {
    this.buildId = buildId;
    return this;
  }

   /**
   * Get buildId
   * @return buildId
  **/
  @ApiModelProperty(value = "")
  public Long getBuildId() {
    return buildId;
  }

  public void setBuildId(Long buildId) {
    this.buildId = buildId;
  }

  public VcsLabel vcsRootInstance(VcsRootInstance vcsRootInstance) {
    this.vcsRootInstance = vcsRootInstance;
    return this;
  }

   /**
   * Get vcsRootInstance
   * @return vcsRootInstance
  **/
  @ApiModelProperty(value = "")
  public VcsRootInstance getVcsRootInstance() {
    return vcsRootInstance;
  }

  public void setVcsRootInstance(VcsRootInstance vcsRootInstance) {
    this.vcsRootInstance = vcsRootInstance;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VcsLabel vcsLabel = (VcsLabel) o;
    return Objects.equals(this.text, vcsLabel.text) &&
        Objects.equals(this.failureReason, vcsLabel.failureReason) &&
        Objects.equals(this.status, vcsLabel.status) &&
        Objects.equals(this.buildId, vcsLabel.buildId) &&
        Objects.equals(this.vcsRootInstance, vcsLabel.vcsRootInstance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(text, failureReason, status, buildId, vcsRootInstance);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VcsLabel {\n");
    
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    buildId: ").append(toIndentedString(buildId)).append("\n");
    sb.append("    vcsRootInstance: ").append(toIndentedString(vcsRootInstance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

