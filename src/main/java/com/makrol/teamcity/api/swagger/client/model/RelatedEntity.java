/*
 * TeamCity REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.makrol.teamcity.api.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.makrol.teamcity.api.swagger.client.model.Agent;
import com.makrol.teamcity.api.swagger.client.model.AgentPool;
import com.makrol.teamcity.api.swagger.client.model.Build;
import com.makrol.teamcity.api.swagger.client.model.BuildType;
import com.makrol.teamcity.api.swagger.client.model.Change;
import com.makrol.teamcity.api.swagger.client.model.Group;
import com.makrol.teamcity.api.swagger.client.model.Problem;
import com.makrol.teamcity.api.swagger.client.model.Project;
import com.makrol.teamcity.api.swagger.client.model.Test;
import com.makrol.teamcity.api.swagger.client.model.User;
import com.makrol.teamcity.api.swagger.client.model.VcsRoot;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Represents a related entity.
 */
@ApiModel(description = "Represents a related entity.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-01-14T01:07:21.722+03:00")
public class RelatedEntity {
  @SerializedName("type")
  private String type = null;

  @SerializedName("unknown")
  private Boolean unknown = null;

  @SerializedName("internalId")
  private String internalId = null;

  @SerializedName("text")
  private String text = null;

  @SerializedName("build")
  private Build build = null;

  @SerializedName("buildType")
  private BuildType buildType = null;

  @SerializedName("project")
  private Project project = null;

  @SerializedName("user")
  private User user = null;

  @SerializedName("group")
  private Group group = null;

  @SerializedName("test")
  private Test test = null;

  @SerializedName("problem")
  private Problem problem = null;

  @SerializedName("agent")
  private Agent agent = null;

  @SerializedName("vcsRoot")
  private VcsRoot vcsRoot = null;

  @SerializedName("change")
  private Change change = null;

  @SerializedName("agentPool")
  private AgentPool agentPool = null;

  public RelatedEntity type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public RelatedEntity unknown(Boolean unknown) {
    this.unknown = unknown;
    return this;
  }

   /**
   * Get unknown
   * @return unknown
  **/
  @ApiModelProperty(value = "")
  public Boolean isUnknown() {
    return unknown;
  }

  public void setUnknown(Boolean unknown) {
    this.unknown = unknown;
  }

  public RelatedEntity internalId(String internalId) {
    this.internalId = internalId;
    return this;
  }

   /**
   * Get internalId
   * @return internalId
  **/
  @ApiModelProperty(value = "")
  public String getInternalId() {
    return internalId;
  }

  public void setInternalId(String internalId) {
    this.internalId = internalId;
  }

  public RelatedEntity text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Get text
   * @return text
  **/
  @ApiModelProperty(value = "")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public RelatedEntity build(Build build) {
    this.build = build;
    return this;
  }

   /**
   * Get build
   * @return build
  **/
  @ApiModelProperty(value = "")
  public Build getBuild() {
    return build;
  }

  public void setBuild(Build build) {
    this.build = build;
  }

  public RelatedEntity buildType(BuildType buildType) {
    this.buildType = buildType;
    return this;
  }

   /**
   * Get buildType
   * @return buildType
  **/
  @ApiModelProperty(value = "")
  public BuildType getBuildType() {
    return buildType;
  }

  public void setBuildType(BuildType buildType) {
    this.buildType = buildType;
  }

  public RelatedEntity project(Project project) {
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @ApiModelProperty(value = "")
  public Project getProject() {
    return project;
  }

  public void setProject(Project project) {
    this.project = project;
  }

  public RelatedEntity user(User user) {
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @ApiModelProperty(value = "")
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }

  public RelatedEntity group(Group group) {
    this.group = group;
    return this;
  }

   /**
   * Get group
   * @return group
  **/
  @ApiModelProperty(value = "")
  public Group getGroup() {
    return group;
  }

  public void setGroup(Group group) {
    this.group = group;
  }

  public RelatedEntity test(Test test) {
    this.test = test;
    return this;
  }

   /**
   * Get test
   * @return test
  **/
  @ApiModelProperty(value = "")
  public Test getTest() {
    return test;
  }

  public void setTest(Test test) {
    this.test = test;
  }

  public RelatedEntity problem(Problem problem) {
    this.problem = problem;
    return this;
  }

   /**
   * Get problem
   * @return problem
  **/
  @ApiModelProperty(value = "")
  public Problem getProblem() {
    return problem;
  }

  public void setProblem(Problem problem) {
    this.problem = problem;
  }

  public RelatedEntity agent(Agent agent) {
    this.agent = agent;
    return this;
  }

   /**
   * Get agent
   * @return agent
  **/
  @ApiModelProperty(value = "")
  public Agent getAgent() {
    return agent;
  }

  public void setAgent(Agent agent) {
    this.agent = agent;
  }

  public RelatedEntity vcsRoot(VcsRoot vcsRoot) {
    this.vcsRoot = vcsRoot;
    return this;
  }

   /**
   * Get vcsRoot
   * @return vcsRoot
  **/
  @ApiModelProperty(value = "")
  public VcsRoot getVcsRoot() {
    return vcsRoot;
  }

  public void setVcsRoot(VcsRoot vcsRoot) {
    this.vcsRoot = vcsRoot;
  }

  public RelatedEntity change(Change change) {
    this.change = change;
    return this;
  }

   /**
   * Get change
   * @return change
  **/
  @ApiModelProperty(value = "")
  public Change getChange() {
    return change;
  }

  public void setChange(Change change) {
    this.change = change;
  }

  public RelatedEntity agentPool(AgentPool agentPool) {
    this.agentPool = agentPool;
    return this;
  }

   /**
   * Get agentPool
   * @return agentPool
  **/
  @ApiModelProperty(value = "")
  public AgentPool getAgentPool() {
    return agentPool;
  }

  public void setAgentPool(AgentPool agentPool) {
    this.agentPool = agentPool;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelatedEntity relatedEntity = (RelatedEntity) o;
    return Objects.equals(this.type, relatedEntity.type) &&
        Objects.equals(this.unknown, relatedEntity.unknown) &&
        Objects.equals(this.internalId, relatedEntity.internalId) &&
        Objects.equals(this.text, relatedEntity.text) &&
        Objects.equals(this.build, relatedEntity.build) &&
        Objects.equals(this.buildType, relatedEntity.buildType) &&
        Objects.equals(this.project, relatedEntity.project) &&
        Objects.equals(this.user, relatedEntity.user) &&
        Objects.equals(this.group, relatedEntity.group) &&
        Objects.equals(this.test, relatedEntity.test) &&
        Objects.equals(this.problem, relatedEntity.problem) &&
        Objects.equals(this.agent, relatedEntity.agent) &&
        Objects.equals(this.vcsRoot, relatedEntity.vcsRoot) &&
        Objects.equals(this.change, relatedEntity.change) &&
        Objects.equals(this.agentPool, relatedEntity.agentPool);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, unknown, internalId, text, build, buildType, project, user, group, test, problem, agent, vcsRoot, change, agentPool);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelatedEntity {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unknown: ").append(toIndentedString(unknown)).append("\n");
    sb.append("    internalId: ").append(toIndentedString(internalId)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    build: ").append(toIndentedString(build)).append("\n");
    sb.append("    buildType: ").append(toIndentedString(buildType)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    problem: ").append(toIndentedString(problem)).append("\n");
    sb.append("    agent: ").append(toIndentedString(agent)).append("\n");
    sb.append("    vcsRoot: ").append(toIndentedString(vcsRoot)).append("\n");
    sb.append("    change: ").append(toIndentedString(change)).append("\n");
    sb.append("    agentPool: ").append(toIndentedString(agentPool)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

