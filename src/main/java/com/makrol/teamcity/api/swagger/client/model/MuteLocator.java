/*
 * TeamCity REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.makrol.teamcity.api.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * Represents a locator string for filtering Mute entities.
 */
@ApiModel(description = "Represents a locator string for filtering Mute entities.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-01-14T01:07:21.722+03:00")
public class MuteLocator {
  @SerializedName("affectedProject")
  private String affectedProject = null;

  @SerializedName("creationDate")
  private OffsetDateTime creationDate = null;

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("item")
  private String item = null;

  @SerializedName("problem")
  private String problem = null;

  @SerializedName("project")
  private String project = null;

  @SerializedName("reporter")
  private String reporter = null;

  /**
   * Gets or Sets resolution
   */
  @JsonAdapter(ResolutionEnum.Adapter.class)
  public enum ResolutionEnum {
    MANUALLY("manually"),
    
    WHENFIXED("whenFixed"),
    
    ATTIME("atTime");

    private String value;

    ResolutionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResolutionEnum fromValue(String text) {
      for (ResolutionEnum b : ResolutionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ResolutionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResolutionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResolutionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ResolutionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("resolution")
  private ResolutionEnum resolution = null;

  @SerializedName("test")
  private String test = null;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TEST("test"),
    
    PROBLEM("problem"),
    
    ANYPROBLEM("anyProblem"),
    
    UNKNOWN("unknown");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("unmuteDate")
  private OffsetDateTime unmuteDate = null;

  public MuteLocator affectedProject(String affectedProject) {
    this.affectedProject = affectedProject;
    return this;
  }

   /**
   * Project (direct or indirect parent) locator.
   * @return affectedProject
  **/
  @ApiModelProperty(value = "Project (direct or indirect parent) locator.")
  public String getAffectedProject() {
    return affectedProject;
  }

  public void setAffectedProject(String affectedProject) {
    this.affectedProject = affectedProject;
  }

  public MuteLocator creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

   /**
   * yyyyMMddTHHmmss+ZZZZ
   * @return creationDate
  **/
  @ApiModelProperty(value = "yyyyMMddTHHmmss+ZZZZ")
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }

  public MuteLocator id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public MuteLocator item(String item) {
    this.item = item;
    return this;
  }

   /**
   * Supply multiple locators and return a union of the results.
   * @return item
  **/
  @ApiModelProperty(value = "Supply multiple locators and return a union of the results.")
  public String getItem() {
    return item;
  }

  public void setItem(String item) {
    this.item = item;
  }

  public MuteLocator problem(String problem) {
    this.problem = problem;
    return this;
  }

   /**
   * Problem locator.
   * @return problem
  **/
  @ApiModelProperty(value = "Problem locator.")
  public String getProblem() {
    return problem;
  }

  public void setProblem(String problem) {
    this.problem = problem;
  }

  public MuteLocator project(String project) {
    this.project = project;
    return this;
  }

   /**
   * Project (direct parent) locator.
   * @return project
  **/
  @ApiModelProperty(value = "Project (direct parent) locator.")
  public String getProject() {
    return project;
  }

  public void setProject(String project) {
    this.project = project;
  }

  public MuteLocator reporter(String reporter) {
    this.reporter = reporter;
    return this;
  }

   /**
   * User who muted this test.
   * @return reporter
  **/
  @ApiModelProperty(value = "User who muted this test.")
  public String getReporter() {
    return reporter;
  }

  public void setReporter(String reporter) {
    this.reporter = reporter;
  }

  public MuteLocator resolution(ResolutionEnum resolution) {
    this.resolution = resolution;
    return this;
  }

   /**
   * Get resolution
   * @return resolution
  **/
  @ApiModelProperty(value = "")
  public ResolutionEnum getResolution() {
    return resolution;
  }

  public void setResolution(ResolutionEnum resolution) {
    this.resolution = resolution;
  }

  public MuteLocator test(String test) {
    this.test = test;
    return this;
  }

   /**
   * Test locator.
   * @return test
  **/
  @ApiModelProperty(value = "Test locator.")
  public String getTest() {
    return test;
  }

  public void setTest(String test) {
    this.test = test;
  }

  public MuteLocator type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public MuteLocator unmuteDate(OffsetDateTime unmuteDate) {
    this.unmuteDate = unmuteDate;
    return this;
  }

   /**
   * yyyyMMddTHHmmss+ZZZZ
   * @return unmuteDate
  **/
  @ApiModelProperty(value = "yyyyMMddTHHmmss+ZZZZ")
  public OffsetDateTime getUnmuteDate() {
    return unmuteDate;
  }

  public void setUnmuteDate(OffsetDateTime unmuteDate) {
    this.unmuteDate = unmuteDate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MuteLocator muteLocator = (MuteLocator) o;
    return Objects.equals(this.affectedProject, muteLocator.affectedProject) &&
        Objects.equals(this.creationDate, muteLocator.creationDate) &&
        Objects.equals(this.id, muteLocator.id) &&
        Objects.equals(this.item, muteLocator.item) &&
        Objects.equals(this.problem, muteLocator.problem) &&
        Objects.equals(this.project, muteLocator.project) &&
        Objects.equals(this.reporter, muteLocator.reporter) &&
        Objects.equals(this.resolution, muteLocator.resolution) &&
        Objects.equals(this.test, muteLocator.test) &&
        Objects.equals(this.type, muteLocator.type) &&
        Objects.equals(this.unmuteDate, muteLocator.unmuteDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affectedProject, creationDate, id, item, problem, project, reporter, resolution, test, type, unmuteDate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MuteLocator {\n");
    
    sb.append("    affectedProject: ").append(toIndentedString(affectedProject)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    problem: ").append(toIndentedString(problem)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    reporter: ").append(toIndentedString(reporter)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unmuteDate: ").append(toIndentedString(unmuteDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

