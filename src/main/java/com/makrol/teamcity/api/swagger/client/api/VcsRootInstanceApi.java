/*
 * TeamCity REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.makrol.teamcity.api.swagger.client.api;

import com.makrol.teamcity.api.swagger.client.ApiCallback;
import com.makrol.teamcity.api.swagger.client.ApiClient;
import com.makrol.teamcity.api.swagger.client.ApiException;
import com.makrol.teamcity.api.swagger.client.ApiResponse;
import com.makrol.teamcity.api.swagger.client.Configuration;
import com.makrol.teamcity.api.swagger.client.Pair;
import com.makrol.teamcity.api.swagger.client.ProgressRequestBody;
import com.makrol.teamcity.api.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.makrol.teamcity.api.swagger.client.model.*;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VcsRootInstanceApi {
    private ApiClient apiClient;

    public VcsRootInstanceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VcsRootInstanceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteVcsRootInstanceField
     * @param vcsRootInstanceLocator  (required)
     * @param field  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteVcsRootInstanceFieldCall(String vcsRootInstanceLocator, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}"
            .replaceAll("\\{" + "vcsRootInstanceLocator" + "\\}", apiClient.escapeString(vcsRootInstanceLocator.toString()))
            .replaceAll("\\{" + "field" + "\\}", apiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteVcsRootInstanceFieldValidateBeforeCall(String vcsRootInstanceLocator, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vcsRootInstanceLocator' is set
        if (vcsRootInstanceLocator == null) {
            throw new ApiException("Missing the required parameter 'vcsRootInstanceLocator' when calling deleteVcsRootInstanceField(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling deleteVcsRootInstanceField(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteVcsRootInstanceFieldCall(vcsRootInstanceLocator, field, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove a field of the matching VCS root instance.
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param field  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteVcsRootInstanceField(String vcsRootInstanceLocator, String field) throws ApiException {
        deleteVcsRootInstanceFieldWithHttpInfo(vcsRootInstanceLocator, field);
    }

    /**
     * Remove a field of the matching VCS root instance.
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param field  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteVcsRootInstanceFieldWithHttpInfo(String vcsRootInstanceLocator, String field) throws ApiException {
        com.squareup.okhttp.Call call = deleteVcsRootInstanceFieldValidateBeforeCall(vcsRootInstanceLocator, field, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove a field of the matching VCS root instance. (asynchronously)
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param field  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteVcsRootInstanceFieldAsync(String vcsRootInstanceLocator, String field, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteVcsRootInstanceFieldValidateBeforeCall(vcsRootInstanceLocator, field, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteVcsRootInstanceRepositoryState
     * @param vcsRootInstanceLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteVcsRootInstanceRepositoryStateCall(String vcsRootInstanceLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState"
            .replaceAll("\\{" + "vcsRootInstanceLocator" + "\\}", apiClient.escapeString(vcsRootInstanceLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteVcsRootInstanceRepositoryStateValidateBeforeCall(String vcsRootInstanceLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vcsRootInstanceLocator' is set
        if (vcsRootInstanceLocator == null) {
            throw new ApiException("Missing the required parameter 'vcsRootInstanceLocator' when calling deleteVcsRootInstanceRepositoryState(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteVcsRootInstanceRepositoryStateCall(vcsRootInstanceLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete the last repository state of the matching VCS root instance.
     * 
     * @param vcsRootInstanceLocator  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteVcsRootInstanceRepositoryState(String vcsRootInstanceLocator) throws ApiException {
        deleteVcsRootInstanceRepositoryStateWithHttpInfo(vcsRootInstanceLocator);
    }

    /**
     * Delete the last repository state of the matching VCS root instance.
     * 
     * @param vcsRootInstanceLocator  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteVcsRootInstanceRepositoryStateWithHttpInfo(String vcsRootInstanceLocator) throws ApiException {
        com.squareup.okhttp.Call call = deleteVcsRootInstanceRepositoryStateValidateBeforeCall(vcsRootInstanceLocator, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete the last repository state of the matching VCS root instance. (asynchronously)
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteVcsRootInstanceRepositoryStateAsync(String vcsRootInstanceLocator, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteVcsRootInstanceRepositoryStateValidateBeforeCall(vcsRootInstanceLocator, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for downloadFile
     * @param path  (required)
     * @param vcsRootInstanceLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadFileCall(String path, String vcsRootInstanceLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/files{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()))
            .replaceAll("\\{" + "vcsRootInstanceLocator" + "\\}", apiClient.escapeString(vcsRootInstanceLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call downloadFileValidateBeforeCall(String path, String vcsRootInstanceLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling downloadFile(Async)");
        }
        
        // verify the required parameter 'vcsRootInstanceLocator' is set
        if (vcsRootInstanceLocator == null) {
            throw new ApiException("Missing the required parameter 'vcsRootInstanceLocator' when calling downloadFile(Async)");
        }
        

        com.squareup.okhttp.Call call = downloadFileCall(path, vcsRootInstanceLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Download specific file.
     * 
     * @param path  (required)
     * @param vcsRootInstanceLocator  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void downloadFile(String path, String vcsRootInstanceLocator) throws ApiException {
        downloadFileWithHttpInfo(path, vcsRootInstanceLocator);
    }

    /**
     * Download specific file.
     * 
     * @param path  (required)
     * @param vcsRootInstanceLocator  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> downloadFileWithHttpInfo(String path, String vcsRootInstanceLocator) throws ApiException {
        com.squareup.okhttp.Call call = downloadFileValidateBeforeCall(path, vcsRootInstanceLocator, null, null);
        return apiClient.execute(call);
    }

    /**
     * Download specific file. (asynchronously)
     * 
     * @param path  (required)
     * @param vcsRootInstanceLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadFileAsync(String path, String vcsRootInstanceLocator, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadFileValidateBeforeCall(path, vcsRootInstanceLocator, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllVcsRootInstances
     * @param locator  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllVcsRootInstancesCall(String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/vcs-root-instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locator", locator));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllVcsRootInstancesValidateBeforeCall(String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllVcsRootInstancesCall(locator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all VCS root instances.
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @return VcsRootInstances
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VcsRootInstances getAllVcsRootInstances(String locator, String fields) throws ApiException {
        ApiResponse<VcsRootInstances> resp = getAllVcsRootInstancesWithHttpInfo(locator, fields);
        return resp.getData();
    }

    /**
     * Get all VCS root instances.
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;VcsRootInstances&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VcsRootInstances> getAllVcsRootInstancesWithHttpInfo(String locator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllVcsRootInstancesValidateBeforeCall(locator, fields, null, null);
        Type localVarReturnType = new TypeToken<VcsRootInstances>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all VCS root instances. (asynchronously)
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllVcsRootInstancesAsync(String locator, String fields, final ApiCallback<VcsRootInstances> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllVcsRootInstancesValidateBeforeCall(locator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VcsRootInstances>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFileMetadata
     * @param path  (required)
     * @param vcsRootInstanceLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFileMetadataCall(String path, String vcsRootInstanceLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/metadata{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()))
            .replaceAll("\\{" + "vcsRootInstanceLocator" + "\\}", apiClient.escapeString(vcsRootInstanceLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFileMetadataValidateBeforeCall(String path, String vcsRootInstanceLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getFileMetadata(Async)");
        }
        
        // verify the required parameter 'vcsRootInstanceLocator' is set
        if (vcsRootInstanceLocator == null) {
            throw new ApiException("Missing the required parameter 'vcsRootInstanceLocator' when calling getFileMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = getFileMetadataCall(path, vcsRootInstanceLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get metadata of specific file.
     * 
     * @param path  (required)
     * @param vcsRootInstanceLocator  (required)
     * @param fields  (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getFileMetadata(String path, String vcsRootInstanceLocator, String fields) throws ApiException {
        ApiResponse<File> resp = getFileMetadataWithHttpInfo(path, vcsRootInstanceLocator, fields);
        return resp.getData();
    }

    /**
     * Get metadata of specific file.
     * 
     * @param path  (required)
     * @param vcsRootInstanceLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getFileMetadataWithHttpInfo(String path, String vcsRootInstanceLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getFileMetadataValidateBeforeCall(path, vcsRootInstanceLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get metadata of specific file. (asynchronously)
     * 
     * @param path  (required)
     * @param vcsRootInstanceLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFileMetadataAsync(String path, String vcsRootInstanceLocator, String fields, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFileMetadataValidateBeforeCall(path, vcsRootInstanceLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFilesList
     * @param vcsRootInstanceLocator  (required)
     * @param basePath  (optional)
     * @param locator  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFilesListCall(String vcsRootInstanceLocator, String basePath, String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest"
            .replaceAll("\\{" + "vcsRootInstanceLocator" + "\\}", apiClient.escapeString(vcsRootInstanceLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (basePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("basePath", basePath));
        if (locator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locator", locator));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFilesListValidateBeforeCall(String vcsRootInstanceLocator, String basePath, String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vcsRootInstanceLocator' is set
        if (vcsRootInstanceLocator == null) {
            throw new ApiException("Missing the required parameter 'vcsRootInstanceLocator' when calling getFilesList(Async)");
        }
        

        com.squareup.okhttp.Call call = getFilesListCall(vcsRootInstanceLocator, basePath, locator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all files.
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param basePath  (optional)
     * @param locator  (optional)
     * @param fields  (optional)
     * @return Files
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Files getFilesList(String vcsRootInstanceLocator, String basePath, String locator, String fields) throws ApiException {
        ApiResponse<Files> resp = getFilesListWithHttpInfo(vcsRootInstanceLocator, basePath, locator, fields);
        return resp.getData();
    }

    /**
     * List all files.
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param basePath  (optional)
     * @param locator  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Files&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Files> getFilesListWithHttpInfo(String vcsRootInstanceLocator, String basePath, String locator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getFilesListValidateBeforeCall(vcsRootInstanceLocator, basePath, locator, fields, null, null);
        Type localVarReturnType = new TypeToken<Files>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all files. (asynchronously)
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param basePath  (optional)
     * @param locator  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFilesListAsync(String vcsRootInstanceLocator, String basePath, String locator, String fields, final ApiCallback<Files> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFilesListValidateBeforeCall(vcsRootInstanceLocator, basePath, locator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Files>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFilesListForSubpath
     * @param path  (required)
     * @param vcsRootInstanceLocator  (required)
     * @param basePath  (optional)
     * @param locator  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFilesListForSubpathCall(String path, String vcsRootInstanceLocator, String basePath, String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()))
            .replaceAll("\\{" + "vcsRootInstanceLocator" + "\\}", apiClient.escapeString(vcsRootInstanceLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (basePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("basePath", basePath));
        if (locator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locator", locator));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFilesListForSubpathValidateBeforeCall(String path, String vcsRootInstanceLocator, String basePath, String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getFilesListForSubpath(Async)");
        }
        
        // verify the required parameter 'vcsRootInstanceLocator' is set
        if (vcsRootInstanceLocator == null) {
            throw new ApiException("Missing the required parameter 'vcsRootInstanceLocator' when calling getFilesListForSubpath(Async)");
        }
        

        com.squareup.okhttp.Call call = getFilesListForSubpathCall(path, vcsRootInstanceLocator, basePath, locator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List files under this path.
     * 
     * @param path  (required)
     * @param vcsRootInstanceLocator  (required)
     * @param basePath  (optional)
     * @param locator  (optional)
     * @param fields  (optional)
     * @return Files
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Files getFilesListForSubpath(String path, String vcsRootInstanceLocator, String basePath, String locator, String fields) throws ApiException {
        ApiResponse<Files> resp = getFilesListForSubpathWithHttpInfo(path, vcsRootInstanceLocator, basePath, locator, fields);
        return resp.getData();
    }

    /**
     * List files under this path.
     * 
     * @param path  (required)
     * @param vcsRootInstanceLocator  (required)
     * @param basePath  (optional)
     * @param locator  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Files&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Files> getFilesListForSubpathWithHttpInfo(String path, String vcsRootInstanceLocator, String basePath, String locator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getFilesListForSubpathValidateBeforeCall(path, vcsRootInstanceLocator, basePath, locator, fields, null, null);
        Type localVarReturnType = new TypeToken<Files>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List files under this path. (asynchronously)
     * 
     * @param path  (required)
     * @param vcsRootInstanceLocator  (required)
     * @param basePath  (optional)
     * @param locator  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFilesListForSubpathAsync(String path, String vcsRootInstanceLocator, String basePath, String locator, String fields, final ApiCallback<Files> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFilesListForSubpathValidateBeforeCall(path, vcsRootInstanceLocator, basePath, locator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Files>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVcsRootInstance
     * @param vcsRootInstanceLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVcsRootInstanceCall(String vcsRootInstanceLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}"
            .replaceAll("\\{" + "vcsRootInstanceLocator" + "\\}", apiClient.escapeString(vcsRootInstanceLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVcsRootInstanceValidateBeforeCall(String vcsRootInstanceLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vcsRootInstanceLocator' is set
        if (vcsRootInstanceLocator == null) {
            throw new ApiException("Missing the required parameter 'vcsRootInstanceLocator' when calling getVcsRootInstance(Async)");
        }
        

        com.squareup.okhttp.Call call = getVcsRootInstanceCall(vcsRootInstanceLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get VCS root instance matching the locator.
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param fields  (optional)
     * @return VcsRootInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VcsRootInstance getVcsRootInstance(String vcsRootInstanceLocator, String fields) throws ApiException {
        ApiResponse<VcsRootInstance> resp = getVcsRootInstanceWithHttpInfo(vcsRootInstanceLocator, fields);
        return resp.getData();
    }

    /**
     * Get VCS root instance matching the locator.
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;VcsRootInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VcsRootInstance> getVcsRootInstanceWithHttpInfo(String vcsRootInstanceLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getVcsRootInstanceValidateBeforeCall(vcsRootInstanceLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<VcsRootInstance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get VCS root instance matching the locator. (asynchronously)
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVcsRootInstanceAsync(String vcsRootInstanceLocator, String fields, final ApiCallback<VcsRootInstance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVcsRootInstanceValidateBeforeCall(vcsRootInstanceLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VcsRootInstance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVcsRootInstanceCreationDate
     * @param vcsRootInstanceLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVcsRootInstanceCreationDateCall(String vcsRootInstanceLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState/creationDate"
            .replaceAll("\\{" + "vcsRootInstanceLocator" + "\\}", apiClient.escapeString(vcsRootInstanceLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVcsRootInstanceCreationDateValidateBeforeCall(String vcsRootInstanceLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vcsRootInstanceLocator' is set
        if (vcsRootInstanceLocator == null) {
            throw new ApiException("Missing the required parameter 'vcsRootInstanceLocator' when calling getVcsRootInstanceCreationDate(Async)");
        }
        

        com.squareup.okhttp.Call call = getVcsRootInstanceCreationDateCall(vcsRootInstanceLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the creation date of the matching VCS root instance.
     * 
     * @param vcsRootInstanceLocator  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getVcsRootInstanceCreationDate(String vcsRootInstanceLocator) throws ApiException {
        ApiResponse<String> resp = getVcsRootInstanceCreationDateWithHttpInfo(vcsRootInstanceLocator);
        return resp.getData();
    }

    /**
     * Get the creation date of the matching VCS root instance.
     * 
     * @param vcsRootInstanceLocator  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getVcsRootInstanceCreationDateWithHttpInfo(String vcsRootInstanceLocator) throws ApiException {
        com.squareup.okhttp.Call call = getVcsRootInstanceCreationDateValidateBeforeCall(vcsRootInstanceLocator, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the creation date of the matching VCS root instance. (asynchronously)
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVcsRootInstanceCreationDateAsync(String vcsRootInstanceLocator, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVcsRootInstanceCreationDateValidateBeforeCall(vcsRootInstanceLocator, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVcsRootInstanceField
     * @param vcsRootInstanceLocator  (required)
     * @param field  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVcsRootInstanceFieldCall(String vcsRootInstanceLocator, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}"
            .replaceAll("\\{" + "vcsRootInstanceLocator" + "\\}", apiClient.escapeString(vcsRootInstanceLocator.toString()))
            .replaceAll("\\{" + "field" + "\\}", apiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVcsRootInstanceFieldValidateBeforeCall(String vcsRootInstanceLocator, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vcsRootInstanceLocator' is set
        if (vcsRootInstanceLocator == null) {
            throw new ApiException("Missing the required parameter 'vcsRootInstanceLocator' when calling getVcsRootInstanceField(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getVcsRootInstanceField(Async)");
        }
        

        com.squareup.okhttp.Call call = getVcsRootInstanceFieldCall(vcsRootInstanceLocator, field, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a field of the matching VCS root instance.
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param field  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getVcsRootInstanceField(String vcsRootInstanceLocator, String field) throws ApiException {
        ApiResponse<String> resp = getVcsRootInstanceFieldWithHttpInfo(vcsRootInstanceLocator, field);
        return resp.getData();
    }

    /**
     * Get a field of the matching VCS root instance.
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param field  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getVcsRootInstanceFieldWithHttpInfo(String vcsRootInstanceLocator, String field) throws ApiException {
        com.squareup.okhttp.Call call = getVcsRootInstanceFieldValidateBeforeCall(vcsRootInstanceLocator, field, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a field of the matching VCS root instance. (asynchronously)
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param field  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVcsRootInstanceFieldAsync(String vcsRootInstanceLocator, String field, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVcsRootInstanceFieldValidateBeforeCall(vcsRootInstanceLocator, field, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVcsRootInstanceProperties
     * @param vcsRootInstanceLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVcsRootInstancePropertiesCall(String vcsRootInstanceLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/properties"
            .replaceAll("\\{" + "vcsRootInstanceLocator" + "\\}", apiClient.escapeString(vcsRootInstanceLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVcsRootInstancePropertiesValidateBeforeCall(String vcsRootInstanceLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vcsRootInstanceLocator' is set
        if (vcsRootInstanceLocator == null) {
            throw new ApiException("Missing the required parameter 'vcsRootInstanceLocator' when calling getVcsRootInstanceProperties(Async)");
        }
        

        com.squareup.okhttp.Call call = getVcsRootInstancePropertiesCall(vcsRootInstanceLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all properties of the matching VCS root instance.
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param fields  (optional)
     * @return Properties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Properties getVcsRootInstanceProperties(String vcsRootInstanceLocator, String fields) throws ApiException {
        ApiResponse<Properties> resp = getVcsRootInstancePropertiesWithHttpInfo(vcsRootInstanceLocator, fields);
        return resp.getData();
    }

    /**
     * Get all properties of the matching VCS root instance.
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Properties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Properties> getVcsRootInstancePropertiesWithHttpInfo(String vcsRootInstanceLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getVcsRootInstancePropertiesValidateBeforeCall(vcsRootInstanceLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<Properties>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all properties of the matching VCS root instance. (asynchronously)
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVcsRootInstancePropertiesAsync(String vcsRootInstanceLocator, String fields, final ApiCallback<Properties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVcsRootInstancePropertiesValidateBeforeCall(vcsRootInstanceLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Properties>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVcsRootInstanceRepositoryState
     * @param vcsRootInstanceLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVcsRootInstanceRepositoryStateCall(String vcsRootInstanceLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState"
            .replaceAll("\\{" + "vcsRootInstanceLocator" + "\\}", apiClient.escapeString(vcsRootInstanceLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVcsRootInstanceRepositoryStateValidateBeforeCall(String vcsRootInstanceLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vcsRootInstanceLocator' is set
        if (vcsRootInstanceLocator == null) {
            throw new ApiException("Missing the required parameter 'vcsRootInstanceLocator' when calling getVcsRootInstanceRepositoryState(Async)");
        }
        

        com.squareup.okhttp.Call call = getVcsRootInstanceRepositoryStateCall(vcsRootInstanceLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the repository state of the matching VCS root instance.
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param fields  (optional)
     * @return Entries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Entries getVcsRootInstanceRepositoryState(String vcsRootInstanceLocator, String fields) throws ApiException {
        ApiResponse<Entries> resp = getVcsRootInstanceRepositoryStateWithHttpInfo(vcsRootInstanceLocator, fields);
        return resp.getData();
    }

    /**
     * Get the repository state of the matching VCS root instance.
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Entries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Entries> getVcsRootInstanceRepositoryStateWithHttpInfo(String vcsRootInstanceLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getVcsRootInstanceRepositoryStateValidateBeforeCall(vcsRootInstanceLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<Entries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the repository state of the matching VCS root instance. (asynchronously)
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVcsRootInstanceRepositoryStateAsync(String vcsRootInstanceLocator, String fields, final ApiCallback<Entries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVcsRootInstanceRepositoryStateValidateBeforeCall(vcsRootInstanceLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Entries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getZippedFile
     * @param path  (required)
     * @param vcsRootInstanceLocator  (required)
     * @param basePath  (optional)
     * @param locator  (optional)
     * @param name  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getZippedFileCall(String path, String vcsRootInstanceLocator, String basePath, String locator, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/archived{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()))
            .replaceAll("\\{" + "vcsRootInstanceLocator" + "\\}", apiClient.escapeString(vcsRootInstanceLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (basePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("basePath", basePath));
        if (locator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locator", locator));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getZippedFileValidateBeforeCall(String path, String vcsRootInstanceLocator, String basePath, String locator, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getZippedFile(Async)");
        }
        
        // verify the required parameter 'vcsRootInstanceLocator' is set
        if (vcsRootInstanceLocator == null) {
            throw new ApiException("Missing the required parameter 'vcsRootInstanceLocator' when calling getZippedFile(Async)");
        }
        

        com.squareup.okhttp.Call call = getZippedFileCall(path, vcsRootInstanceLocator, basePath, locator, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get specific file zipped.
     * 
     * @param path  (required)
     * @param vcsRootInstanceLocator  (required)
     * @param basePath  (optional)
     * @param locator  (optional)
     * @param name  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getZippedFile(String path, String vcsRootInstanceLocator, String basePath, String locator, String name) throws ApiException {
        getZippedFileWithHttpInfo(path, vcsRootInstanceLocator, basePath, locator, name);
    }

    /**
     * Get specific file zipped.
     * 
     * @param path  (required)
     * @param vcsRootInstanceLocator  (required)
     * @param basePath  (optional)
     * @param locator  (optional)
     * @param name  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getZippedFileWithHttpInfo(String path, String vcsRootInstanceLocator, String basePath, String locator, String name) throws ApiException {
        com.squareup.okhttp.Call call = getZippedFileValidateBeforeCall(path, vcsRootInstanceLocator, basePath, locator, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get specific file zipped. (asynchronously)
     * 
     * @param path  (required)
     * @param vcsRootInstanceLocator  (required)
     * @param basePath  (optional)
     * @param locator  (optional)
     * @param name  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getZippedFileAsync(String path, String vcsRootInstanceLocator, String basePath, String locator, String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getZippedFileValidateBeforeCall(path, vcsRootInstanceLocator, basePath, locator, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for requestPendingChangesCheck
     * @param locator  (optional)
     * @param requestor  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call requestPendingChangesCheckCall(String locator, String requestor, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/vcs-root-instances/checkingForChangesQueue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locator", locator));
        if (requestor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("requestor", requestor));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call requestPendingChangesCheckValidateBeforeCall(String locator, String requestor, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = requestPendingChangesCheckCall(locator, requestor, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Check for the pending changes for all VCS root instances.
     * 
     * @param locator  (optional)
     * @param requestor  (optional)
     * @param fields  (optional)
     * @return VcsRootInstances
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VcsRootInstances requestPendingChangesCheck(String locator, String requestor, String fields) throws ApiException {
        ApiResponse<VcsRootInstances> resp = requestPendingChangesCheckWithHttpInfo(locator, requestor, fields);
        return resp.getData();
    }

    /**
     * Check for the pending changes for all VCS root instances.
     * 
     * @param locator  (optional)
     * @param requestor  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;VcsRootInstances&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VcsRootInstances> requestPendingChangesCheckWithHttpInfo(String locator, String requestor, String fields) throws ApiException {
        com.squareup.okhttp.Call call = requestPendingChangesCheckValidateBeforeCall(locator, requestor, fields, null, null);
        Type localVarReturnType = new TypeToken<VcsRootInstances>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check for the pending changes for all VCS root instances. (asynchronously)
     * 
     * @param locator  (optional)
     * @param requestor  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call requestPendingChangesCheckAsync(String locator, String requestor, String fields, final ApiCallback<VcsRootInstances> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = requestPendingChangesCheckValidateBeforeCall(locator, requestor, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VcsRootInstances>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setVcsRootInstanceField
     * @param vcsRootInstanceLocator  (required)
     * @param field  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setVcsRootInstanceFieldCall(String vcsRootInstanceLocator, String field, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}"
            .replaceAll("\\{" + "vcsRootInstanceLocator" + "\\}", apiClient.escapeString(vcsRootInstanceLocator.toString()))
            .replaceAll("\\{" + "field" + "\\}", apiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setVcsRootInstanceFieldValidateBeforeCall(String vcsRootInstanceLocator, String field, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vcsRootInstanceLocator' is set
        if (vcsRootInstanceLocator == null) {
            throw new ApiException("Missing the required parameter 'vcsRootInstanceLocator' when calling setVcsRootInstanceField(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling setVcsRootInstanceField(Async)");
        }
        

        com.squareup.okhttp.Call call = setVcsRootInstanceFieldCall(vcsRootInstanceLocator, field, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a field of the matching VCS root instance.
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param field  (required)
     * @param body  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String setVcsRootInstanceField(String vcsRootInstanceLocator, String field, String body) throws ApiException {
        ApiResponse<String> resp = setVcsRootInstanceFieldWithHttpInfo(vcsRootInstanceLocator, field, body);
        return resp.getData();
    }

    /**
     * Get a field of the matching VCS root instance.
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param field  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> setVcsRootInstanceFieldWithHttpInfo(String vcsRootInstanceLocator, String field, String body) throws ApiException {
        com.squareup.okhttp.Call call = setVcsRootInstanceFieldValidateBeforeCall(vcsRootInstanceLocator, field, body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a field of the matching VCS root instance. (asynchronously)
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param field  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setVcsRootInstanceFieldAsync(String vcsRootInstanceLocator, String field, String body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setVcsRootInstanceFieldValidateBeforeCall(vcsRootInstanceLocator, field, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setVcsRootInstanceRepositoryState
     * @param vcsRootInstanceLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setVcsRootInstanceRepositoryStateCall(String vcsRootInstanceLocator, Entries body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState"
            .replaceAll("\\{" + "vcsRootInstanceLocator" + "\\}", apiClient.escapeString(vcsRootInstanceLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setVcsRootInstanceRepositoryStateValidateBeforeCall(String vcsRootInstanceLocator, Entries body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vcsRootInstanceLocator' is set
        if (vcsRootInstanceLocator == null) {
            throw new ApiException("Missing the required parameter 'vcsRootInstanceLocator' when calling setVcsRootInstanceRepositoryState(Async)");
        }
        

        com.squareup.okhttp.Call call = setVcsRootInstanceRepositoryStateCall(vcsRootInstanceLocator, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update the repository state of the matching VCS root instance.
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return Entries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Entries setVcsRootInstanceRepositoryState(String vcsRootInstanceLocator, Entries body, String fields) throws ApiException {
        ApiResponse<Entries> resp = setVcsRootInstanceRepositoryStateWithHttpInfo(vcsRootInstanceLocator, body, fields);
        return resp.getData();
    }

    /**
     * Update the repository state of the matching VCS root instance.
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Entries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Entries> setVcsRootInstanceRepositoryStateWithHttpInfo(String vcsRootInstanceLocator, Entries body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = setVcsRootInstanceRepositoryStateValidateBeforeCall(vcsRootInstanceLocator, body, fields, null, null);
        Type localVarReturnType = new TypeToken<Entries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the repository state of the matching VCS root instance. (asynchronously)
     * 
     * @param vcsRootInstanceLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setVcsRootInstanceRepositoryStateAsync(String vcsRootInstanceLocator, Entries body, String fields, final ApiCallback<Entries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setVcsRootInstanceRepositoryStateValidateBeforeCall(vcsRootInstanceLocator, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Entries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for triggerCommitHookNotification
     * @param locator  (optional)
     * @param okOnNothingFound  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call triggerCommitHookNotificationCall(String locator, Boolean okOnNothingFound, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/vcs-root-instances/commitHookNotification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locator", locator));
        if (okOnNothingFound != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("okOnNothingFound", okOnNothingFound));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call triggerCommitHookNotificationValidateBeforeCall(String locator, Boolean okOnNothingFound, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = triggerCommitHookNotificationCall(locator, okOnNothingFound, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Send the commit hook notification.
     * 
     * @param locator  (optional)
     * @param okOnNothingFound  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void triggerCommitHookNotification(String locator, Boolean okOnNothingFound) throws ApiException {
        triggerCommitHookNotificationWithHttpInfo(locator, okOnNothingFound);
    }

    /**
     * Send the commit hook notification.
     * 
     * @param locator  (optional)
     * @param okOnNothingFound  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> triggerCommitHookNotificationWithHttpInfo(String locator, Boolean okOnNothingFound) throws ApiException {
        com.squareup.okhttp.Call call = triggerCommitHookNotificationValidateBeforeCall(locator, okOnNothingFound, null, null);
        return apiClient.execute(call);
    }

    /**
     * Send the commit hook notification. (asynchronously)
     * 
     * @param locator  (optional)
     * @param okOnNothingFound  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call triggerCommitHookNotificationAsync(String locator, Boolean okOnNothingFound, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = triggerCommitHookNotificationValidateBeforeCall(locator, okOnNothingFound, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
