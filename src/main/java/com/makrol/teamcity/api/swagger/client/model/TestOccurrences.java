/*
 * TeamCity REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.makrol.teamcity.api.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.makrol.teamcity.api.swagger.client.model.TestCounters;
import com.makrol.teamcity.api.swagger.client.model.TestOccurrence;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents a paginated list of TestOccurrence entities.
 */
@ApiModel(description = "Represents a paginated list of TestOccurrence entities.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-01-14T01:07:21.722+03:00")
public class TestOccurrences {
  @SerializedName("count")
  private Integer count = null;

  @SerializedName("href")
  private String href = null;

  @SerializedName("nextHref")
  private String nextHref = null;

  @SerializedName("prevHref")
  private String prevHref = null;

  @SerializedName("testOccurrence")
  private List<TestOccurrence> testOccurrence = null;

  @SerializedName("testCounters")
  private TestCounters testCounters = null;

  @SerializedName("ignored")
  private Integer ignored = null;

  @SerializedName("muted")
  private Integer muted = null;

  @SerializedName("passed")
  private Integer passed = null;

  @SerializedName("failed")
  private Integer failed = null;

  @SerializedName("newFailed")
  private Integer newFailed = null;

  public TestOccurrences count(Integer count) {
    this.count = count;
    return this;
  }

   /**
   * Get count
   * @return count
  **/
  @ApiModelProperty(value = "")
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }

  public TestOccurrences href(String href) {
    this.href = href;
    return this;
  }

   /**
   * Get href
   * @return href
  **/
  @ApiModelProperty(value = "")
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }

  public TestOccurrences nextHref(String nextHref) {
    this.nextHref = nextHref;
    return this;
  }

   /**
   * Get nextHref
   * @return nextHref
  **/
  @ApiModelProperty(value = "")
  public String getNextHref() {
    return nextHref;
  }

  public void setNextHref(String nextHref) {
    this.nextHref = nextHref;
  }

  public TestOccurrences prevHref(String prevHref) {
    this.prevHref = prevHref;
    return this;
  }

   /**
   * Get prevHref
   * @return prevHref
  **/
  @ApiModelProperty(value = "")
  public String getPrevHref() {
    return prevHref;
  }

  public void setPrevHref(String prevHref) {
    this.prevHref = prevHref;
  }

  public TestOccurrences testOccurrence(List<TestOccurrence> testOccurrence) {
    this.testOccurrence = testOccurrence;
    return this;
  }

  public TestOccurrences addTestOccurrenceItem(TestOccurrence testOccurrenceItem) {
    if (this.testOccurrence == null) {
      this.testOccurrence = new ArrayList<TestOccurrence>();
    }
    this.testOccurrence.add(testOccurrenceItem);
    return this;
  }

   /**
   * Get testOccurrence
   * @return testOccurrence
  **/
  @ApiModelProperty(value = "")
  public List<TestOccurrence> getTestOccurrence() {
    return testOccurrence;
  }

  public void setTestOccurrence(List<TestOccurrence> testOccurrence) {
    this.testOccurrence = testOccurrence;
  }

  public TestOccurrences testCounters(TestCounters testCounters) {
    this.testCounters = testCounters;
    return this;
  }

   /**
   * Get testCounters
   * @return testCounters
  **/
  @ApiModelProperty(value = "")
  public TestCounters getTestCounters() {
    return testCounters;
  }

  public void setTestCounters(TestCounters testCounters) {
    this.testCounters = testCounters;
  }

  public TestOccurrences ignored(Integer ignored) {
    this.ignored = ignored;
    return this;
  }

   /**
   * Get ignored
   * @return ignored
  **/
  @ApiModelProperty(value = "")
  public Integer getIgnored() {
    return ignored;
  }

  public void setIgnored(Integer ignored) {
    this.ignored = ignored;
  }

  public TestOccurrences muted(Integer muted) {
    this.muted = muted;
    return this;
  }

   /**
   * Get muted
   * @return muted
  **/
  @ApiModelProperty(value = "")
  public Integer getMuted() {
    return muted;
  }

  public void setMuted(Integer muted) {
    this.muted = muted;
  }

  public TestOccurrences passed(Integer passed) {
    this.passed = passed;
    return this;
  }

   /**
   * Get passed
   * @return passed
  **/
  @ApiModelProperty(value = "")
  public Integer getPassed() {
    return passed;
  }

  public void setPassed(Integer passed) {
    this.passed = passed;
  }

  public TestOccurrences failed(Integer failed) {
    this.failed = failed;
    return this;
  }

   /**
   * Get failed
   * @return failed
  **/
  @ApiModelProperty(value = "")
  public Integer getFailed() {
    return failed;
  }

  public void setFailed(Integer failed) {
    this.failed = failed;
  }

  public TestOccurrences newFailed(Integer newFailed) {
    this.newFailed = newFailed;
    return this;
  }

   /**
   * Get newFailed
   * @return newFailed
  **/
  @ApiModelProperty(value = "")
  public Integer getNewFailed() {
    return newFailed;
  }

  public void setNewFailed(Integer newFailed) {
    this.newFailed = newFailed;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestOccurrences testOccurrences = (TestOccurrences) o;
    return Objects.equals(this.count, testOccurrences.count) &&
        Objects.equals(this.href, testOccurrences.href) &&
        Objects.equals(this.nextHref, testOccurrences.nextHref) &&
        Objects.equals(this.prevHref, testOccurrences.prevHref) &&
        Objects.equals(this.testOccurrence, testOccurrences.testOccurrence) &&
        Objects.equals(this.testCounters, testOccurrences.testCounters) &&
        Objects.equals(this.ignored, testOccurrences.ignored) &&
        Objects.equals(this.muted, testOccurrences.muted) &&
        Objects.equals(this.passed, testOccurrences.passed) &&
        Objects.equals(this.failed, testOccurrences.failed) &&
        Objects.equals(this.newFailed, testOccurrences.newFailed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, href, nextHref, prevHref, testOccurrence, testCounters, ignored, muted, passed, failed, newFailed);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestOccurrences {\n");
    
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    nextHref: ").append(toIndentedString(nextHref)).append("\n");
    sb.append("    prevHref: ").append(toIndentedString(prevHref)).append("\n");
    sb.append("    testOccurrence: ").append(toIndentedString(testOccurrence)).append("\n");
    sb.append("    testCounters: ").append(toIndentedString(testCounters)).append("\n");
    sb.append("    ignored: ").append(toIndentedString(ignored)).append("\n");
    sb.append("    muted: ").append(toIndentedString(muted)).append("\n");
    sb.append("    passed: ").append(toIndentedString(passed)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    newFailed: ").append(toIndentedString(newFailed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

