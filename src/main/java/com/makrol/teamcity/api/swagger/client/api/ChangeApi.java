/*
 * TeamCity REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.makrol.teamcity.api.swagger.client.api;

import com.makrol.teamcity.api.swagger.client.ApiCallback;
import com.makrol.teamcity.api.swagger.client.ApiClient;
import com.makrol.teamcity.api.swagger.client.ApiException;
import com.makrol.teamcity.api.swagger.client.ApiResponse;
import com.makrol.teamcity.api.swagger.client.Configuration;
import com.makrol.teamcity.api.swagger.client.Pair;
import com.makrol.teamcity.api.swagger.client.ProgressRequestBody;
import com.makrol.teamcity.api.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.makrol.teamcity.api.swagger.client.model.Change;
import com.makrol.teamcity.api.swagger.client.model.Changes;
import com.makrol.teamcity.api.swagger.client.model.Entries;
import com.makrol.teamcity.api.swagger.client.model.Issues;
import com.makrol.teamcity.api.swagger.client.model.Items;
import com.makrol.teamcity.api.swagger.client.model.VcsRootInstance;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChangeApi {
    private ApiClient apiClient;

    public ChangeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChangeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAllChanges
     * @param locator  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllChangesCall(String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/changes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locator", locator));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllChangesValidateBeforeCall(String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllChangesCall(locator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all changes.
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @return Changes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Changes getAllChanges(String locator, String fields) throws ApiException {
        ApiResponse<Changes> resp = getAllChangesWithHttpInfo(locator, fields);
        return resp.getData();
    }

    /**
     * Get all changes.
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Changes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Changes> getAllChangesWithHttpInfo(String locator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllChangesValidateBeforeCall(locator, fields, null, null);
        Type localVarReturnType = new TypeToken<Changes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all changes. (asynchronously)
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllChangesAsync(String locator, String fields, final ApiCallback<Changes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllChangesValidateBeforeCall(locator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Changes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChange
     * @param changeLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChangeCall(String changeLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/changes/{changeLocator}"
            .replaceAll("\\{" + "changeLocator" + "\\}", apiClient.escapeString(changeLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChangeValidateBeforeCall(String changeLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'changeLocator' is set
        if (changeLocator == null) {
            throw new ApiException("Missing the required parameter 'changeLocator' when calling getChange(Async)");
        }
        

        com.squareup.okhttp.Call call = getChangeCall(changeLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get change matching the locator.
     * 
     * @param changeLocator  (required)
     * @param fields  (optional)
     * @return Change
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Change getChange(String changeLocator, String fields) throws ApiException {
        ApiResponse<Change> resp = getChangeWithHttpInfo(changeLocator, fields);
        return resp.getData();
    }

    /**
     * Get change matching the locator.
     * 
     * @param changeLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Change&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Change> getChangeWithHttpInfo(String changeLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getChangeValidateBeforeCall(changeLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<Change>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get change matching the locator. (asynchronously)
     * 
     * @param changeLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChangeAsync(String changeLocator, String fields, final ApiCallback<Change> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChangeValidateBeforeCall(changeLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Change>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChangeAttributes
     * @param changeLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChangeAttributesCall(String changeLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/changes/{changeLocator}/attributes"
            .replaceAll("\\{" + "changeLocator" + "\\}", apiClient.escapeString(changeLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChangeAttributesValidateBeforeCall(String changeLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'changeLocator' is set
        if (changeLocator == null) {
            throw new ApiException("Missing the required parameter 'changeLocator' when calling getChangeAttributes(Async)");
        }
        

        com.squareup.okhttp.Call call = getChangeAttributesCall(changeLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get attributes of the matching change.
     * 
     * @param changeLocator  (required)
     * @param fields  (optional)
     * @return Entries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Entries getChangeAttributes(String changeLocator, String fields) throws ApiException {
        ApiResponse<Entries> resp = getChangeAttributesWithHttpInfo(changeLocator, fields);
        return resp.getData();
    }

    /**
     * Get attributes of the matching change.
     * 
     * @param changeLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Entries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Entries> getChangeAttributesWithHttpInfo(String changeLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getChangeAttributesValidateBeforeCall(changeLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<Entries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get attributes of the matching change. (asynchronously)
     * 
     * @param changeLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChangeAttributesAsync(String changeLocator, String fields, final ApiCallback<Entries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChangeAttributesValidateBeforeCall(changeLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Entries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChangeDuplicates
     * @param changeLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChangeDuplicatesCall(String changeLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/changes/{changeLocator}/duplicates"
            .replaceAll("\\{" + "changeLocator" + "\\}", apiClient.escapeString(changeLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChangeDuplicatesValidateBeforeCall(String changeLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'changeLocator' is set
        if (changeLocator == null) {
            throw new ApiException("Missing the required parameter 'changeLocator' when calling getChangeDuplicates(Async)");
        }
        

        com.squareup.okhttp.Call call = getChangeDuplicatesCall(changeLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get duplicates of the matching change.
     * 
     * @param changeLocator  (required)
     * @param fields  (optional)
     * @return Changes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Changes getChangeDuplicates(String changeLocator, String fields) throws ApiException {
        ApiResponse<Changes> resp = getChangeDuplicatesWithHttpInfo(changeLocator, fields);
        return resp.getData();
    }

    /**
     * Get duplicates of the matching change.
     * 
     * @param changeLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Changes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Changes> getChangeDuplicatesWithHttpInfo(String changeLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getChangeDuplicatesValidateBeforeCall(changeLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<Changes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get duplicates of the matching change. (asynchronously)
     * 
     * @param changeLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChangeDuplicatesAsync(String changeLocator, String fields, final ApiCallback<Changes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChangeDuplicatesValidateBeforeCall(changeLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Changes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChangeField
     * @param changeLocator  (required)
     * @param field  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChangeFieldCall(String changeLocator, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/changes/{changeLocator}/{field}"
            .replaceAll("\\{" + "changeLocator" + "\\}", apiClient.escapeString(changeLocator.toString()))
            .replaceAll("\\{" + "field" + "\\}", apiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChangeFieldValidateBeforeCall(String changeLocator, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'changeLocator' is set
        if (changeLocator == null) {
            throw new ApiException("Missing the required parameter 'changeLocator' when calling getChangeField(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getChangeField(Async)");
        }
        

        com.squareup.okhttp.Call call = getChangeFieldCall(changeLocator, field, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a field of the matching change.
     * 
     * @param changeLocator  (required)
     * @param field  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getChangeField(String changeLocator, String field) throws ApiException {
        ApiResponse<String> resp = getChangeFieldWithHttpInfo(changeLocator, field);
        return resp.getData();
    }

    /**
     * Get a field of the matching change.
     * 
     * @param changeLocator  (required)
     * @param field  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getChangeFieldWithHttpInfo(String changeLocator, String field) throws ApiException {
        com.squareup.okhttp.Call call = getChangeFieldValidateBeforeCall(changeLocator, field, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a field of the matching change. (asynchronously)
     * 
     * @param changeLocator  (required)
     * @param field  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChangeFieldAsync(String changeLocator, String field, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChangeFieldValidateBeforeCall(changeLocator, field, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChangeIssue
     * @param changeLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChangeIssueCall(String changeLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/changes/{changeLocator}/issues"
            .replaceAll("\\{" + "changeLocator" + "\\}", apiClient.escapeString(changeLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChangeIssueValidateBeforeCall(String changeLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'changeLocator' is set
        if (changeLocator == null) {
            throw new ApiException("Missing the required parameter 'changeLocator' when calling getChangeIssue(Async)");
        }
        

        com.squareup.okhttp.Call call = getChangeIssueCall(changeLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get issues of the matching change.
     * 
     * @param changeLocator  (required)
     * @return Issues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Issues getChangeIssue(String changeLocator) throws ApiException {
        ApiResponse<Issues> resp = getChangeIssueWithHttpInfo(changeLocator);
        return resp.getData();
    }

    /**
     * Get issues of the matching change.
     * 
     * @param changeLocator  (required)
     * @return ApiResponse&lt;Issues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Issues> getChangeIssueWithHttpInfo(String changeLocator) throws ApiException {
        com.squareup.okhttp.Call call = getChangeIssueValidateBeforeCall(changeLocator, null, null);
        Type localVarReturnType = new TypeToken<Issues>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get issues of the matching change. (asynchronously)
     * 
     * @param changeLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChangeIssueAsync(String changeLocator, final ApiCallback<Issues> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChangeIssueValidateBeforeCall(changeLocator, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Issues>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChangeParentChanges
     * @param changeLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChangeParentChangesCall(String changeLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/changes/{changeLocator}/parentChanges"
            .replaceAll("\\{" + "changeLocator" + "\\}", apiClient.escapeString(changeLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChangeParentChangesValidateBeforeCall(String changeLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'changeLocator' is set
        if (changeLocator == null) {
            throw new ApiException("Missing the required parameter 'changeLocator' when calling getChangeParentChanges(Async)");
        }
        

        com.squareup.okhttp.Call call = getChangeParentChangesCall(changeLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get parent changes of the matching change.
     * 
     * @param changeLocator  (required)
     * @param fields  (optional)
     * @return Changes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Changes getChangeParentChanges(String changeLocator, String fields) throws ApiException {
        ApiResponse<Changes> resp = getChangeParentChangesWithHttpInfo(changeLocator, fields);
        return resp.getData();
    }

    /**
     * Get parent changes of the matching change.
     * 
     * @param changeLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Changes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Changes> getChangeParentChangesWithHttpInfo(String changeLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getChangeParentChangesValidateBeforeCall(changeLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<Changes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get parent changes of the matching change. (asynchronously)
     * 
     * @param changeLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChangeParentChangesAsync(String changeLocator, String fields, final ApiCallback<Changes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChangeParentChangesValidateBeforeCall(changeLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Changes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChangeParentRevisions
     * @param changeLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChangeParentRevisionsCall(String changeLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/changes/{changeLocator}/parentRevisions"
            .replaceAll("\\{" + "changeLocator" + "\\}", apiClient.escapeString(changeLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChangeParentRevisionsValidateBeforeCall(String changeLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'changeLocator' is set
        if (changeLocator == null) {
            throw new ApiException("Missing the required parameter 'changeLocator' when calling getChangeParentRevisions(Async)");
        }
        

        com.squareup.okhttp.Call call = getChangeParentRevisionsCall(changeLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get parent revisions of the matching change.
     * 
     * @param changeLocator  (required)
     * @return Items
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Items getChangeParentRevisions(String changeLocator) throws ApiException {
        ApiResponse<Items> resp = getChangeParentRevisionsWithHttpInfo(changeLocator);
        return resp.getData();
    }

    /**
     * Get parent revisions of the matching change.
     * 
     * @param changeLocator  (required)
     * @return ApiResponse&lt;Items&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Items> getChangeParentRevisionsWithHttpInfo(String changeLocator) throws ApiException {
        com.squareup.okhttp.Call call = getChangeParentRevisionsValidateBeforeCall(changeLocator, null, null);
        Type localVarReturnType = new TypeToken<Items>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get parent revisions of the matching change. (asynchronously)
     * 
     * @param changeLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChangeParentRevisionsAsync(String changeLocator, final ApiCallback<Items> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChangeParentRevisionsValidateBeforeCall(changeLocator, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Items>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChangeVcsRoot
     * @param changeLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChangeVcsRootCall(String changeLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/changes/{changeLocator}/vcsRootInstance"
            .replaceAll("\\{" + "changeLocator" + "\\}", apiClient.escapeString(changeLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChangeVcsRootValidateBeforeCall(String changeLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'changeLocator' is set
        if (changeLocator == null) {
            throw new ApiException("Missing the required parameter 'changeLocator' when calling getChangeVcsRoot(Async)");
        }
        

        com.squareup.okhttp.Call call = getChangeVcsRootCall(changeLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a VCS root instance of the matching change.
     * 
     * @param changeLocator  (required)
     * @param fields  (optional)
     * @return VcsRootInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VcsRootInstance getChangeVcsRoot(String changeLocator, String fields) throws ApiException {
        ApiResponse<VcsRootInstance> resp = getChangeVcsRootWithHttpInfo(changeLocator, fields);
        return resp.getData();
    }

    /**
     * Get a VCS root instance of the matching change.
     * 
     * @param changeLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;VcsRootInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VcsRootInstance> getChangeVcsRootWithHttpInfo(String changeLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getChangeVcsRootValidateBeforeCall(changeLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<VcsRootInstance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a VCS root instance of the matching change. (asynchronously)
     * 
     * @param changeLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChangeVcsRootAsync(String changeLocator, String fields, final ApiCallback<VcsRootInstance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChangeVcsRootValidateBeforeCall(changeLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VcsRootInstance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
