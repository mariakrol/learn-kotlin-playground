/*
 * TeamCity REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.makrol.teamcity.api.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.makrol.teamcity.api.swagger.client.model.Test;
import com.makrol.teamcity.api.swagger.client.model.TestCounters;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents a paginated list of Test entities.
 */
@ApiModel(description = "Represents a paginated list of Test entities.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-01-14T01:07:21.722+03:00")
public class Tests {
  @SerializedName("count")
  private Integer count = null;

  @SerializedName("myTestCounters")
  private TestCounters myTestCounters = null;

  @SerializedName("nextHref")
  private String nextHref = null;

  @SerializedName("prevHref")
  private String prevHref = null;

  @SerializedName("test")
  private List<Test> test = null;

  public Tests count(Integer count) {
    this.count = count;
    return this;
  }

   /**
   * Get count
   * @return count
  **/
  @ApiModelProperty(value = "")
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }

  public Tests myTestCounters(TestCounters myTestCounters) {
    this.myTestCounters = myTestCounters;
    return this;
  }

   /**
   * Get myTestCounters
   * @return myTestCounters
  **/
  @ApiModelProperty(value = "")
  public TestCounters getMyTestCounters() {
    return myTestCounters;
  }

  public void setMyTestCounters(TestCounters myTestCounters) {
    this.myTestCounters = myTestCounters;
  }

  public Tests nextHref(String nextHref) {
    this.nextHref = nextHref;
    return this;
  }

   /**
   * Get nextHref
   * @return nextHref
  **/
  @ApiModelProperty(value = "")
  public String getNextHref() {
    return nextHref;
  }

  public void setNextHref(String nextHref) {
    this.nextHref = nextHref;
  }

  public Tests prevHref(String prevHref) {
    this.prevHref = prevHref;
    return this;
  }

   /**
   * Get prevHref
   * @return prevHref
  **/
  @ApiModelProperty(value = "")
  public String getPrevHref() {
    return prevHref;
  }

  public void setPrevHref(String prevHref) {
    this.prevHref = prevHref;
  }

  public Tests test(List<Test> test) {
    this.test = test;
    return this;
  }

  public Tests addTestItem(Test testItem) {
    if (this.test == null) {
      this.test = new ArrayList<Test>();
    }
    this.test.add(testItem);
    return this;
  }

   /**
   * Get test
   * @return test
  **/
  @ApiModelProperty(value = "")
  public List<Test> getTest() {
    return test;
  }

  public void setTest(List<Test> test) {
    this.test = test;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Tests tests = (Tests) o;
    return Objects.equals(this.count, tests.count) &&
        Objects.equals(this.myTestCounters, tests.myTestCounters) &&
        Objects.equals(this.nextHref, tests.nextHref) &&
        Objects.equals(this.prevHref, tests.prevHref) &&
        Objects.equals(this.test, tests.test);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, myTestCounters, nextHref, prevHref, test);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Tests {\n");
    
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    myTestCounters: ").append(toIndentedString(myTestCounters)).append("\n");
    sb.append("    nextHref: ").append(toIndentedString(nextHref)).append("\n");
    sb.append("    prevHref: ").append(toIndentedString(prevHref)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

