/*
 * TeamCity REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.makrol.teamcity.api.swagger.client.api;

import com.makrol.teamcity.api.swagger.client.ApiCallback;
import com.makrol.teamcity.api.swagger.client.ApiClient;
import com.makrol.teamcity.api.swagger.client.ApiException;
import com.makrol.teamcity.api.swagger.client.ApiResponse;
import com.makrol.teamcity.api.swagger.client.Configuration;
import com.makrol.teamcity.api.swagger.client.Pair;
import com.makrol.teamcity.api.swagger.client.ProgressRequestBody;
import com.makrol.teamcity.api.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.makrol.teamcity.api.swagger.client.model.AgentRequirement;
import com.makrol.teamcity.api.swagger.client.model.AgentRequirements;
import com.makrol.teamcity.api.swagger.client.model.ArtifactDependencies;
import com.makrol.teamcity.api.swagger.client.model.ArtifactDependency;
import com.makrol.teamcity.api.swagger.client.model.Branches;
import com.makrol.teamcity.api.swagger.client.model.BuildType;
import com.makrol.teamcity.api.swagger.client.model.BuildTypes;
import com.makrol.teamcity.api.swagger.client.model.Builds;
import com.makrol.teamcity.api.swagger.client.model.Feature;
import com.makrol.teamcity.api.swagger.client.model.Features;
import com.makrol.teamcity.api.swagger.client.model.Files;
import com.makrol.teamcity.api.swagger.client.model.File;
import com.makrol.teamcity.api.swagger.client.model.Investigations;
import com.makrol.teamcity.api.swagger.client.model.Items;
import com.makrol.teamcity.api.swagger.client.model.Properties;
import com.makrol.teamcity.api.swagger.client.model.Property;
import com.makrol.teamcity.api.swagger.client.model.SnapshotDependencies;
import com.makrol.teamcity.api.swagger.client.model.SnapshotDependency;
import com.makrol.teamcity.api.swagger.client.model.Step;
import com.makrol.teamcity.api.swagger.client.model.Steps;
import com.makrol.teamcity.api.swagger.client.model.Tags;
import com.makrol.teamcity.api.swagger.client.model.Trigger;
import com.makrol.teamcity.api.swagger.client.model.Triggers;
import com.makrol.teamcity.api.swagger.client.model.VcsRootEntries;
import com.makrol.teamcity.api.swagger.client.model.VcsRootEntry;
import com.makrol.teamcity.api.swagger.client.model.VcsRootInstances;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BuildTypeApi {
    private ApiClient apiClient;

    public BuildTypeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BuildTypeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addAgentRequirementToBuildType
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addAgentRequirementToBuildTypeCall(String btLocator, String fields, AgentRequirement body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/agent-requirements"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addAgentRequirementToBuildTypeValidateBeforeCall(String btLocator, String fields, AgentRequirement body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling addAgentRequirementToBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = addAgentRequirementToBuildTypeCall(btLocator, fields, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add an agent requirement to the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return AgentRequirement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AgentRequirement addAgentRequirementToBuildType(String btLocator, String fields, AgentRequirement body) throws ApiException {
        ApiResponse<AgentRequirement> resp = addAgentRequirementToBuildTypeWithHttpInfo(btLocator, fields, body);
        return resp.getData();
    }

    /**
     * Add an agent requirement to the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;AgentRequirement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AgentRequirement> addAgentRequirementToBuildTypeWithHttpInfo(String btLocator, String fields, AgentRequirement body) throws ApiException {
        com.squareup.okhttp.Call call = addAgentRequirementToBuildTypeValidateBeforeCall(btLocator, fields, body, null, null);
        Type localVarReturnType = new TypeToken<AgentRequirement>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add an agent requirement to the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addAgentRequirementToBuildTypeAsync(String btLocator, String fields, AgentRequirement body, final ApiCallback<AgentRequirement> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addAgentRequirementToBuildTypeValidateBeforeCall(btLocator, fields, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AgentRequirement>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addArtifactDependencyToBuildType
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addArtifactDependencyToBuildTypeCall(String btLocator, String fields, ArtifactDependency body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/artifact-dependencies"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addArtifactDependencyToBuildTypeValidateBeforeCall(String btLocator, String fields, ArtifactDependency body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling addArtifactDependencyToBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = addArtifactDependencyToBuildTypeCall(btLocator, fields, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add an artifact dependency to the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return ArtifactDependency
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArtifactDependency addArtifactDependencyToBuildType(String btLocator, String fields, ArtifactDependency body) throws ApiException {
        ApiResponse<ArtifactDependency> resp = addArtifactDependencyToBuildTypeWithHttpInfo(btLocator, fields, body);
        return resp.getData();
    }

    /**
     * Add an artifact dependency to the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;ArtifactDependency&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArtifactDependency> addArtifactDependencyToBuildTypeWithHttpInfo(String btLocator, String fields, ArtifactDependency body) throws ApiException {
        com.squareup.okhttp.Call call = addArtifactDependencyToBuildTypeValidateBeforeCall(btLocator, fields, body, null, null);
        Type localVarReturnType = new TypeToken<ArtifactDependency>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add an artifact dependency to the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addArtifactDependencyToBuildTypeAsync(String btLocator, String fields, ArtifactDependency body, final ApiCallback<ArtifactDependency> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addArtifactDependencyToBuildTypeValidateBeforeCall(btLocator, fields, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArtifactDependency>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addBuildFeatureToBuildType
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBuildFeatureToBuildTypeCall(String btLocator, String fields, Feature body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/features"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBuildFeatureToBuildTypeValidateBeforeCall(String btLocator, String fields, Feature body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling addBuildFeatureToBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = addBuildFeatureToBuildTypeCall(btLocator, fields, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add build feature to the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return Feature
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Feature addBuildFeatureToBuildType(String btLocator, String fields, Feature body) throws ApiException {
        ApiResponse<Feature> resp = addBuildFeatureToBuildTypeWithHttpInfo(btLocator, fields, body);
        return resp.getData();
    }

    /**
     * Add build feature to the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;Feature&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Feature> addBuildFeatureToBuildTypeWithHttpInfo(String btLocator, String fields, Feature body) throws ApiException {
        com.squareup.okhttp.Call call = addBuildFeatureToBuildTypeValidateBeforeCall(btLocator, fields, body, null, null);
        Type localVarReturnType = new TypeToken<Feature>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add build feature to the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBuildFeatureToBuildTypeAsync(String btLocator, String fields, Feature body, final ApiCallback<Feature> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBuildFeatureToBuildTypeValidateBeforeCall(btLocator, fields, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Feature>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addBuildStepToBuildType
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBuildStepToBuildTypeCall(String btLocator, String fields, Step body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/steps"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBuildStepToBuildTypeValidateBeforeCall(String btLocator, String fields, Step body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling addBuildStepToBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = addBuildStepToBuildTypeCall(btLocator, fields, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add a build step to the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return Step
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Step addBuildStepToBuildType(String btLocator, String fields, Step body) throws ApiException {
        ApiResponse<Step> resp = addBuildStepToBuildTypeWithHttpInfo(btLocator, fields, body);
        return resp.getData();
    }

    /**
     * Add a build step to the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;Step&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Step> addBuildStepToBuildTypeWithHttpInfo(String btLocator, String fields, Step body) throws ApiException {
        com.squareup.okhttp.Call call = addBuildStepToBuildTypeValidateBeforeCall(btLocator, fields, body, null, null);
        Type localVarReturnType = new TypeToken<Step>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a build step to the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBuildStepToBuildTypeAsync(String btLocator, String fields, Step body, final ApiCallback<Step> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBuildStepToBuildTypeValidateBeforeCall(btLocator, fields, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Step>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addBuildTemplate
     * @param btLocator  (required)
     * @param body  (optional)
     * @param optimizeSettings  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBuildTemplateCall(String btLocator, BuildType body, Boolean optimizeSettings, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/templates"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (optimizeSettings != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("optimizeSettings", optimizeSettings));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBuildTemplateValidateBeforeCall(String btLocator, BuildType body, Boolean optimizeSettings, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling addBuildTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = addBuildTemplateCall(btLocator, body, optimizeSettings, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add a build template to the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param body  (optional)
     * @param optimizeSettings  (optional)
     * @param fields  (optional)
     * @return BuildType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuildType addBuildTemplate(String btLocator, BuildType body, Boolean optimizeSettings, String fields) throws ApiException {
        ApiResponse<BuildType> resp = addBuildTemplateWithHttpInfo(btLocator, body, optimizeSettings, fields);
        return resp.getData();
    }

    /**
     * Add a build template to the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param body  (optional)
     * @param optimizeSettings  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;BuildType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuildType> addBuildTemplateWithHttpInfo(String btLocator, BuildType body, Boolean optimizeSettings, String fields) throws ApiException {
        com.squareup.okhttp.Call call = addBuildTemplateValidateBeforeCall(btLocator, body, optimizeSettings, fields, null, null);
        Type localVarReturnType = new TypeToken<BuildType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a build template to the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param body  (optional)
     * @param optimizeSettings  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBuildTemplateAsync(String btLocator, BuildType body, Boolean optimizeSettings, String fields, final ApiCallback<BuildType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBuildTemplateValidateBeforeCall(btLocator, body, optimizeSettings, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuildType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addParameterToBuildFeature
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param parameterName  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addParameterToBuildFeatureCall(String btLocator, String featureId, String parameterName, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "featureId" + "\\}", apiClient.escapeString(featureId.toString()))
            .replaceAll("\\{" + "parameterName" + "\\}", apiClient.escapeString(parameterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addParameterToBuildFeatureValidateBeforeCall(String btLocator, String featureId, String parameterName, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling addParameterToBuildFeature(Async)");
        }
        
        // verify the required parameter 'featureId' is set
        if (featureId == null) {
            throw new ApiException("Missing the required parameter 'featureId' when calling addParameterToBuildFeature(Async)");
        }
        
        // verify the required parameter 'parameterName' is set
        if (parameterName == null) {
            throw new ApiException("Missing the required parameter 'parameterName' when calling addParameterToBuildFeature(Async)");
        }
        

        com.squareup.okhttp.Call call = addParameterToBuildFeatureCall(btLocator, featureId, parameterName, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update build feature parameter for the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param parameterName  (required)
     * @param body  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String addParameterToBuildFeature(String btLocator, String featureId, String parameterName, String body) throws ApiException {
        ApiResponse<String> resp = addParameterToBuildFeatureWithHttpInfo(btLocator, featureId, parameterName, body);
        return resp.getData();
    }

    /**
     * Update build feature parameter for the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param parameterName  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> addParameterToBuildFeatureWithHttpInfo(String btLocator, String featureId, String parameterName, String body) throws ApiException {
        com.squareup.okhttp.Call call = addParameterToBuildFeatureValidateBeforeCall(btLocator, featureId, parameterName, body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update build feature parameter for the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param parameterName  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addParameterToBuildFeatureAsync(String btLocator, String featureId, String parameterName, String body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addParameterToBuildFeatureValidateBeforeCall(btLocator, featureId, parameterName, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addParameterToBuildStep
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param parameterName  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addParameterToBuildStepCall(String btLocator, String stepId, String parameterName, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "stepId" + "\\}", apiClient.escapeString(stepId.toString()))
            .replaceAll("\\{" + "parameterName" + "\\}", apiClient.escapeString(parameterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addParameterToBuildStepValidateBeforeCall(String btLocator, String stepId, String parameterName, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling addParameterToBuildStep(Async)");
        }
        
        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling addParameterToBuildStep(Async)");
        }
        
        // verify the required parameter 'parameterName' is set
        if (parameterName == null) {
            throw new ApiException("Missing the required parameter 'parameterName' when calling addParameterToBuildStep(Async)");
        }
        

        com.squareup.okhttp.Call call = addParameterToBuildStepCall(btLocator, stepId, parameterName, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add a parameter to a build step of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param parameterName  (required)
     * @param body  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String addParameterToBuildStep(String btLocator, String stepId, String parameterName, String body) throws ApiException {
        ApiResponse<String> resp = addParameterToBuildStepWithHttpInfo(btLocator, stepId, parameterName, body);
        return resp.getData();
    }

    /**
     * Add a parameter to a build step of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param parameterName  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> addParameterToBuildStepWithHttpInfo(String btLocator, String stepId, String parameterName, String body) throws ApiException {
        com.squareup.okhttp.Call call = addParameterToBuildStepValidateBeforeCall(btLocator, stepId, parameterName, body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a parameter to a build step of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param parameterName  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addParameterToBuildStepAsync(String btLocator, String stepId, String parameterName, String body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addParameterToBuildStepValidateBeforeCall(btLocator, stepId, parameterName, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addSnapshotDependencyToBuildType
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addSnapshotDependencyToBuildTypeCall(String btLocator, String fields, SnapshotDependency body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/snapshot-dependencies"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addSnapshotDependencyToBuildTypeValidateBeforeCall(String btLocator, String fields, SnapshotDependency body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling addSnapshotDependencyToBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = addSnapshotDependencyToBuildTypeCall(btLocator, fields, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add a snapshot dependency to the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return SnapshotDependency
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotDependency addSnapshotDependencyToBuildType(String btLocator, String fields, SnapshotDependency body) throws ApiException {
        ApiResponse<SnapshotDependency> resp = addSnapshotDependencyToBuildTypeWithHttpInfo(btLocator, fields, body);
        return resp.getData();
    }

    /**
     * Add a snapshot dependency to the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;SnapshotDependency&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotDependency> addSnapshotDependencyToBuildTypeWithHttpInfo(String btLocator, String fields, SnapshotDependency body) throws ApiException {
        com.squareup.okhttp.Call call = addSnapshotDependencyToBuildTypeValidateBeforeCall(btLocator, fields, body, null, null);
        Type localVarReturnType = new TypeToken<SnapshotDependency>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a snapshot dependency to the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addSnapshotDependencyToBuildTypeAsync(String btLocator, String fields, SnapshotDependency body, final ApiCallback<SnapshotDependency> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addSnapshotDependencyToBuildTypeValidateBeforeCall(btLocator, fields, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotDependency>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addTriggerToBuildType
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addTriggerToBuildTypeCall(String btLocator, String fields, Trigger body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/triggers"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addTriggerToBuildTypeValidateBeforeCall(String btLocator, String fields, Trigger body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling addTriggerToBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = addTriggerToBuildTypeCall(btLocator, fields, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add a trigger to the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return Trigger
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Trigger addTriggerToBuildType(String btLocator, String fields, Trigger body) throws ApiException {
        ApiResponse<Trigger> resp = addTriggerToBuildTypeWithHttpInfo(btLocator, fields, body);
        return resp.getData();
    }

    /**
     * Add a trigger to the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;Trigger&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Trigger> addTriggerToBuildTypeWithHttpInfo(String btLocator, String fields, Trigger body) throws ApiException {
        com.squareup.okhttp.Call call = addTriggerToBuildTypeValidateBeforeCall(btLocator, fields, body, null, null);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a trigger to the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTriggerToBuildTypeAsync(String btLocator, String fields, Trigger body, final ApiCallback<Trigger> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTriggerToBuildTypeValidateBeforeCall(btLocator, fields, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addVcsRootToBuildType
     * @param btLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addVcsRootToBuildTypeCall(String btLocator, VcsRootEntry body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-entries"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addVcsRootToBuildTypeValidateBeforeCall(String btLocator, VcsRootEntry body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling addVcsRootToBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = addVcsRootToBuildTypeCall(btLocator, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add a VCS root to the matching build.
     * 
     * @param btLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return VcsRootEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VcsRootEntry addVcsRootToBuildType(String btLocator, VcsRootEntry body, String fields) throws ApiException {
        ApiResponse<VcsRootEntry> resp = addVcsRootToBuildTypeWithHttpInfo(btLocator, body, fields);
        return resp.getData();
    }

    /**
     * Add a VCS root to the matching build.
     * 
     * @param btLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;VcsRootEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VcsRootEntry> addVcsRootToBuildTypeWithHttpInfo(String btLocator, VcsRootEntry body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = addVcsRootToBuildTypeValidateBeforeCall(btLocator, body, fields, null, null);
        Type localVarReturnType = new TypeToken<VcsRootEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a VCS root to the matching build. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addVcsRootToBuildTypeAsync(String btLocator, VcsRootEntry body, String fields, final ApiCallback<VcsRootEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addVcsRootToBuildTypeValidateBeforeCall(btLocator, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VcsRootEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createBuildParameterOfBuildType
     * @param btLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBuildParameterOfBuildTypeCall(String btLocator, Property body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/parameters"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBuildParameterOfBuildTypeValidateBeforeCall(String btLocator, Property body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling createBuildParameterOfBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = createBuildParameterOfBuildTypeCall(btLocator, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a build parameter.
     * 
     * @param btLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return Property
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Property createBuildParameterOfBuildType(String btLocator, Property body, String fields) throws ApiException {
        ApiResponse<Property> resp = createBuildParameterOfBuildTypeWithHttpInfo(btLocator, body, fields);
        return resp.getData();
    }

    /**
     * Create a build parameter.
     * 
     * @param btLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Property&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Property> createBuildParameterOfBuildTypeWithHttpInfo(String btLocator, Property body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = createBuildParameterOfBuildTypeValidateBeforeCall(btLocator, body, fields, null, null);
        Type localVarReturnType = new TypeToken<Property>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a build parameter. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBuildParameterOfBuildTypeAsync(String btLocator, Property body, String fields, final ApiCallback<Property> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBuildParameterOfBuildTypeValidateBeforeCall(btLocator, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Property>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createBuildType
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBuildTypeCall(BuildType body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBuildTypeValidateBeforeCall(BuildType body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createBuildTypeCall(body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new build configuration.
     * 
     * @param body  (optional)
     * @param fields  (optional)
     * @return BuildType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuildType createBuildType(BuildType body, String fields) throws ApiException {
        ApiResponse<BuildType> resp = createBuildTypeWithHttpInfo(body, fields);
        return resp.getData();
    }

    /**
     * Create a new build configuration.
     * 
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;BuildType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuildType> createBuildTypeWithHttpInfo(BuildType body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = createBuildTypeValidateBeforeCall(body, fields, null, null);
        Type localVarReturnType = new TypeToken<BuildType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new build configuration. (asynchronously)
     * 
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBuildTypeAsync(BuildType body, String fields, final ApiCallback<BuildType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBuildTypeValidateBeforeCall(body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuildType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAgentRequirement
     * @param btLocator  (required)
     * @param agentRequirementLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAgentRequirementCall(String btLocator, String agentRequirementLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "agentRequirementLocator" + "\\}", apiClient.escapeString(agentRequirementLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAgentRequirementValidateBeforeCall(String btLocator, String agentRequirementLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling deleteAgentRequirement(Async)");
        }
        
        // verify the required parameter 'agentRequirementLocator' is set
        if (agentRequirementLocator == null) {
            throw new ApiException("Missing the required parameter 'agentRequirementLocator' when calling deleteAgentRequirement(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAgentRequirementCall(btLocator, agentRequirementLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove an agent requirement of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param agentRequirementLocator  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAgentRequirement(String btLocator, String agentRequirementLocator) throws ApiException {
        deleteAgentRequirementWithHttpInfo(btLocator, agentRequirementLocator);
    }

    /**
     * Remove an agent requirement of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param agentRequirementLocator  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAgentRequirementWithHttpInfo(String btLocator, String agentRequirementLocator) throws ApiException {
        com.squareup.okhttp.Call call = deleteAgentRequirementValidateBeforeCall(btLocator, agentRequirementLocator, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove an agent requirement of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param agentRequirementLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAgentRequirementAsync(String btLocator, String agentRequirementLocator, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAgentRequirementValidateBeforeCall(btLocator, agentRequirementLocator, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteArtifactDependency
     * @param btLocator  (required)
     * @param artifactDepLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteArtifactDependencyCall(String btLocator, String artifactDepLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "artifactDepLocator" + "\\}", apiClient.escapeString(artifactDepLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteArtifactDependencyValidateBeforeCall(String btLocator, String artifactDepLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling deleteArtifactDependency(Async)");
        }
        
        // verify the required parameter 'artifactDepLocator' is set
        if (artifactDepLocator == null) {
            throw new ApiException("Missing the required parameter 'artifactDepLocator' when calling deleteArtifactDependency(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteArtifactDependencyCall(btLocator, artifactDepLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove an artifact dependency from the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param artifactDepLocator  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteArtifactDependency(String btLocator, String artifactDepLocator) throws ApiException {
        deleteArtifactDependencyWithHttpInfo(btLocator, artifactDepLocator);
    }

    /**
     * Remove an artifact dependency from the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param artifactDepLocator  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteArtifactDependencyWithHttpInfo(String btLocator, String artifactDepLocator) throws ApiException {
        com.squareup.okhttp.Call call = deleteArtifactDependencyValidateBeforeCall(btLocator, artifactDepLocator, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove an artifact dependency from the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param artifactDepLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteArtifactDependencyAsync(String btLocator, String artifactDepLocator, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteArtifactDependencyValidateBeforeCall(btLocator, artifactDepLocator, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteBuildParameterOfBuildType
     * @param name  (required)
     * @param btLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBuildParameterOfBuildTypeCall(String name, String btLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBuildParameterOfBuildTypeValidateBeforeCall(String name, String btLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteBuildParameterOfBuildType(Async)");
        }
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling deleteBuildParameterOfBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBuildParameterOfBuildTypeCall(name, btLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete build parameter.
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBuildParameterOfBuildType(String name, String btLocator) throws ApiException {
        deleteBuildParameterOfBuildTypeWithHttpInfo(name, btLocator);
    }

    /**
     * Delete build parameter.
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBuildParameterOfBuildTypeWithHttpInfo(String name, String btLocator) throws ApiException {
        com.squareup.okhttp.Call call = deleteBuildParameterOfBuildTypeValidateBeforeCall(name, btLocator, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete build parameter. (asynchronously)
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBuildParameterOfBuildTypeAsync(String name, String btLocator, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBuildParameterOfBuildTypeValidateBeforeCall(name, btLocator, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteBuildParametersOfBuildType
     * @param btLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBuildParametersOfBuildTypeCall(String btLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/parameters"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBuildParametersOfBuildTypeValidateBeforeCall(String btLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling deleteBuildParametersOfBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBuildParametersOfBuildTypeCall(btLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete all build parameters.
     * 
     * @param btLocator  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBuildParametersOfBuildType(String btLocator) throws ApiException {
        deleteBuildParametersOfBuildTypeWithHttpInfo(btLocator);
    }

    /**
     * Delete all build parameters.
     * 
     * @param btLocator  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBuildParametersOfBuildTypeWithHttpInfo(String btLocator) throws ApiException {
        com.squareup.okhttp.Call call = deleteBuildParametersOfBuildTypeValidateBeforeCall(btLocator, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete all build parameters. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBuildParametersOfBuildTypeAsync(String btLocator, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBuildParametersOfBuildTypeValidateBeforeCall(btLocator, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteBuildStep
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBuildStepCall(String btLocator, String stepId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "stepId" + "\\}", apiClient.escapeString(stepId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBuildStepValidateBeforeCall(String btLocator, String stepId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling deleteBuildStep(Async)");
        }
        
        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling deleteBuildStep(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBuildStepCall(btLocator, stepId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a build step of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBuildStep(String btLocator, String stepId) throws ApiException {
        deleteBuildStepWithHttpInfo(btLocator, stepId);
    }

    /**
     * Delete a build step of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBuildStepWithHttpInfo(String btLocator, String stepId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBuildStepValidateBeforeCall(btLocator, stepId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a build step of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBuildStepAsync(String btLocator, String stepId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBuildStepValidateBeforeCall(btLocator, stepId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteBuildStepParameters
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBuildStepParametersCall(String btLocator, String stepId, Properties body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "stepId" + "\\}", apiClient.escapeString(stepId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBuildStepParametersValidateBeforeCall(String btLocator, String stepId, Properties body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling deleteBuildStepParameters(Async)");
        }
        
        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling deleteBuildStepParameters(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBuildStepParametersCall(btLocator, stepId, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a parameter of a build step of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return Properties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Properties deleteBuildStepParameters(String btLocator, String stepId, Properties body, String fields) throws ApiException {
        ApiResponse<Properties> resp = deleteBuildStepParametersWithHttpInfo(btLocator, stepId, body, fields);
        return resp.getData();
    }

    /**
     * Update a parameter of a build step of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Properties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Properties> deleteBuildStepParametersWithHttpInfo(String btLocator, String stepId, Properties body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = deleteBuildStepParametersValidateBeforeCall(btLocator, stepId, body, fields, null, null);
        Type localVarReturnType = new TypeToken<Properties>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a parameter of a build step of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBuildStepParametersAsync(String btLocator, String stepId, Properties body, String fields, final ApiCallback<Properties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBuildStepParametersValidateBeforeCall(btLocator, stepId, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Properties>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBuildType
     * @param btLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBuildTypeCall(String btLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBuildTypeValidateBeforeCall(String btLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling deleteBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBuildTypeCall(btLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete build configuration matching the locator.
     * 
     * @param btLocator  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBuildType(String btLocator) throws ApiException {
        deleteBuildTypeWithHttpInfo(btLocator);
    }

    /**
     * Delete build configuration matching the locator.
     * 
     * @param btLocator  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBuildTypeWithHttpInfo(String btLocator) throws ApiException {
        com.squareup.okhttp.Call call = deleteBuildTypeValidateBeforeCall(btLocator, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete build configuration matching the locator. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBuildTypeAsync(String btLocator, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBuildTypeValidateBeforeCall(btLocator, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFeatureOfBuildType
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFeatureOfBuildTypeCall(String btLocator, String featureId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "featureId" + "\\}", apiClient.escapeString(featureId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFeatureOfBuildTypeValidateBeforeCall(String btLocator, String featureId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling deleteFeatureOfBuildType(Async)");
        }
        
        // verify the required parameter 'featureId' is set
        if (featureId == null) {
            throw new ApiException("Missing the required parameter 'featureId' when calling deleteFeatureOfBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFeatureOfBuildTypeCall(btLocator, featureId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove a build feature of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFeatureOfBuildType(String btLocator, String featureId) throws ApiException {
        deleteFeatureOfBuildTypeWithHttpInfo(btLocator, featureId);
    }

    /**
     * Remove a build feature of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFeatureOfBuildTypeWithHttpInfo(String btLocator, String featureId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFeatureOfBuildTypeValidateBeforeCall(btLocator, featureId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove a build feature of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFeatureOfBuildTypeAsync(String btLocator, String featureId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFeatureOfBuildTypeValidateBeforeCall(btLocator, featureId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSnapshotDependency
     * @param btLocator  (required)
     * @param snapshotDepLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSnapshotDependencyCall(String btLocator, String snapshotDepLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "snapshotDepLocator" + "\\}", apiClient.escapeString(snapshotDepLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSnapshotDependencyValidateBeforeCall(String btLocator, String snapshotDepLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling deleteSnapshotDependency(Async)");
        }
        
        // verify the required parameter 'snapshotDepLocator' is set
        if (snapshotDepLocator == null) {
            throw new ApiException("Missing the required parameter 'snapshotDepLocator' when calling deleteSnapshotDependency(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSnapshotDependencyCall(btLocator, snapshotDepLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a snapshot dependency of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param snapshotDepLocator  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSnapshotDependency(String btLocator, String snapshotDepLocator) throws ApiException {
        deleteSnapshotDependencyWithHttpInfo(btLocator, snapshotDepLocator);
    }

    /**
     * Delete a snapshot dependency of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param snapshotDepLocator  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSnapshotDependencyWithHttpInfo(String btLocator, String snapshotDepLocator) throws ApiException {
        com.squareup.okhttp.Call call = deleteSnapshotDependencyValidateBeforeCall(btLocator, snapshotDepLocator, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a snapshot dependency of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param snapshotDepLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSnapshotDependencyAsync(String btLocator, String snapshotDepLocator, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSnapshotDependencyValidateBeforeCall(btLocator, snapshotDepLocator, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteTrigger
     * @param btLocator  (required)
     * @param triggerLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTriggerCall(String btLocator, String triggerLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "triggerLocator" + "\\}", apiClient.escapeString(triggerLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTriggerValidateBeforeCall(String btLocator, String triggerLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling deleteTrigger(Async)");
        }
        
        // verify the required parameter 'triggerLocator' is set
        if (triggerLocator == null) {
            throw new ApiException("Missing the required parameter 'triggerLocator' when calling deleteTrigger(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTriggerCall(btLocator, triggerLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a trigger of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param triggerLocator  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTrigger(String btLocator, String triggerLocator) throws ApiException {
        deleteTriggerWithHttpInfo(btLocator, triggerLocator);
    }

    /**
     * Delete a trigger of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param triggerLocator  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTriggerWithHttpInfo(String btLocator, String triggerLocator) throws ApiException {
        com.squareup.okhttp.Call call = deleteTriggerValidateBeforeCall(btLocator, triggerLocator, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a trigger of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param triggerLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTriggerAsync(String btLocator, String triggerLocator, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTriggerValidateBeforeCall(btLocator, triggerLocator, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteVcsRootOfBuildType
     * @param btLocator  (required)
     * @param vcsRootLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteVcsRootOfBuildTypeCall(String btLocator, String vcsRootLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "vcsRootLocator" + "\\}", apiClient.escapeString(vcsRootLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteVcsRootOfBuildTypeValidateBeforeCall(String btLocator, String vcsRootLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling deleteVcsRootOfBuildType(Async)");
        }
        
        // verify the required parameter 'vcsRootLocator' is set
        if (vcsRootLocator == null) {
            throw new ApiException("Missing the required parameter 'vcsRootLocator' when calling deleteVcsRootOfBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteVcsRootOfBuildTypeCall(btLocator, vcsRootLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove a VCS root of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param vcsRootLocator  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteVcsRootOfBuildType(String btLocator, String vcsRootLocator) throws ApiException {
        deleteVcsRootOfBuildTypeWithHttpInfo(btLocator, vcsRootLocator);
    }

    /**
     * Remove a VCS root of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param vcsRootLocator  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteVcsRootOfBuildTypeWithHttpInfo(String btLocator, String vcsRootLocator) throws ApiException {
        com.squareup.okhttp.Call call = deleteVcsRootOfBuildTypeValidateBeforeCall(btLocator, vcsRootLocator, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove a VCS root of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param vcsRootLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteVcsRootOfBuildTypeAsync(String btLocator, String vcsRootLocator, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteVcsRootOfBuildTypeValidateBeforeCall(btLocator, vcsRootLocator, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for downloadFileOfBuildType
     * @param path  (required)
     * @param btLocator  (required)
     * @param resolveParameters  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadFileOfBuildTypeCall(String path, String btLocator, Boolean resolveParameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/vcs/files/latest/files{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()))
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (resolveParameters != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolveParameters", resolveParameters));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call downloadFileOfBuildTypeValidateBeforeCall(String path, String btLocator, Boolean resolveParameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling downloadFileOfBuildType(Async)");
        }
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling downloadFileOfBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = downloadFileOfBuildTypeCall(path, btLocator, resolveParameters, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Download specific file.
     * 
     * @param path  (required)
     * @param btLocator  (required)
     * @param resolveParameters  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void downloadFileOfBuildType(String path, String btLocator, Boolean resolveParameters) throws ApiException {
        downloadFileOfBuildTypeWithHttpInfo(path, btLocator, resolveParameters);
    }

    /**
     * Download specific file.
     * 
     * @param path  (required)
     * @param btLocator  (required)
     * @param resolveParameters  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> downloadFileOfBuildTypeWithHttpInfo(String path, String btLocator, Boolean resolveParameters) throws ApiException {
        com.squareup.okhttp.Call call = downloadFileOfBuildTypeValidateBeforeCall(path, btLocator, resolveParameters, null, null);
        return apiClient.execute(call);
    }

    /**
     * Download specific file. (asynchronously)
     * 
     * @param path  (required)
     * @param btLocator  (required)
     * @param resolveParameters  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadFileOfBuildTypeAsync(String path, String btLocator, Boolean resolveParameters, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadFileOfBuildTypeValidateBeforeCall(path, btLocator, resolveParameters, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAgentRequirement
     * @param btLocator  (required)
     * @param agentRequirementLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAgentRequirementCall(String btLocator, String agentRequirementLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "agentRequirementLocator" + "\\}", apiClient.escapeString(agentRequirementLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAgentRequirementValidateBeforeCall(String btLocator, String agentRequirementLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getAgentRequirement(Async)");
        }
        
        // verify the required parameter 'agentRequirementLocator' is set
        if (agentRequirementLocator == null) {
            throw new ApiException("Missing the required parameter 'agentRequirementLocator' when calling getAgentRequirement(Async)");
        }
        

        com.squareup.okhttp.Call call = getAgentRequirementCall(btLocator, agentRequirementLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an agent requirement of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param agentRequirementLocator  (required)
     * @param fields  (optional)
     * @return AgentRequirement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AgentRequirement getAgentRequirement(String btLocator, String agentRequirementLocator, String fields) throws ApiException {
        ApiResponse<AgentRequirement> resp = getAgentRequirementWithHttpInfo(btLocator, agentRequirementLocator, fields);
        return resp.getData();
    }

    /**
     * Get an agent requirement of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param agentRequirementLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;AgentRequirement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AgentRequirement> getAgentRequirementWithHttpInfo(String btLocator, String agentRequirementLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAgentRequirementValidateBeforeCall(btLocator, agentRequirementLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<AgentRequirement>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an agent requirement of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param agentRequirementLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAgentRequirementAsync(String btLocator, String agentRequirementLocator, String fields, final ApiCallback<AgentRequirement> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAgentRequirementValidateBeforeCall(btLocator, agentRequirementLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AgentRequirement>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAgentRequirementParameter
     * @param btLocator  (required)
     * @param agentRequirementLocator  (required)
     * @param fieldName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAgentRequirementParameterCall(String btLocator, String agentRequirementLocator, String fieldName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "agentRequirementLocator" + "\\}", apiClient.escapeString(agentRequirementLocator.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapeString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAgentRequirementParameterValidateBeforeCall(String btLocator, String agentRequirementLocator, String fieldName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getAgentRequirementParameter(Async)");
        }
        
        // verify the required parameter 'agentRequirementLocator' is set
        if (agentRequirementLocator == null) {
            throw new ApiException("Missing the required parameter 'agentRequirementLocator' when calling getAgentRequirementParameter(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling getAgentRequirementParameter(Async)");
        }
        

        com.squareup.okhttp.Call call = getAgentRequirementParameterCall(btLocator, agentRequirementLocator, fieldName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a setting of an agent requirement of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param agentRequirementLocator  (required)
     * @param fieldName  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getAgentRequirementParameter(String btLocator, String agentRequirementLocator, String fieldName) throws ApiException {
        ApiResponse<String> resp = getAgentRequirementParameterWithHttpInfo(btLocator, agentRequirementLocator, fieldName);
        return resp.getData();
    }

    /**
     * Get a setting of an agent requirement of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param agentRequirementLocator  (required)
     * @param fieldName  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getAgentRequirementParameterWithHttpInfo(String btLocator, String agentRequirementLocator, String fieldName) throws ApiException {
        com.squareup.okhttp.Call call = getAgentRequirementParameterValidateBeforeCall(btLocator, agentRequirementLocator, fieldName, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a setting of an agent requirement of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param agentRequirementLocator  (required)
     * @param fieldName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAgentRequirementParameterAsync(String btLocator, String agentRequirementLocator, String fieldName, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAgentRequirementParameterValidateBeforeCall(btLocator, agentRequirementLocator, fieldName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAliases
     * @param btLocator  (required)
     * @param field  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAliasesCall(String btLocator, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/aliases"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (field != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("field", field));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAliasesValidateBeforeCall(String btLocator, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getAliases(Async)");
        }
        

        com.squareup.okhttp.Call call = getAliasesCall(btLocator, field, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get external IDs of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param field  (optional)
     * @return Items
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Items getAliases(String btLocator, String field) throws ApiException {
        ApiResponse<Items> resp = getAliasesWithHttpInfo(btLocator, field);
        return resp.getData();
    }

    /**
     * Get external IDs of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param field  (optional)
     * @return ApiResponse&lt;Items&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Items> getAliasesWithHttpInfo(String btLocator, String field) throws ApiException {
        com.squareup.okhttp.Call call = getAliasesValidateBeforeCall(btLocator, field, null, null);
        Type localVarReturnType = new TypeToken<Items>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get external IDs of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param field  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAliasesAsync(String btLocator, String field, final ApiCallback<Items> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAliasesValidateBeforeCall(btLocator, field, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Items>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllAgentRequirements
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllAgentRequirementsCall(String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/agent-requirements"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllAgentRequirementsValidateBeforeCall(String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getAllAgentRequirements(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllAgentRequirementsCall(btLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all agent requirements of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return AgentRequirements
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AgentRequirements getAllAgentRequirements(String btLocator, String fields) throws ApiException {
        ApiResponse<AgentRequirements> resp = getAllAgentRequirementsWithHttpInfo(btLocator, fields);
        return resp.getData();
    }

    /**
     * Get all agent requirements of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;AgentRequirements&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AgentRequirements> getAllAgentRequirementsWithHttpInfo(String btLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllAgentRequirementsValidateBeforeCall(btLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<AgentRequirements>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all agent requirements of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllAgentRequirementsAsync(String btLocator, String fields, final ApiCallback<AgentRequirements> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllAgentRequirementsValidateBeforeCall(btLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AgentRequirements>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllArtifactDependencies
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllArtifactDependenciesCall(String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/artifact-dependencies"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllArtifactDependenciesValidateBeforeCall(String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getAllArtifactDependencies(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllArtifactDependenciesCall(btLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all artifact dependencies of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return ArtifactDependencies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArtifactDependencies getAllArtifactDependencies(String btLocator, String fields) throws ApiException {
        ApiResponse<ArtifactDependencies> resp = getAllArtifactDependenciesWithHttpInfo(btLocator, fields);
        return resp.getData();
    }

    /**
     * Get all artifact dependencies of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;ArtifactDependencies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArtifactDependencies> getAllArtifactDependenciesWithHttpInfo(String btLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllArtifactDependenciesValidateBeforeCall(btLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<ArtifactDependencies>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all artifact dependencies of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllArtifactDependenciesAsync(String btLocator, String fields, final ApiCallback<ArtifactDependencies> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllArtifactDependenciesValidateBeforeCall(btLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArtifactDependencies>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllBranchesOfBuildType
     * @param btLocator  (required)
     * @param locator  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllBranchesOfBuildTypeCall(String btLocator, String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/branches"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locator", locator));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllBranchesOfBuildTypeValidateBeforeCall(String btLocator, String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getAllBranchesOfBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllBranchesOfBuildTypeCall(btLocator, locator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all branches of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param locator  (optional)
     * @param fields  (optional)
     * @return Branches
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Branches getAllBranchesOfBuildType(String btLocator, String locator, String fields) throws ApiException {
        ApiResponse<Branches> resp = getAllBranchesOfBuildTypeWithHttpInfo(btLocator, locator, fields);
        return resp.getData();
    }

    /**
     * Get all branches of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param locator  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Branches&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Branches> getAllBranchesOfBuildTypeWithHttpInfo(String btLocator, String locator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllBranchesOfBuildTypeValidateBeforeCall(btLocator, locator, fields, null, null);
        Type localVarReturnType = new TypeToken<Branches>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all branches of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param locator  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllBranchesOfBuildTypeAsync(String btLocator, String locator, String fields, final ApiCallback<Branches> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllBranchesOfBuildTypeValidateBeforeCall(btLocator, locator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Branches>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllBuildFeatureParameters
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllBuildFeatureParametersCall(String btLocator, String featureId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "featureId" + "\\}", apiClient.escapeString(featureId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllBuildFeatureParametersValidateBeforeCall(String btLocator, String featureId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getAllBuildFeatureParameters(Async)");
        }
        
        // verify the required parameter 'featureId' is set
        if (featureId == null) {
            throw new ApiException("Missing the required parameter 'featureId' when calling getAllBuildFeatureParameters(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllBuildFeatureParametersCall(btLocator, featureId, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all parameters of a build feature of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param fields  (optional)
     * @return Properties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Properties getAllBuildFeatureParameters(String btLocator, String featureId, String fields) throws ApiException {
        ApiResponse<Properties> resp = getAllBuildFeatureParametersWithHttpInfo(btLocator, featureId, fields);
        return resp.getData();
    }

    /**
     * Get all parameters of a build feature of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Properties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Properties> getAllBuildFeatureParametersWithHttpInfo(String btLocator, String featureId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllBuildFeatureParametersValidateBeforeCall(btLocator, featureId, fields, null, null);
        Type localVarReturnType = new TypeToken<Properties>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all parameters of a build feature of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllBuildFeatureParametersAsync(String btLocator, String featureId, String fields, final ApiCallback<Properties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllBuildFeatureParametersValidateBeforeCall(btLocator, featureId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Properties>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllBuildFeatures
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllBuildFeaturesCall(String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/features"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllBuildFeaturesValidateBeforeCall(String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getAllBuildFeatures(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllBuildFeaturesCall(btLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all build features of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return Features
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Features getAllBuildFeatures(String btLocator, String fields) throws ApiException {
        ApiResponse<Features> resp = getAllBuildFeaturesWithHttpInfo(btLocator, fields);
        return resp.getData();
    }

    /**
     * Get all build features of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Features&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Features> getAllBuildFeaturesWithHttpInfo(String btLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllBuildFeaturesValidateBeforeCall(btLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<Features>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all build features of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllBuildFeaturesAsync(String btLocator, String fields, final ApiCallback<Features> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllBuildFeaturesValidateBeforeCall(btLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Features>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllBuildStepParameters
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllBuildStepParametersCall(String btLocator, String stepId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "stepId" + "\\}", apiClient.escapeString(stepId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllBuildStepParametersValidateBeforeCall(String btLocator, String stepId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getAllBuildStepParameters(Async)");
        }
        
        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling getAllBuildStepParameters(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllBuildStepParametersCall(btLocator, stepId, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all parameters of a build step of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param fields  (optional)
     * @return Properties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Properties getAllBuildStepParameters(String btLocator, String stepId, String fields) throws ApiException {
        ApiResponse<Properties> resp = getAllBuildStepParametersWithHttpInfo(btLocator, stepId, fields);
        return resp.getData();
    }

    /**
     * Get all parameters of a build step of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Properties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Properties> getAllBuildStepParametersWithHttpInfo(String btLocator, String stepId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllBuildStepParametersValidateBeforeCall(btLocator, stepId, fields, null, null);
        Type localVarReturnType = new TypeToken<Properties>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all parameters of a build step of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllBuildStepParametersAsync(String btLocator, String stepId, String fields, final ApiCallback<Properties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllBuildStepParametersValidateBeforeCall(btLocator, stepId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Properties>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllBuildSteps
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllBuildStepsCall(String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/steps"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllBuildStepsValidateBeforeCall(String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getAllBuildSteps(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllBuildStepsCall(btLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all build steps of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return Steps
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Steps getAllBuildSteps(String btLocator, String fields) throws ApiException {
        ApiResponse<Steps> resp = getAllBuildStepsWithHttpInfo(btLocator, fields);
        return resp.getData();
    }

    /**
     * Get all build steps of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Steps&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Steps> getAllBuildStepsWithHttpInfo(String btLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllBuildStepsValidateBeforeCall(btLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<Steps>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all build steps of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllBuildStepsAsync(String btLocator, String fields, final ApiCallback<Steps> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllBuildStepsValidateBeforeCall(btLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Steps>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllBuildTemplates
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllBuildTemplatesCall(String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/templates"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllBuildTemplatesValidateBeforeCall(String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getAllBuildTemplates(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllBuildTemplatesCall(btLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all build templates of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return BuildTypes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuildTypes getAllBuildTemplates(String btLocator, String fields) throws ApiException {
        ApiResponse<BuildTypes> resp = getAllBuildTemplatesWithHttpInfo(btLocator, fields);
        return resp.getData();
    }

    /**
     * Get all build templates of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;BuildTypes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuildTypes> getAllBuildTemplatesWithHttpInfo(String btLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllBuildTemplatesValidateBeforeCall(btLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<BuildTypes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all build templates of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllBuildTemplatesAsync(String btLocator, String fields, final ApiCallback<BuildTypes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllBuildTemplatesValidateBeforeCall(btLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuildTypes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllBuildTypes
     * @param locator  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllBuildTypesCall(String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locator", locator));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllBuildTypesValidateBeforeCall(String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllBuildTypesCall(locator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all build configurations.
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @return BuildTypes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuildTypes getAllBuildTypes(String locator, String fields) throws ApiException {
        ApiResponse<BuildTypes> resp = getAllBuildTypesWithHttpInfo(locator, fields);
        return resp.getData();
    }

    /**
     * Get all build configurations.
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;BuildTypes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuildTypes> getAllBuildTypesWithHttpInfo(String locator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllBuildTypesValidateBeforeCall(locator, fields, null, null);
        Type localVarReturnType = new TypeToken<BuildTypes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all build configurations. (asynchronously)
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllBuildTypesAsync(String locator, String fields, final ApiCallback<BuildTypes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllBuildTypesValidateBeforeCall(locator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuildTypes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllInvestigationsOfBuildType
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllInvestigationsOfBuildTypeCall(String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/investigations"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllInvestigationsOfBuildTypeValidateBeforeCall(String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getAllInvestigationsOfBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllInvestigationsOfBuildTypeCall(btLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all investigations of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return Investigations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Investigations getAllInvestigationsOfBuildType(String btLocator, String fields) throws ApiException {
        ApiResponse<Investigations> resp = getAllInvestigationsOfBuildTypeWithHttpInfo(btLocator, fields);
        return resp.getData();
    }

    /**
     * Get all investigations of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Investigations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Investigations> getAllInvestigationsOfBuildTypeWithHttpInfo(String btLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllInvestigationsOfBuildTypeValidateBeforeCall(btLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<Investigations>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all investigations of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllInvestigationsOfBuildTypeAsync(String btLocator, String fields, final ApiCallback<Investigations> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllInvestigationsOfBuildTypeValidateBeforeCall(btLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Investigations>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllSnapshotDependencies
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllSnapshotDependenciesCall(String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/snapshot-dependencies"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllSnapshotDependenciesValidateBeforeCall(String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getAllSnapshotDependencies(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllSnapshotDependenciesCall(btLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all snapshot dependencies of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return SnapshotDependencies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotDependencies getAllSnapshotDependencies(String btLocator, String fields) throws ApiException {
        ApiResponse<SnapshotDependencies> resp = getAllSnapshotDependenciesWithHttpInfo(btLocator, fields);
        return resp.getData();
    }

    /**
     * Get all snapshot dependencies of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;SnapshotDependencies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotDependencies> getAllSnapshotDependenciesWithHttpInfo(String btLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllSnapshotDependenciesValidateBeforeCall(btLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<SnapshotDependencies>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all snapshot dependencies of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllSnapshotDependenciesAsync(String btLocator, String fields, final ApiCallback<SnapshotDependencies> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllSnapshotDependenciesValidateBeforeCall(btLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotDependencies>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllTriggers
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllTriggersCall(String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/triggers"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllTriggersValidateBeforeCall(String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getAllTriggers(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllTriggersCall(btLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all triggers of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return Triggers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Triggers getAllTriggers(String btLocator, String fields) throws ApiException {
        ApiResponse<Triggers> resp = getAllTriggersWithHttpInfo(btLocator, fields);
        return resp.getData();
    }

    /**
     * Get all triggers of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Triggers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Triggers> getAllTriggersWithHttpInfo(String btLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllTriggersValidateBeforeCall(btLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<Triggers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all triggers of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllTriggersAsync(String btLocator, String fields, final ApiCallback<Triggers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllTriggersValidateBeforeCall(btLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Triggers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllVcsRootsOfBuildType
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllVcsRootsOfBuildTypeCall(String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-entries"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllVcsRootsOfBuildTypeValidateBeforeCall(String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getAllVcsRootsOfBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllVcsRootsOfBuildTypeCall(btLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all VCS roots of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return VcsRootEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VcsRootEntries getAllVcsRootsOfBuildType(String btLocator, String fields) throws ApiException {
        ApiResponse<VcsRootEntries> resp = getAllVcsRootsOfBuildTypeWithHttpInfo(btLocator, fields);
        return resp.getData();
    }

    /**
     * Get all VCS roots of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;VcsRootEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VcsRootEntries> getAllVcsRootsOfBuildTypeWithHttpInfo(String btLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllVcsRootsOfBuildTypeValidateBeforeCall(btLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<VcsRootEntries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all VCS roots of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllVcsRootsOfBuildTypeAsync(String btLocator, String fields, final ApiCallback<VcsRootEntries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllVcsRootsOfBuildTypeValidateBeforeCall(btLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VcsRootEntries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getArtifactDependency
     * @param btLocator  (required)
     * @param artifactDepLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getArtifactDependencyCall(String btLocator, String artifactDepLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "artifactDepLocator" + "\\}", apiClient.escapeString(artifactDepLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getArtifactDependencyValidateBeforeCall(String btLocator, String artifactDepLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getArtifactDependency(Async)");
        }
        
        // verify the required parameter 'artifactDepLocator' is set
        if (artifactDepLocator == null) {
            throw new ApiException("Missing the required parameter 'artifactDepLocator' when calling getArtifactDependency(Async)");
        }
        

        com.squareup.okhttp.Call call = getArtifactDependencyCall(btLocator, artifactDepLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an artifact dependency of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param artifactDepLocator  (required)
     * @param fields  (optional)
     * @return ArtifactDependency
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArtifactDependency getArtifactDependency(String btLocator, String artifactDepLocator, String fields) throws ApiException {
        ApiResponse<ArtifactDependency> resp = getArtifactDependencyWithHttpInfo(btLocator, artifactDepLocator, fields);
        return resp.getData();
    }

    /**
     * Get an artifact dependency of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param artifactDepLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;ArtifactDependency&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArtifactDependency> getArtifactDependencyWithHttpInfo(String btLocator, String artifactDepLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getArtifactDependencyValidateBeforeCall(btLocator, artifactDepLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<ArtifactDependency>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an artifact dependency of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param artifactDepLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getArtifactDependencyAsync(String btLocator, String artifactDepLocator, String fields, final ApiCallback<ArtifactDependency> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getArtifactDependencyValidateBeforeCall(btLocator, artifactDepLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArtifactDependency>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getArtifactDependencyParameter
     * @param btLocator  (required)
     * @param artifactDepLocator  (required)
     * @param fieldName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getArtifactDependencyParameterCall(String btLocator, String artifactDepLocator, String fieldName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "artifactDepLocator" + "\\}", apiClient.escapeString(artifactDepLocator.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapeString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getArtifactDependencyParameterValidateBeforeCall(String btLocator, String artifactDepLocator, String fieldName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getArtifactDependencyParameter(Async)");
        }
        
        // verify the required parameter 'artifactDepLocator' is set
        if (artifactDepLocator == null) {
            throw new ApiException("Missing the required parameter 'artifactDepLocator' when calling getArtifactDependencyParameter(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling getArtifactDependencyParameter(Async)");
        }
        

        com.squareup.okhttp.Call call = getArtifactDependencyParameterCall(btLocator, artifactDepLocator, fieldName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a parameter of an artifact dependency of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param artifactDepLocator  (required)
     * @param fieldName  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getArtifactDependencyParameter(String btLocator, String artifactDepLocator, String fieldName) throws ApiException {
        ApiResponse<String> resp = getArtifactDependencyParameterWithHttpInfo(btLocator, artifactDepLocator, fieldName);
        return resp.getData();
    }

    /**
     * Get a parameter of an artifact dependency of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param artifactDepLocator  (required)
     * @param fieldName  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getArtifactDependencyParameterWithHttpInfo(String btLocator, String artifactDepLocator, String fieldName) throws ApiException {
        com.squareup.okhttp.Call call = getArtifactDependencyParameterValidateBeforeCall(btLocator, artifactDepLocator, fieldName, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a parameter of an artifact dependency of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param artifactDepLocator  (required)
     * @param fieldName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getArtifactDependencyParameterAsync(String btLocator, String artifactDepLocator, String fieldName, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getArtifactDependencyParameterValidateBeforeCall(btLocator, artifactDepLocator, fieldName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuildFeature
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBuildFeatureCall(String btLocator, String featureId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "featureId" + "\\}", apiClient.escapeString(featureId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBuildFeatureValidateBeforeCall(String btLocator, String featureId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getBuildFeature(Async)");
        }
        
        // verify the required parameter 'featureId' is set
        if (featureId == null) {
            throw new ApiException("Missing the required parameter 'featureId' when calling getBuildFeature(Async)");
        }
        

        com.squareup.okhttp.Call call = getBuildFeatureCall(btLocator, featureId, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a build feature of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param fields  (optional)
     * @return Feature
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Feature getBuildFeature(String btLocator, String featureId, String fields) throws ApiException {
        ApiResponse<Feature> resp = getBuildFeatureWithHttpInfo(btLocator, featureId, fields);
        return resp.getData();
    }

    /**
     * Get a build feature of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Feature&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Feature> getBuildFeatureWithHttpInfo(String btLocator, String featureId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getBuildFeatureValidateBeforeCall(btLocator, featureId, fields, null, null);
        Type localVarReturnType = new TypeToken<Feature>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a build feature of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBuildFeatureAsync(String btLocator, String featureId, String fields, final ApiCallback<Feature> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBuildFeatureValidateBeforeCall(btLocator, featureId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Feature>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuildFeatureParameter
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param parameterName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBuildFeatureParameterCall(String btLocator, String featureId, String parameterName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "featureId" + "\\}", apiClient.escapeString(featureId.toString()))
            .replaceAll("\\{" + "parameterName" + "\\}", apiClient.escapeString(parameterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBuildFeatureParameterValidateBeforeCall(String btLocator, String featureId, String parameterName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getBuildFeatureParameter(Async)");
        }
        
        // verify the required parameter 'featureId' is set
        if (featureId == null) {
            throw new ApiException("Missing the required parameter 'featureId' when calling getBuildFeatureParameter(Async)");
        }
        
        // verify the required parameter 'parameterName' is set
        if (parameterName == null) {
            throw new ApiException("Missing the required parameter 'parameterName' when calling getBuildFeatureParameter(Async)");
        }
        

        com.squareup.okhttp.Call call = getBuildFeatureParameterCall(btLocator, featureId, parameterName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a parameter of a build feature of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param parameterName  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getBuildFeatureParameter(String btLocator, String featureId, String parameterName) throws ApiException {
        ApiResponse<String> resp = getBuildFeatureParameterWithHttpInfo(btLocator, featureId, parameterName);
        return resp.getData();
    }

    /**
     * Get a parameter of a build feature of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param parameterName  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getBuildFeatureParameterWithHttpInfo(String btLocator, String featureId, String parameterName) throws ApiException {
        com.squareup.okhttp.Call call = getBuildFeatureParameterValidateBeforeCall(btLocator, featureId, parameterName, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a parameter of a build feature of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param parameterName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBuildFeatureParameterAsync(String btLocator, String featureId, String parameterName, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBuildFeatureParameterValidateBeforeCall(btLocator, featureId, parameterName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuildFeatureSetting
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param name  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBuildFeatureSettingCall(String btLocator, String featureId, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "featureId" + "\\}", apiClient.escapeString(featureId.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBuildFeatureSettingValidateBeforeCall(String btLocator, String featureId, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getBuildFeatureSetting(Async)");
        }
        
        // verify the required parameter 'featureId' is set
        if (featureId == null) {
            throw new ApiException("Missing the required parameter 'featureId' when calling getBuildFeatureSetting(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getBuildFeatureSetting(Async)");
        }
        

        com.squareup.okhttp.Call call = getBuildFeatureSettingCall(btLocator, featureId, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the setting of a build feature of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param name  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getBuildFeatureSetting(String btLocator, String featureId, String name) throws ApiException {
        ApiResponse<String> resp = getBuildFeatureSettingWithHttpInfo(btLocator, featureId, name);
        return resp.getData();
    }

    /**
     * Get the setting of a build feature of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param name  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getBuildFeatureSettingWithHttpInfo(String btLocator, String featureId, String name) throws ApiException {
        com.squareup.okhttp.Call call = getBuildFeatureSettingValidateBeforeCall(btLocator, featureId, name, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the setting of a build feature of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param name  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBuildFeatureSettingAsync(String btLocator, String featureId, String name, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBuildFeatureSettingValidateBeforeCall(btLocator, featureId, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuildParameterOfBuildType
     * @param name  (required)
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBuildParameterOfBuildTypeCall(String name, String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBuildParameterOfBuildTypeValidateBeforeCall(String name, String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getBuildParameterOfBuildType(Async)");
        }
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getBuildParameterOfBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = getBuildParameterOfBuildTypeCall(name, btLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get build parameter.
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return Property
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Property getBuildParameterOfBuildType(String name, String btLocator, String fields) throws ApiException {
        ApiResponse<Property> resp = getBuildParameterOfBuildTypeWithHttpInfo(name, btLocator, fields);
        return resp.getData();
    }

    /**
     * Get build parameter.
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Property&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Property> getBuildParameterOfBuildTypeWithHttpInfo(String name, String btLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getBuildParameterOfBuildTypeValidateBeforeCall(name, btLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<Property>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get build parameter. (asynchronously)
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBuildParameterOfBuildTypeAsync(String name, String btLocator, String fields, final ApiCallback<Property> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBuildParameterOfBuildTypeValidateBeforeCall(name, btLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Property>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuildParameterSpecificationOfBuildType
     * @param name  (required)
     * @param btLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBuildParameterSpecificationOfBuildTypeCall(String name, String btLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}/type/rawValue"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBuildParameterSpecificationOfBuildTypeValidateBeforeCall(String name, String btLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getBuildParameterSpecificationOfBuildType(Async)");
        }
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getBuildParameterSpecificationOfBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = getBuildParameterSpecificationOfBuildTypeCall(name, btLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get build parameter specification.
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getBuildParameterSpecificationOfBuildType(String name, String btLocator) throws ApiException {
        ApiResponse<String> resp = getBuildParameterSpecificationOfBuildTypeWithHttpInfo(name, btLocator);
        return resp.getData();
    }

    /**
     * Get build parameter specification.
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getBuildParameterSpecificationOfBuildTypeWithHttpInfo(String name, String btLocator) throws ApiException {
        com.squareup.okhttp.Call call = getBuildParameterSpecificationOfBuildTypeValidateBeforeCall(name, btLocator, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get build parameter specification. (asynchronously)
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBuildParameterSpecificationOfBuildTypeAsync(String name, String btLocator, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBuildParameterSpecificationOfBuildTypeValidateBeforeCall(name, btLocator, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuildParameterTypeOfBuildType
     * @param name  (required)
     * @param btLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBuildParameterTypeOfBuildTypeCall(String name, String btLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}/type"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBuildParameterTypeOfBuildTypeValidateBeforeCall(String name, String btLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getBuildParameterTypeOfBuildType(Async)");
        }
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getBuildParameterTypeOfBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = getBuildParameterTypeOfBuildTypeCall(name, btLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get type of build parameter.
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @return Type
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Type getBuildParameterTypeOfBuildType(String name, String btLocator) throws ApiException {
        ApiResponse<Type> resp = getBuildParameterTypeOfBuildTypeWithHttpInfo(name, btLocator);
        return resp.getData();
    }

    /**
     * Get type of build parameter.
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @return ApiResponse&lt;Type&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Type> getBuildParameterTypeOfBuildTypeWithHttpInfo(String name, String btLocator) throws ApiException {
        com.squareup.okhttp.Call call = getBuildParameterTypeOfBuildTypeValidateBeforeCall(name, btLocator, null, null);
        Type localVarReturnType = new TypeToken<Type>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get type of build parameter. (asynchronously)
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBuildParameterTypeOfBuildTypeAsync(String name, String btLocator, final ApiCallback<Type> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBuildParameterTypeOfBuildTypeValidateBeforeCall(name, btLocator, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Type>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuildParameterValueOfBuildType
     * @param name  (required)
     * @param btLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBuildParameterValueOfBuildTypeCall(String name, String btLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}/value"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBuildParameterValueOfBuildTypeValidateBeforeCall(String name, String btLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getBuildParameterValueOfBuildType(Async)");
        }
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getBuildParameterValueOfBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = getBuildParameterValueOfBuildTypeCall(name, btLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get value of build parameter.
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getBuildParameterValueOfBuildType(String name, String btLocator) throws ApiException {
        ApiResponse<String> resp = getBuildParameterValueOfBuildTypeWithHttpInfo(name, btLocator);
        return resp.getData();
    }

    /**
     * Get value of build parameter.
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getBuildParameterValueOfBuildTypeWithHttpInfo(String name, String btLocator) throws ApiException {
        com.squareup.okhttp.Call call = getBuildParameterValueOfBuildTypeValidateBeforeCall(name, btLocator, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get value of build parameter. (asynchronously)
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBuildParameterValueOfBuildTypeAsync(String name, String btLocator, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBuildParameterValueOfBuildTypeValidateBeforeCall(name, btLocator, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuildParametersOfBuildType
     * @param btLocator  (required)
     * @param locator  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBuildParametersOfBuildTypeCall(String btLocator, String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/parameters"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locator", locator));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBuildParametersOfBuildTypeValidateBeforeCall(String btLocator, String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getBuildParametersOfBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = getBuildParametersOfBuildTypeCall(btLocator, locator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get build parameters.
     * 
     * @param btLocator  (required)
     * @param locator  (optional)
     * @param fields  (optional)
     * @return Properties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Properties getBuildParametersOfBuildType(String btLocator, String locator, String fields) throws ApiException {
        ApiResponse<Properties> resp = getBuildParametersOfBuildTypeWithHttpInfo(btLocator, locator, fields);
        return resp.getData();
    }

    /**
     * Get build parameters.
     * 
     * @param btLocator  (required)
     * @param locator  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Properties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Properties> getBuildParametersOfBuildTypeWithHttpInfo(String btLocator, String locator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getBuildParametersOfBuildTypeValidateBeforeCall(btLocator, locator, fields, null, null);
        Type localVarReturnType = new TypeToken<Properties>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get build parameters. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param locator  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBuildParametersOfBuildTypeAsync(String btLocator, String locator, String fields, final ApiCallback<Properties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBuildParametersOfBuildTypeValidateBeforeCall(btLocator, locator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Properties>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuildStep
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBuildStepCall(String btLocator, String stepId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "stepId" + "\\}", apiClient.escapeString(stepId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBuildStepValidateBeforeCall(String btLocator, String stepId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getBuildStep(Async)");
        }
        
        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling getBuildStep(Async)");
        }
        

        com.squareup.okhttp.Call call = getBuildStepCall(btLocator, stepId, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a build step of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param fields  (optional)
     * @return Step
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Step getBuildStep(String btLocator, String stepId, String fields) throws ApiException {
        ApiResponse<Step> resp = getBuildStepWithHttpInfo(btLocator, stepId, fields);
        return resp.getData();
    }

    /**
     * Get a build step of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Step&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Step> getBuildStepWithHttpInfo(String btLocator, String stepId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getBuildStepValidateBeforeCall(btLocator, stepId, fields, null, null);
        Type localVarReturnType = new TypeToken<Step>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a build step of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBuildStepAsync(String btLocator, String stepId, String fields, final ApiCallback<Step> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBuildStepValidateBeforeCall(btLocator, stepId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Step>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuildStepParameter
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param parameterName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBuildStepParameterCall(String btLocator, String stepId, String parameterName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "stepId" + "\\}", apiClient.escapeString(stepId.toString()))
            .replaceAll("\\{" + "parameterName" + "\\}", apiClient.escapeString(parameterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBuildStepParameterValidateBeforeCall(String btLocator, String stepId, String parameterName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getBuildStepParameter(Async)");
        }
        
        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling getBuildStepParameter(Async)");
        }
        
        // verify the required parameter 'parameterName' is set
        if (parameterName == null) {
            throw new ApiException("Missing the required parameter 'parameterName' when calling getBuildStepParameter(Async)");
        }
        

        com.squareup.okhttp.Call call = getBuildStepParameterCall(btLocator, stepId, parameterName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a parameter of a build step of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param parameterName  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getBuildStepParameter(String btLocator, String stepId, String parameterName) throws ApiException {
        ApiResponse<String> resp = getBuildStepParameterWithHttpInfo(btLocator, stepId, parameterName);
        return resp.getData();
    }

    /**
     * Get a parameter of a build step of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param parameterName  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getBuildStepParameterWithHttpInfo(String btLocator, String stepId, String parameterName) throws ApiException {
        com.squareup.okhttp.Call call = getBuildStepParameterValidateBeforeCall(btLocator, stepId, parameterName, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a parameter of a build step of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param parameterName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBuildStepParameterAsync(String btLocator, String stepId, String parameterName, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBuildStepParameterValidateBeforeCall(btLocator, stepId, parameterName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuildStepSetting
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param fieldName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBuildStepSettingCall(String btLocator, String stepId, String fieldName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "stepId" + "\\}", apiClient.escapeString(stepId.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapeString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBuildStepSettingValidateBeforeCall(String btLocator, String stepId, String fieldName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getBuildStepSetting(Async)");
        }
        
        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling getBuildStepSetting(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling getBuildStepSetting(Async)");
        }
        

        com.squareup.okhttp.Call call = getBuildStepSettingCall(btLocator, stepId, fieldName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the setting of a build step of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param fieldName  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getBuildStepSetting(String btLocator, String stepId, String fieldName) throws ApiException {
        ApiResponse<String> resp = getBuildStepSettingWithHttpInfo(btLocator, stepId, fieldName);
        return resp.getData();
    }

    /**
     * Get the setting of a build step of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param fieldName  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getBuildStepSettingWithHttpInfo(String btLocator, String stepId, String fieldName) throws ApiException {
        com.squareup.okhttp.Call call = getBuildStepSettingValidateBeforeCall(btLocator, stepId, fieldName, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the setting of a build step of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param fieldName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBuildStepSettingAsync(String btLocator, String stepId, String fieldName, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBuildStepSettingValidateBeforeCall(btLocator, stepId, fieldName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuildTemplate
     * @param btLocator  (required)
     * @param templateLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBuildTemplateCall(String btLocator, String templateLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/templates/{templateLocator}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "templateLocator" + "\\}", apiClient.escapeString(templateLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBuildTemplateValidateBeforeCall(String btLocator, String templateLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getBuildTemplate(Async)");
        }
        
        // verify the required parameter 'templateLocator' is set
        if (templateLocator == null) {
            throw new ApiException("Missing the required parameter 'templateLocator' when calling getBuildTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = getBuildTemplateCall(btLocator, templateLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a template of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param templateLocator  (required)
     * @param fields  (optional)
     * @return BuildType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuildType getBuildTemplate(String btLocator, String templateLocator, String fields) throws ApiException {
        ApiResponse<BuildType> resp = getBuildTemplateWithHttpInfo(btLocator, templateLocator, fields);
        return resp.getData();
    }

    /**
     * Get a template of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param templateLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;BuildType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuildType> getBuildTemplateWithHttpInfo(String btLocator, String templateLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getBuildTemplateValidateBeforeCall(btLocator, templateLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<BuildType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a template of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param templateLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBuildTemplateAsync(String btLocator, String templateLocator, String fields, final ApiCallback<BuildType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBuildTemplateValidateBeforeCall(btLocator, templateLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuildType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuildType
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBuildTypeCall(String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBuildTypeValidateBeforeCall(String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = getBuildTypeCall(btLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get build configuration matching the locator.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return BuildType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuildType getBuildType(String btLocator, String fields) throws ApiException {
        ApiResponse<BuildType> resp = getBuildTypeWithHttpInfo(btLocator, fields);
        return resp.getData();
    }

    /**
     * Get build configuration matching the locator.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;BuildType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuildType> getBuildTypeWithHttpInfo(String btLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getBuildTypeValidateBeforeCall(btLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<BuildType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get build configuration matching the locator. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBuildTypeAsync(String btLocator, String fields, final ApiCallback<BuildType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBuildTypeValidateBeforeCall(btLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuildType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuildTypeBuildTags
     * @param btLocator  (required)
     * @param field  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBuildTypeBuildTagsCall(String btLocator, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/buildTags"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (field != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("field", field));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBuildTypeBuildTagsValidateBeforeCall(String btLocator, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getBuildTypeBuildTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getBuildTypeBuildTagsCall(btLocator, field, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get tags of builds of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param field  (optional)
     * @return Tags
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Tags getBuildTypeBuildTags(String btLocator, String field) throws ApiException {
        ApiResponse<Tags> resp = getBuildTypeBuildTagsWithHttpInfo(btLocator, field);
        return resp.getData();
    }

    /**
     * Get tags of builds of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param field  (optional)
     * @return ApiResponse&lt;Tags&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Tags> getBuildTypeBuildTagsWithHttpInfo(String btLocator, String field) throws ApiException {
        com.squareup.okhttp.Call call = getBuildTypeBuildTagsValidateBeforeCall(btLocator, field, null, null);
        Type localVarReturnType = new TypeToken<Tags>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get tags of builds of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param field  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBuildTypeBuildTagsAsync(String btLocator, String field, final ApiCallback<Tags> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBuildTypeBuildTagsValidateBeforeCall(btLocator, field, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Tags>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuildTypeBuilds
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBuildTypeBuildsCall(String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/builds"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBuildTypeBuildsValidateBeforeCall(String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getBuildTypeBuilds(Async)");
        }
        

        com.squareup.okhttp.Call call = getBuildTypeBuildsCall(btLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get builds of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return Builds
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Builds getBuildTypeBuilds(String btLocator, String fields) throws ApiException {
        ApiResponse<Builds> resp = getBuildTypeBuildsWithHttpInfo(btLocator, fields);
        return resp.getData();
    }

    /**
     * Get builds of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Builds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Builds> getBuildTypeBuildsWithHttpInfo(String btLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getBuildTypeBuildsValidateBeforeCall(btLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<Builds>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get builds of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBuildTypeBuildsAsync(String btLocator, String fields, final ApiCallback<Builds> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBuildTypeBuildsValidateBeforeCall(btLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Builds>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuildTypeField
     * @param btLocator  (required)
     * @param field  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBuildTypeFieldCall(String btLocator, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/{field}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "field" + "\\}", apiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBuildTypeFieldValidateBeforeCall(String btLocator, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getBuildTypeField(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getBuildTypeField(Async)");
        }
        

        com.squareup.okhttp.Call call = getBuildTypeFieldCall(btLocator, field, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a field of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param field  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getBuildTypeField(String btLocator, String field) throws ApiException {
        ApiResponse<String> resp = getBuildTypeFieldWithHttpInfo(btLocator, field);
        return resp.getData();
    }

    /**
     * Get a field of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param field  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getBuildTypeFieldWithHttpInfo(String btLocator, String field) throws ApiException {
        com.squareup.okhttp.Call call = getBuildTypeFieldValidateBeforeCall(btLocator, field, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a field of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param field  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBuildTypeFieldAsync(String btLocator, String field, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBuildTypeFieldValidateBeforeCall(btLocator, field, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuildTypeSettingsFile
     * @param btLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBuildTypeSettingsFileCall(String btLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/settingsFile"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBuildTypeSettingsFileValidateBeforeCall(String btLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getBuildTypeSettingsFile(Async)");
        }
        

        com.squareup.okhttp.Call call = getBuildTypeSettingsFileCall(btLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the settings file of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getBuildTypeSettingsFile(String btLocator) throws ApiException {
        ApiResponse<String> resp = getBuildTypeSettingsFileWithHttpInfo(btLocator);
        return resp.getData();
    }

    /**
     * Get the settings file of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getBuildTypeSettingsFileWithHttpInfo(String btLocator) throws ApiException {
        com.squareup.okhttp.Call call = getBuildTypeSettingsFileValidateBeforeCall(btLocator, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the settings file of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBuildTypeSettingsFileAsync(String btLocator, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBuildTypeSettingsFileValidateBeforeCall(btLocator, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFileMetadataOfBuildType
     * @param path  (required)
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param resolveParameters  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFileMetadataOfBuildTypeCall(String path, String btLocator, String fields, Boolean resolveParameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/vcs/files/latest/metadata{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()))
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (resolveParameters != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolveParameters", resolveParameters));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFileMetadataOfBuildTypeValidateBeforeCall(String path, String btLocator, String fields, Boolean resolveParameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getFileMetadataOfBuildType(Async)");
        }
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getFileMetadataOfBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = getFileMetadataOfBuildTypeCall(path, btLocator, fields, resolveParameters, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get metadata of specific file.
     * 
     * @param path  (required)
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param resolveParameters  (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getFileMetadataOfBuildType(String path, String btLocator, String fields, Boolean resolveParameters) throws ApiException {
        ApiResponse<File> resp = getFileMetadataOfBuildTypeWithHttpInfo(path, btLocator, fields, resolveParameters);
        return resp.getData();
    }

    /**
     * Get metadata of specific file.
     * 
     * @param path  (required)
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param resolveParameters  (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getFileMetadataOfBuildTypeWithHttpInfo(String path, String btLocator, String fields, Boolean resolveParameters) throws ApiException {
        com.squareup.okhttp.Call call = getFileMetadataOfBuildTypeValidateBeforeCall(path, btLocator, fields, resolveParameters, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get metadata of specific file. (asynchronously)
     * 
     * @param path  (required)
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param resolveParameters  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFileMetadataOfBuildTypeAsync(String path, String btLocator, String fields, Boolean resolveParameters, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFileMetadataOfBuildTypeValidateBeforeCall(path, btLocator, fields, resolveParameters, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFilesListForSubpathOfBuildType
     * @param path  (required)
     * @param btLocator  (required)
     * @param basePath  (optional)
     * @param locator  (optional)
     * @param fields  (optional)
     * @param resolveParameters  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFilesListForSubpathOfBuildTypeCall(String path, String btLocator, String basePath, String locator, String fields, Boolean resolveParameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/vcs/files/latest/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()))
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (basePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("basePath", basePath));
        if (locator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locator", locator));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (resolveParameters != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolveParameters", resolveParameters));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFilesListForSubpathOfBuildTypeValidateBeforeCall(String path, String btLocator, String basePath, String locator, String fields, Boolean resolveParameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getFilesListForSubpathOfBuildType(Async)");
        }
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getFilesListForSubpathOfBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = getFilesListForSubpathOfBuildTypeCall(path, btLocator, basePath, locator, fields, resolveParameters, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List files under this path.
     * 
     * @param path  (required)
     * @param btLocator  (required)
     * @param basePath  (optional)
     * @param locator  (optional)
     * @param fields  (optional)
     * @param resolveParameters  (optional)
     * @return Files
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Files getFilesListForSubpathOfBuildType(String path, String btLocator, String basePath, String locator, String fields, Boolean resolveParameters) throws ApiException {
        ApiResponse<Files> resp = getFilesListForSubpathOfBuildTypeWithHttpInfo(path, btLocator, basePath, locator, fields, resolveParameters);
        return resp.getData();
    }

    /**
     * List files under this path.
     * 
     * @param path  (required)
     * @param btLocator  (required)
     * @param basePath  (optional)
     * @param locator  (optional)
     * @param fields  (optional)
     * @param resolveParameters  (optional)
     * @return ApiResponse&lt;Files&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Files> getFilesListForSubpathOfBuildTypeWithHttpInfo(String path, String btLocator, String basePath, String locator, String fields, Boolean resolveParameters) throws ApiException {
        com.squareup.okhttp.Call call = getFilesListForSubpathOfBuildTypeValidateBeforeCall(path, btLocator, basePath, locator, fields, resolveParameters, null, null);
        Type localVarReturnType = new TypeToken<Files>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List files under this path. (asynchronously)
     * 
     * @param path  (required)
     * @param btLocator  (required)
     * @param basePath  (optional)
     * @param locator  (optional)
     * @param fields  (optional)
     * @param resolveParameters  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFilesListForSubpathOfBuildTypeAsync(String path, String btLocator, String basePath, String locator, String fields, Boolean resolveParameters, final ApiCallback<Files> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFilesListForSubpathOfBuildTypeValidateBeforeCall(path, btLocator, basePath, locator, fields, resolveParameters, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Files>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFilesListOfBuildType
     * @param btLocator  (required)
     * @param basePath  (optional)
     * @param locator  (optional)
     * @param fields  (optional)
     * @param resolveParameters  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFilesListOfBuildTypeCall(String btLocator, String basePath, String locator, String fields, Boolean resolveParameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/vcs/files/latest"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (basePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("basePath", basePath));
        if (locator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locator", locator));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (resolveParameters != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolveParameters", resolveParameters));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFilesListOfBuildTypeValidateBeforeCall(String btLocator, String basePath, String locator, String fields, Boolean resolveParameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getFilesListOfBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = getFilesListOfBuildTypeCall(btLocator, basePath, locator, fields, resolveParameters, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all files.
     * 
     * @param btLocator  (required)
     * @param basePath  (optional)
     * @param locator  (optional)
     * @param fields  (optional)
     * @param resolveParameters  (optional)
     * @return Files
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Files getFilesListOfBuildType(String btLocator, String basePath, String locator, String fields, Boolean resolveParameters) throws ApiException {
        ApiResponse<Files> resp = getFilesListOfBuildTypeWithHttpInfo(btLocator, basePath, locator, fields, resolveParameters);
        return resp.getData();
    }

    /**
     * List all files.
     * 
     * @param btLocator  (required)
     * @param basePath  (optional)
     * @param locator  (optional)
     * @param fields  (optional)
     * @param resolveParameters  (optional)
     * @return ApiResponse&lt;Files&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Files> getFilesListOfBuildTypeWithHttpInfo(String btLocator, String basePath, String locator, String fields, Boolean resolveParameters) throws ApiException {
        com.squareup.okhttp.Call call = getFilesListOfBuildTypeValidateBeforeCall(btLocator, basePath, locator, fields, resolveParameters, null, null);
        Type localVarReturnType = new TypeToken<Files>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all files. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param basePath  (optional)
     * @param locator  (optional)
     * @param fields  (optional)
     * @param resolveParameters  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFilesListOfBuildTypeAsync(String btLocator, String basePath, String locator, String fields, Boolean resolveParameters, final ApiCallback<Files> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFilesListOfBuildTypeValidateBeforeCall(btLocator, basePath, locator, fields, resolveParameters, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Files>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSnapshotDependency
     * @param btLocator  (required)
     * @param snapshotDepLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSnapshotDependencyCall(String btLocator, String snapshotDepLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "snapshotDepLocator" + "\\}", apiClient.escapeString(snapshotDepLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSnapshotDependencyValidateBeforeCall(String btLocator, String snapshotDepLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getSnapshotDependency(Async)");
        }
        
        // verify the required parameter 'snapshotDepLocator' is set
        if (snapshotDepLocator == null) {
            throw new ApiException("Missing the required parameter 'snapshotDepLocator' when calling getSnapshotDependency(Async)");
        }
        

        com.squareup.okhttp.Call call = getSnapshotDependencyCall(btLocator, snapshotDepLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a snapshot dependency of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param snapshotDepLocator  (required)
     * @param fields  (optional)
     * @return SnapshotDependency
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotDependency getSnapshotDependency(String btLocator, String snapshotDepLocator, String fields) throws ApiException {
        ApiResponse<SnapshotDependency> resp = getSnapshotDependencyWithHttpInfo(btLocator, snapshotDepLocator, fields);
        return resp.getData();
    }

    /**
     * Get a snapshot dependency of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param snapshotDepLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;SnapshotDependency&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotDependency> getSnapshotDependencyWithHttpInfo(String btLocator, String snapshotDepLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getSnapshotDependencyValidateBeforeCall(btLocator, snapshotDepLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<SnapshotDependency>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a snapshot dependency of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param snapshotDepLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSnapshotDependencyAsync(String btLocator, String snapshotDepLocator, String fields, final ApiCallback<SnapshotDependency> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSnapshotDependencyValidateBeforeCall(btLocator, snapshotDepLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotDependency>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTrigger
     * @param btLocator  (required)
     * @param triggerLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTriggerCall(String btLocator, String triggerLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "triggerLocator" + "\\}", apiClient.escapeString(triggerLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTriggerValidateBeforeCall(String btLocator, String triggerLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getTrigger(Async)");
        }
        
        // verify the required parameter 'triggerLocator' is set
        if (triggerLocator == null) {
            throw new ApiException("Missing the required parameter 'triggerLocator' when calling getTrigger(Async)");
        }
        

        com.squareup.okhttp.Call call = getTriggerCall(btLocator, triggerLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a trigger of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param triggerLocator  (required)
     * @param fields  (optional)
     * @return Trigger
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Trigger getTrigger(String btLocator, String triggerLocator, String fields) throws ApiException {
        ApiResponse<Trigger> resp = getTriggerWithHttpInfo(btLocator, triggerLocator, fields);
        return resp.getData();
    }

    /**
     * Get a trigger of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param triggerLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Trigger&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Trigger> getTriggerWithHttpInfo(String btLocator, String triggerLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getTriggerValidateBeforeCall(btLocator, triggerLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a trigger of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param triggerLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTriggerAsync(String btLocator, String triggerLocator, String fields, final ApiCallback<Trigger> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTriggerValidateBeforeCall(btLocator, triggerLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTriggerParameter
     * @param btLocator  (required)
     * @param triggerLocator  (required)
     * @param fieldName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTriggerParameterCall(String btLocator, String triggerLocator, String fieldName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "triggerLocator" + "\\}", apiClient.escapeString(triggerLocator.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapeString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTriggerParameterValidateBeforeCall(String btLocator, String triggerLocator, String fieldName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getTriggerParameter(Async)");
        }
        
        // verify the required parameter 'triggerLocator' is set
        if (triggerLocator == null) {
            throw new ApiException("Missing the required parameter 'triggerLocator' when calling getTriggerParameter(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling getTriggerParameter(Async)");
        }
        

        com.squareup.okhttp.Call call = getTriggerParameterCall(btLocator, triggerLocator, fieldName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a parameter of a trigger of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param triggerLocator  (required)
     * @param fieldName  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getTriggerParameter(String btLocator, String triggerLocator, String fieldName) throws ApiException {
        ApiResponse<String> resp = getTriggerParameterWithHttpInfo(btLocator, triggerLocator, fieldName);
        return resp.getData();
    }

    /**
     * Get a parameter of a trigger of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param triggerLocator  (required)
     * @param fieldName  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getTriggerParameterWithHttpInfo(String btLocator, String triggerLocator, String fieldName) throws ApiException {
        com.squareup.okhttp.Call call = getTriggerParameterValidateBeforeCall(btLocator, triggerLocator, fieldName, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a parameter of a trigger of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param triggerLocator  (required)
     * @param fieldName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTriggerParameterAsync(String btLocator, String triggerLocator, String fieldName, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTriggerParameterValidateBeforeCall(btLocator, triggerLocator, fieldName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVcsRoot
     * @param btLocator  (required)
     * @param vcsRootLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVcsRootCall(String btLocator, String vcsRootLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "vcsRootLocator" + "\\}", apiClient.escapeString(vcsRootLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVcsRootValidateBeforeCall(String btLocator, String vcsRootLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getVcsRoot(Async)");
        }
        
        // verify the required parameter 'vcsRootLocator' is set
        if (vcsRootLocator == null) {
            throw new ApiException("Missing the required parameter 'vcsRootLocator' when calling getVcsRoot(Async)");
        }
        

        com.squareup.okhttp.Call call = getVcsRootCall(btLocator, vcsRootLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a VCS root of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param vcsRootLocator  (required)
     * @param fields  (optional)
     * @return VcsRootEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VcsRootEntry getVcsRoot(String btLocator, String vcsRootLocator, String fields) throws ApiException {
        ApiResponse<VcsRootEntry> resp = getVcsRootWithHttpInfo(btLocator, vcsRootLocator, fields);
        return resp.getData();
    }

    /**
     * Get a VCS root of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param vcsRootLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;VcsRootEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VcsRootEntry> getVcsRootWithHttpInfo(String btLocator, String vcsRootLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getVcsRootValidateBeforeCall(btLocator, vcsRootLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<VcsRootEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a VCS root of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param vcsRootLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVcsRootAsync(String btLocator, String vcsRootLocator, String fields, final ApiCallback<VcsRootEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVcsRootValidateBeforeCall(btLocator, vcsRootLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VcsRootEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVcsRootCheckoutRules
     * @param btLocator  (required)
     * @param vcsRootLocator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVcsRootCheckoutRulesCall(String btLocator, String vcsRootLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "vcsRootLocator" + "\\}", apiClient.escapeString(vcsRootLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVcsRootCheckoutRulesValidateBeforeCall(String btLocator, String vcsRootLocator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getVcsRootCheckoutRules(Async)");
        }
        
        // verify the required parameter 'vcsRootLocator' is set
        if (vcsRootLocator == null) {
            throw new ApiException("Missing the required parameter 'vcsRootLocator' when calling getVcsRootCheckoutRules(Async)");
        }
        

        com.squareup.okhttp.Call call = getVcsRootCheckoutRulesCall(btLocator, vcsRootLocator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get checkout rules of a VCS root of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param vcsRootLocator  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getVcsRootCheckoutRules(String btLocator, String vcsRootLocator) throws ApiException {
        ApiResponse<String> resp = getVcsRootCheckoutRulesWithHttpInfo(btLocator, vcsRootLocator);
        return resp.getData();
    }

    /**
     * Get checkout rules of a VCS root of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param vcsRootLocator  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getVcsRootCheckoutRulesWithHttpInfo(String btLocator, String vcsRootLocator) throws ApiException {
        com.squareup.okhttp.Call call = getVcsRootCheckoutRulesValidateBeforeCall(btLocator, vcsRootLocator, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get checkout rules of a VCS root of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param vcsRootLocator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVcsRootCheckoutRulesAsync(String btLocator, String vcsRootLocator, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVcsRootCheckoutRulesValidateBeforeCall(btLocator, vcsRootLocator, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVcsRootInstancesOfBuildType
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVcsRootInstancesOfBuildTypeCall(String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/vcsRootInstances"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVcsRootInstancesOfBuildTypeValidateBeforeCall(String btLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getVcsRootInstancesOfBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = getVcsRootInstancesOfBuildTypeCall(btLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all VCS root instances of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return VcsRootInstances
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VcsRootInstances getVcsRootInstancesOfBuildType(String btLocator, String fields) throws ApiException {
        ApiResponse<VcsRootInstances> resp = getVcsRootInstancesOfBuildTypeWithHttpInfo(btLocator, fields);
        return resp.getData();
    }

    /**
     * Get all VCS root instances of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;VcsRootInstances&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VcsRootInstances> getVcsRootInstancesOfBuildTypeWithHttpInfo(String btLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getVcsRootInstancesOfBuildTypeValidateBeforeCall(btLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<VcsRootInstances>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all VCS root instances of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVcsRootInstancesOfBuildTypeAsync(String btLocator, String fields, final ApiCallback<VcsRootInstances> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVcsRootInstancesOfBuildTypeValidateBeforeCall(btLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VcsRootInstances>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getZippedFileOfBuildType
     * @param path  (required)
     * @param btLocator  (required)
     * @param basePath  (optional)
     * @param locator  (optional)
     * @param name  (optional)
     * @param resolveParameters  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getZippedFileOfBuildTypeCall(String path, String btLocator, String basePath, String locator, String name, Boolean resolveParameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/vcs/files/latest/archived{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()))
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (basePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("basePath", basePath));
        if (locator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locator", locator));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (resolveParameters != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolveParameters", resolveParameters));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getZippedFileOfBuildTypeValidateBeforeCall(String path, String btLocator, String basePath, String locator, String name, Boolean resolveParameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getZippedFileOfBuildType(Async)");
        }
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling getZippedFileOfBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = getZippedFileOfBuildTypeCall(path, btLocator, basePath, locator, name, resolveParameters, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get specific file zipped.
     * 
     * @param path  (required)
     * @param btLocator  (required)
     * @param basePath  (optional)
     * @param locator  (optional)
     * @param name  (optional)
     * @param resolveParameters  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getZippedFileOfBuildType(String path, String btLocator, String basePath, String locator, String name, Boolean resolveParameters) throws ApiException {
        getZippedFileOfBuildTypeWithHttpInfo(path, btLocator, basePath, locator, name, resolveParameters);
    }

    /**
     * Get specific file zipped.
     * 
     * @param path  (required)
     * @param btLocator  (required)
     * @param basePath  (optional)
     * @param locator  (optional)
     * @param name  (optional)
     * @param resolveParameters  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getZippedFileOfBuildTypeWithHttpInfo(String path, String btLocator, String basePath, String locator, String name, Boolean resolveParameters) throws ApiException {
        com.squareup.okhttp.Call call = getZippedFileOfBuildTypeValidateBeforeCall(path, btLocator, basePath, locator, name, resolveParameters, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get specific file zipped. (asynchronously)
     * 
     * @param path  (required)
     * @param btLocator  (required)
     * @param basePath  (optional)
     * @param locator  (optional)
     * @param name  (optional)
     * @param resolveParameters  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getZippedFileOfBuildTypeAsync(String path, String btLocator, String basePath, String locator, String name, Boolean resolveParameters, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getZippedFileOfBuildTypeValidateBeforeCall(path, btLocator, basePath, locator, name, resolveParameters, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for removeAllTemplates
     * @param btLocator  (required)
     * @param inlineSettings  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeAllTemplatesCall(String btLocator, Boolean inlineSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/templates"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inlineSettings != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inlineSettings", inlineSettings));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeAllTemplatesValidateBeforeCall(String btLocator, Boolean inlineSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling removeAllTemplates(Async)");
        }
        

        com.squareup.okhttp.Call call = removeAllTemplatesCall(btLocator, inlineSettings, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Detach all templates from the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param inlineSettings  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeAllTemplates(String btLocator, Boolean inlineSettings) throws ApiException {
        removeAllTemplatesWithHttpInfo(btLocator, inlineSettings);
    }

    /**
     * Detach all templates from the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param inlineSettings  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeAllTemplatesWithHttpInfo(String btLocator, Boolean inlineSettings) throws ApiException {
        com.squareup.okhttp.Call call = removeAllTemplatesValidateBeforeCall(btLocator, inlineSettings, null, null);
        return apiClient.execute(call);
    }

    /**
     * Detach all templates from the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param inlineSettings  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeAllTemplatesAsync(String btLocator, Boolean inlineSettings, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeAllTemplatesValidateBeforeCall(btLocator, inlineSettings, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for removeTemplate
     * @param btLocator  (required)
     * @param templateLocator  (required)
     * @param inlineSettings  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeTemplateCall(String btLocator, String templateLocator, Boolean inlineSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/templates/{templateLocator}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "templateLocator" + "\\}", apiClient.escapeString(templateLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inlineSettings != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inlineSettings", inlineSettings));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeTemplateValidateBeforeCall(String btLocator, String templateLocator, Boolean inlineSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling removeTemplate(Async)");
        }
        
        // verify the required parameter 'templateLocator' is set
        if (templateLocator == null) {
            throw new ApiException("Missing the required parameter 'templateLocator' when calling removeTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = removeTemplateCall(btLocator, templateLocator, inlineSettings, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Detach a template from the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param templateLocator  (required)
     * @param inlineSettings  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeTemplate(String btLocator, String templateLocator, Boolean inlineSettings) throws ApiException {
        removeTemplateWithHttpInfo(btLocator, templateLocator, inlineSettings);
    }

    /**
     * Detach a template from the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param templateLocator  (required)
     * @param inlineSettings  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeTemplateWithHttpInfo(String btLocator, String templateLocator, Boolean inlineSettings) throws ApiException {
        com.squareup.okhttp.Call call = removeTemplateValidateBeforeCall(btLocator, templateLocator, inlineSettings, null, null);
        return apiClient.execute(call);
    }

    /**
     * Detach a template from the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param templateLocator  (required)
     * @param inlineSettings  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeTemplateAsync(String btLocator, String templateLocator, Boolean inlineSettings, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeTemplateValidateBeforeCall(btLocator, templateLocator, inlineSettings, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for replaceAgentRequirement
     * @param btLocator  (required)
     * @param agentRequirementLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceAgentRequirementCall(String btLocator, String agentRequirementLocator, String fields, AgentRequirement body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "agentRequirementLocator" + "\\}", apiClient.escapeString(agentRequirementLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceAgentRequirementValidateBeforeCall(String btLocator, String agentRequirementLocator, String fields, AgentRequirement body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling replaceAgentRequirement(Async)");
        }
        
        // verify the required parameter 'agentRequirementLocator' is set
        if (agentRequirementLocator == null) {
            throw new ApiException("Missing the required parameter 'agentRequirementLocator' when calling replaceAgentRequirement(Async)");
        }
        

        com.squareup.okhttp.Call call = replaceAgentRequirementCall(btLocator, agentRequirementLocator, fields, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an agent requirement of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param agentRequirementLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return AgentRequirement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AgentRequirement replaceAgentRequirement(String btLocator, String agentRequirementLocator, String fields, AgentRequirement body) throws ApiException {
        ApiResponse<AgentRequirement> resp = replaceAgentRequirementWithHttpInfo(btLocator, agentRequirementLocator, fields, body);
        return resp.getData();
    }

    /**
     * Update an agent requirement of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param agentRequirementLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;AgentRequirement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AgentRequirement> replaceAgentRequirementWithHttpInfo(String btLocator, String agentRequirementLocator, String fields, AgentRequirement body) throws ApiException {
        com.squareup.okhttp.Call call = replaceAgentRequirementValidateBeforeCall(btLocator, agentRequirementLocator, fields, body, null, null);
        Type localVarReturnType = new TypeToken<AgentRequirement>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an agent requirement of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param agentRequirementLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceAgentRequirementAsync(String btLocator, String agentRequirementLocator, String fields, AgentRequirement body, final ApiCallback<AgentRequirement> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceAgentRequirementValidateBeforeCall(btLocator, agentRequirementLocator, fields, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AgentRequirement>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for replaceAllAgentRequirements
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceAllAgentRequirementsCall(String btLocator, String fields, AgentRequirements body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/agent-requirements"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceAllAgentRequirementsValidateBeforeCall(String btLocator, String fields, AgentRequirements body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling replaceAllAgentRequirements(Async)");
        }
        

        com.squareup.okhttp.Call call = replaceAllAgentRequirementsCall(btLocator, fields, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update all agent requirements of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return AgentRequirements
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AgentRequirements replaceAllAgentRequirements(String btLocator, String fields, AgentRequirements body) throws ApiException {
        ApiResponse<AgentRequirements> resp = replaceAllAgentRequirementsWithHttpInfo(btLocator, fields, body);
        return resp.getData();
    }

    /**
     * Update all agent requirements of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;AgentRequirements&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AgentRequirements> replaceAllAgentRequirementsWithHttpInfo(String btLocator, String fields, AgentRequirements body) throws ApiException {
        com.squareup.okhttp.Call call = replaceAllAgentRequirementsValidateBeforeCall(btLocator, fields, body, null, null);
        Type localVarReturnType = new TypeToken<AgentRequirements>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update all agent requirements of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceAllAgentRequirementsAsync(String btLocator, String fields, AgentRequirements body, final ApiCallback<AgentRequirements> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceAllAgentRequirementsValidateBeforeCall(btLocator, fields, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AgentRequirements>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for replaceAllArtifactDependencies
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceAllArtifactDependenciesCall(String btLocator, String fields, ArtifactDependencies body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/artifact-dependencies"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceAllArtifactDependenciesValidateBeforeCall(String btLocator, String fields, ArtifactDependencies body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling replaceAllArtifactDependencies(Async)");
        }
        

        com.squareup.okhttp.Call call = replaceAllArtifactDependenciesCall(btLocator, fields, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update all artifact dependencies of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return ArtifactDependencies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArtifactDependencies replaceAllArtifactDependencies(String btLocator, String fields, ArtifactDependencies body) throws ApiException {
        ApiResponse<ArtifactDependencies> resp = replaceAllArtifactDependenciesWithHttpInfo(btLocator, fields, body);
        return resp.getData();
    }

    /**
     * Update all artifact dependencies of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;ArtifactDependencies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArtifactDependencies> replaceAllArtifactDependenciesWithHttpInfo(String btLocator, String fields, ArtifactDependencies body) throws ApiException {
        com.squareup.okhttp.Call call = replaceAllArtifactDependenciesValidateBeforeCall(btLocator, fields, body, null, null);
        Type localVarReturnType = new TypeToken<ArtifactDependencies>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update all artifact dependencies of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceAllArtifactDependenciesAsync(String btLocator, String fields, ArtifactDependencies body, final ApiCallback<ArtifactDependencies> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceAllArtifactDependenciesValidateBeforeCall(btLocator, fields, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArtifactDependencies>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for replaceAllBuildFeatures
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceAllBuildFeaturesCall(String btLocator, String fields, Features body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/features"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceAllBuildFeaturesValidateBeforeCall(String btLocator, String fields, Features body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling replaceAllBuildFeatures(Async)");
        }
        

        com.squareup.okhttp.Call call = replaceAllBuildFeaturesCall(btLocator, fields, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update all build features of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return Features
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Features replaceAllBuildFeatures(String btLocator, String fields, Features body) throws ApiException {
        ApiResponse<Features> resp = replaceAllBuildFeaturesWithHttpInfo(btLocator, fields, body);
        return resp.getData();
    }

    /**
     * Update all build features of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;Features&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Features> replaceAllBuildFeaturesWithHttpInfo(String btLocator, String fields, Features body) throws ApiException {
        com.squareup.okhttp.Call call = replaceAllBuildFeaturesValidateBeforeCall(btLocator, fields, body, null, null);
        Type localVarReturnType = new TypeToken<Features>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update all build features of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceAllBuildFeaturesAsync(String btLocator, String fields, Features body, final ApiCallback<Features> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceAllBuildFeaturesValidateBeforeCall(btLocator, fields, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Features>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for replaceAllBuildSteps
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceAllBuildStepsCall(String btLocator, String fields, Steps body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/steps"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceAllBuildStepsValidateBeforeCall(String btLocator, String fields, Steps body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling replaceAllBuildSteps(Async)");
        }
        

        com.squareup.okhttp.Call call = replaceAllBuildStepsCall(btLocator, fields, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update all build steps of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return Steps
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Steps replaceAllBuildSteps(String btLocator, String fields, Steps body) throws ApiException {
        ApiResponse<Steps> resp = replaceAllBuildStepsWithHttpInfo(btLocator, fields, body);
        return resp.getData();
    }

    /**
     * Update all build steps of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;Steps&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Steps> replaceAllBuildStepsWithHttpInfo(String btLocator, String fields, Steps body) throws ApiException {
        com.squareup.okhttp.Call call = replaceAllBuildStepsValidateBeforeCall(btLocator, fields, body, null, null);
        Type localVarReturnType = new TypeToken<Steps>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update all build steps of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceAllBuildStepsAsync(String btLocator, String fields, Steps body, final ApiCallback<Steps> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceAllBuildStepsValidateBeforeCall(btLocator, fields, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Steps>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for replaceAllSnapshotDependencies
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceAllSnapshotDependenciesCall(String btLocator, String fields, SnapshotDependencies body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/snapshot-dependencies"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceAllSnapshotDependenciesValidateBeforeCall(String btLocator, String fields, SnapshotDependencies body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling replaceAllSnapshotDependencies(Async)");
        }
        

        com.squareup.okhttp.Call call = replaceAllSnapshotDependenciesCall(btLocator, fields, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update all snapshot dependencies of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return SnapshotDependencies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotDependencies replaceAllSnapshotDependencies(String btLocator, String fields, SnapshotDependencies body) throws ApiException {
        ApiResponse<SnapshotDependencies> resp = replaceAllSnapshotDependenciesWithHttpInfo(btLocator, fields, body);
        return resp.getData();
    }

    /**
     * Update all snapshot dependencies of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;SnapshotDependencies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotDependencies> replaceAllSnapshotDependenciesWithHttpInfo(String btLocator, String fields, SnapshotDependencies body) throws ApiException {
        com.squareup.okhttp.Call call = replaceAllSnapshotDependenciesValidateBeforeCall(btLocator, fields, body, null, null);
        Type localVarReturnType = new TypeToken<SnapshotDependencies>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update all snapshot dependencies of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceAllSnapshotDependenciesAsync(String btLocator, String fields, SnapshotDependencies body, final ApiCallback<SnapshotDependencies> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceAllSnapshotDependenciesValidateBeforeCall(btLocator, fields, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotDependencies>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for replaceAllTriggers
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceAllTriggersCall(String btLocator, String fields, Triggers body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/triggers"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceAllTriggersValidateBeforeCall(String btLocator, String fields, Triggers body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling replaceAllTriggers(Async)");
        }
        

        com.squareup.okhttp.Call call = replaceAllTriggersCall(btLocator, fields, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update all triggers of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return Triggers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Triggers replaceAllTriggers(String btLocator, String fields, Triggers body) throws ApiException {
        ApiResponse<Triggers> resp = replaceAllTriggersWithHttpInfo(btLocator, fields, body);
        return resp.getData();
    }

    /**
     * Update all triggers of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;Triggers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Triggers> replaceAllTriggersWithHttpInfo(String btLocator, String fields, Triggers body) throws ApiException {
        com.squareup.okhttp.Call call = replaceAllTriggersValidateBeforeCall(btLocator, fields, body, null, null);
        Type localVarReturnType = new TypeToken<Triggers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update all triggers of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceAllTriggersAsync(String btLocator, String fields, Triggers body, final ApiCallback<Triggers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceAllTriggersValidateBeforeCall(btLocator, fields, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Triggers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for replaceAllVcsRoots
     * @param btLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceAllVcsRootsCall(String btLocator, VcsRootEntries body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-entries"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceAllVcsRootsValidateBeforeCall(String btLocator, VcsRootEntries body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling replaceAllVcsRoots(Async)");
        }
        

        com.squareup.okhttp.Call call = replaceAllVcsRootsCall(btLocator, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update all VCS roots of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return VcsRootEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VcsRootEntries replaceAllVcsRoots(String btLocator, VcsRootEntries body, String fields) throws ApiException {
        ApiResponse<VcsRootEntries> resp = replaceAllVcsRootsWithHttpInfo(btLocator, body, fields);
        return resp.getData();
    }

    /**
     * Update all VCS roots of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;VcsRootEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VcsRootEntries> replaceAllVcsRootsWithHttpInfo(String btLocator, VcsRootEntries body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = replaceAllVcsRootsValidateBeforeCall(btLocator, body, fields, null, null);
        Type localVarReturnType = new TypeToken<VcsRootEntries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update all VCS roots of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceAllVcsRootsAsync(String btLocator, VcsRootEntries body, String fields, final ApiCallback<VcsRootEntries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceAllVcsRootsValidateBeforeCall(btLocator, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VcsRootEntries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for replaceArtifactDependency
     * @param btLocator  (required)
     * @param artifactDepLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceArtifactDependencyCall(String btLocator, String artifactDepLocator, String fields, ArtifactDependency body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "artifactDepLocator" + "\\}", apiClient.escapeString(artifactDepLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceArtifactDependencyValidateBeforeCall(String btLocator, String artifactDepLocator, String fields, ArtifactDependency body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling replaceArtifactDependency(Async)");
        }
        
        // verify the required parameter 'artifactDepLocator' is set
        if (artifactDepLocator == null) {
            throw new ApiException("Missing the required parameter 'artifactDepLocator' when calling replaceArtifactDependency(Async)");
        }
        

        com.squareup.okhttp.Call call = replaceArtifactDependencyCall(btLocator, artifactDepLocator, fields, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an artifact dependency of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param artifactDepLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return ArtifactDependency
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArtifactDependency replaceArtifactDependency(String btLocator, String artifactDepLocator, String fields, ArtifactDependency body) throws ApiException {
        ApiResponse<ArtifactDependency> resp = replaceArtifactDependencyWithHttpInfo(btLocator, artifactDepLocator, fields, body);
        return resp.getData();
    }

    /**
     * Update an artifact dependency of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param artifactDepLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;ArtifactDependency&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArtifactDependency> replaceArtifactDependencyWithHttpInfo(String btLocator, String artifactDepLocator, String fields, ArtifactDependency body) throws ApiException {
        com.squareup.okhttp.Call call = replaceArtifactDependencyValidateBeforeCall(btLocator, artifactDepLocator, fields, body, null, null);
        Type localVarReturnType = new TypeToken<ArtifactDependency>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an artifact dependency of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param artifactDepLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceArtifactDependencyAsync(String btLocator, String artifactDepLocator, String fields, ArtifactDependency body, final ApiCallback<ArtifactDependency> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceArtifactDependencyValidateBeforeCall(btLocator, artifactDepLocator, fields, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArtifactDependency>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for replaceBuildFeature
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceBuildFeatureCall(String btLocator, String featureId, String fields, Feature body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "featureId" + "\\}", apiClient.escapeString(featureId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceBuildFeatureValidateBeforeCall(String btLocator, String featureId, String fields, Feature body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling replaceBuildFeature(Async)");
        }
        
        // verify the required parameter 'featureId' is set
        if (featureId == null) {
            throw new ApiException("Missing the required parameter 'featureId' when calling replaceBuildFeature(Async)");
        }
        

        com.squareup.okhttp.Call call = replaceBuildFeatureCall(btLocator, featureId, fields, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a build feature of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return Feature
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Feature replaceBuildFeature(String btLocator, String featureId, String fields, Feature body) throws ApiException {
        ApiResponse<Feature> resp = replaceBuildFeatureWithHttpInfo(btLocator, featureId, fields, body);
        return resp.getData();
    }

    /**
     * Update a build feature of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;Feature&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Feature> replaceBuildFeatureWithHttpInfo(String btLocator, String featureId, String fields, Feature body) throws ApiException {
        com.squareup.okhttp.Call call = replaceBuildFeatureValidateBeforeCall(btLocator, featureId, fields, body, null, null);
        Type localVarReturnType = new TypeToken<Feature>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a build feature of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceBuildFeatureAsync(String btLocator, String featureId, String fields, Feature body, final ApiCallback<Feature> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceBuildFeatureValidateBeforeCall(btLocator, featureId, fields, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Feature>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for replaceBuildFeatureParameters
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceBuildFeatureParametersCall(String btLocator, String featureId, Properties body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "featureId" + "\\}", apiClient.escapeString(featureId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceBuildFeatureParametersValidateBeforeCall(String btLocator, String featureId, Properties body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling replaceBuildFeatureParameters(Async)");
        }
        
        // verify the required parameter 'featureId' is set
        if (featureId == null) {
            throw new ApiException("Missing the required parameter 'featureId' when calling replaceBuildFeatureParameters(Async)");
        }
        

        com.squareup.okhttp.Call call = replaceBuildFeatureParametersCall(btLocator, featureId, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a parameter of a build feature of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return Properties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Properties replaceBuildFeatureParameters(String btLocator, String featureId, Properties body, String fields) throws ApiException {
        ApiResponse<Properties> resp = replaceBuildFeatureParametersWithHttpInfo(btLocator, featureId, body, fields);
        return resp.getData();
    }

    /**
     * Update a parameter of a build feature of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Properties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Properties> replaceBuildFeatureParametersWithHttpInfo(String btLocator, String featureId, Properties body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = replaceBuildFeatureParametersValidateBeforeCall(btLocator, featureId, body, fields, null, null);
        Type localVarReturnType = new TypeToken<Properties>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a parameter of a build feature of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceBuildFeatureParametersAsync(String btLocator, String featureId, Properties body, String fields, final ApiCallback<Properties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceBuildFeatureParametersValidateBeforeCall(btLocator, featureId, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Properties>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for replaceBuildStep
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceBuildStepCall(String btLocator, String stepId, String fields, Step body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "stepId" + "\\}", apiClient.escapeString(stepId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceBuildStepValidateBeforeCall(String btLocator, String stepId, String fields, Step body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling replaceBuildStep(Async)");
        }
        
        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling replaceBuildStep(Async)");
        }
        

        com.squareup.okhttp.Call call = replaceBuildStepCall(btLocator, stepId, fields, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace a build step of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return Step
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Step replaceBuildStep(String btLocator, String stepId, String fields, Step body) throws ApiException {
        ApiResponse<Step> resp = replaceBuildStepWithHttpInfo(btLocator, stepId, fields, body);
        return resp.getData();
    }

    /**
     * Replace a build step of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;Step&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Step> replaceBuildStepWithHttpInfo(String btLocator, String stepId, String fields, Step body) throws ApiException {
        com.squareup.okhttp.Call call = replaceBuildStepValidateBeforeCall(btLocator, stepId, fields, body, null, null);
        Type localVarReturnType = new TypeToken<Step>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace a build step of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceBuildStepAsync(String btLocator, String stepId, String fields, Step body, final ApiCallback<Step> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceBuildStepValidateBeforeCall(btLocator, stepId, fields, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Step>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for replaceSnapshotDependency
     * @param btLocator  (required)
     * @param snapshotDepLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceSnapshotDependencyCall(String btLocator, String snapshotDepLocator, String fields, SnapshotDependency body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "snapshotDepLocator" + "\\}", apiClient.escapeString(snapshotDepLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceSnapshotDependencyValidateBeforeCall(String btLocator, String snapshotDepLocator, String fields, SnapshotDependency body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling replaceSnapshotDependency(Async)");
        }
        
        // verify the required parameter 'snapshotDepLocator' is set
        if (snapshotDepLocator == null) {
            throw new ApiException("Missing the required parameter 'snapshotDepLocator' when calling replaceSnapshotDependency(Async)");
        }
        

        com.squareup.okhttp.Call call = replaceSnapshotDependencyCall(btLocator, snapshotDepLocator, fields, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a snapshot dependency of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param snapshotDepLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return SnapshotDependency
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotDependency replaceSnapshotDependency(String btLocator, String snapshotDepLocator, String fields, SnapshotDependency body) throws ApiException {
        ApiResponse<SnapshotDependency> resp = replaceSnapshotDependencyWithHttpInfo(btLocator, snapshotDepLocator, fields, body);
        return resp.getData();
    }

    /**
     * Update a snapshot dependency of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param snapshotDepLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;SnapshotDependency&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotDependency> replaceSnapshotDependencyWithHttpInfo(String btLocator, String snapshotDepLocator, String fields, SnapshotDependency body) throws ApiException {
        com.squareup.okhttp.Call call = replaceSnapshotDependencyValidateBeforeCall(btLocator, snapshotDepLocator, fields, body, null, null);
        Type localVarReturnType = new TypeToken<SnapshotDependency>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a snapshot dependency of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param snapshotDepLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceSnapshotDependencyAsync(String btLocator, String snapshotDepLocator, String fields, SnapshotDependency body, final ApiCallback<SnapshotDependency> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceSnapshotDependencyValidateBeforeCall(btLocator, snapshotDepLocator, fields, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotDependency>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for replaceTrigger
     * @param btLocator  (required)
     * @param triggerLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceTriggerCall(String btLocator, String triggerLocator, String fields, Trigger body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "triggerLocator" + "\\}", apiClient.escapeString(triggerLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceTriggerValidateBeforeCall(String btLocator, String triggerLocator, String fields, Trigger body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling replaceTrigger(Async)");
        }
        
        // verify the required parameter 'triggerLocator' is set
        if (triggerLocator == null) {
            throw new ApiException("Missing the required parameter 'triggerLocator' when calling replaceTrigger(Async)");
        }
        

        com.squareup.okhttp.Call call = replaceTriggerCall(btLocator, triggerLocator, fields, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a trigger of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param triggerLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return Trigger
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Trigger replaceTrigger(String btLocator, String triggerLocator, String fields, Trigger body) throws ApiException {
        ApiResponse<Trigger> resp = replaceTriggerWithHttpInfo(btLocator, triggerLocator, fields, body);
        return resp.getData();
    }

    /**
     * Update a trigger of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param triggerLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;Trigger&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Trigger> replaceTriggerWithHttpInfo(String btLocator, String triggerLocator, String fields, Trigger body) throws ApiException {
        com.squareup.okhttp.Call call = replaceTriggerValidateBeforeCall(btLocator, triggerLocator, fields, body, null, null);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a trigger of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param triggerLocator  (required)
     * @param fields  (optional)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceTriggerAsync(String btLocator, String triggerLocator, String fields, Trigger body, final ApiCallback<Trigger> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceTriggerValidateBeforeCall(btLocator, triggerLocator, fields, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setAgentRequirementParameter
     * @param btLocator  (required)
     * @param agentRequirementLocator  (required)
     * @param fieldName  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setAgentRequirementParameterCall(String btLocator, String agentRequirementLocator, String fieldName, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "agentRequirementLocator" + "\\}", apiClient.escapeString(agentRequirementLocator.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapeString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setAgentRequirementParameterValidateBeforeCall(String btLocator, String agentRequirementLocator, String fieldName, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling setAgentRequirementParameter(Async)");
        }
        
        // verify the required parameter 'agentRequirementLocator' is set
        if (agentRequirementLocator == null) {
            throw new ApiException("Missing the required parameter 'agentRequirementLocator' when calling setAgentRequirementParameter(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling setAgentRequirementParameter(Async)");
        }
        

        com.squareup.okhttp.Call call = setAgentRequirementParameterCall(btLocator, agentRequirementLocator, fieldName, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a parameter of an agent requirement of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param agentRequirementLocator  (required)
     * @param fieldName  (required)
     * @param body  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String setAgentRequirementParameter(String btLocator, String agentRequirementLocator, String fieldName, String body) throws ApiException {
        ApiResponse<String> resp = setAgentRequirementParameterWithHttpInfo(btLocator, agentRequirementLocator, fieldName, body);
        return resp.getData();
    }

    /**
     * Update a parameter of an agent requirement of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param agentRequirementLocator  (required)
     * @param fieldName  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> setAgentRequirementParameterWithHttpInfo(String btLocator, String agentRequirementLocator, String fieldName, String body) throws ApiException {
        com.squareup.okhttp.Call call = setAgentRequirementParameterValidateBeforeCall(btLocator, agentRequirementLocator, fieldName, body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a parameter of an agent requirement of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param agentRequirementLocator  (required)
     * @param fieldName  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setAgentRequirementParameterAsync(String btLocator, String agentRequirementLocator, String fieldName, String body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setAgentRequirementParameterValidateBeforeCall(btLocator, agentRequirementLocator, fieldName, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setArtifactDependencyParameter
     * @param btLocator  (required)
     * @param artifactDepLocator  (required)
     * @param fieldName  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setArtifactDependencyParameterCall(String btLocator, String artifactDepLocator, String fieldName, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "artifactDepLocator" + "\\}", apiClient.escapeString(artifactDepLocator.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapeString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setArtifactDependencyParameterValidateBeforeCall(String btLocator, String artifactDepLocator, String fieldName, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling setArtifactDependencyParameter(Async)");
        }
        
        // verify the required parameter 'artifactDepLocator' is set
        if (artifactDepLocator == null) {
            throw new ApiException("Missing the required parameter 'artifactDepLocator' when calling setArtifactDependencyParameter(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling setArtifactDependencyParameter(Async)");
        }
        

        com.squareup.okhttp.Call call = setArtifactDependencyParameterCall(btLocator, artifactDepLocator, fieldName, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a parameter of an artifact dependency of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param artifactDepLocator  (required)
     * @param fieldName  (required)
     * @param body  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String setArtifactDependencyParameter(String btLocator, String artifactDepLocator, String fieldName, String body) throws ApiException {
        ApiResponse<String> resp = setArtifactDependencyParameterWithHttpInfo(btLocator, artifactDepLocator, fieldName, body);
        return resp.getData();
    }

    /**
     * Update a parameter of an artifact dependency of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param artifactDepLocator  (required)
     * @param fieldName  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> setArtifactDependencyParameterWithHttpInfo(String btLocator, String artifactDepLocator, String fieldName, String body) throws ApiException {
        com.squareup.okhttp.Call call = setArtifactDependencyParameterValidateBeforeCall(btLocator, artifactDepLocator, fieldName, body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a parameter of an artifact dependency of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param artifactDepLocator  (required)
     * @param fieldName  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setArtifactDependencyParameterAsync(String btLocator, String artifactDepLocator, String fieldName, String body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setArtifactDependencyParameterValidateBeforeCall(btLocator, artifactDepLocator, fieldName, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setBuildFeatureParameter
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param name  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setBuildFeatureParameterCall(String btLocator, String featureId, String name, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "featureId" + "\\}", apiClient.escapeString(featureId.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setBuildFeatureParameterValidateBeforeCall(String btLocator, String featureId, String name, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling setBuildFeatureParameter(Async)");
        }
        
        // verify the required parameter 'featureId' is set
        if (featureId == null) {
            throw new ApiException("Missing the required parameter 'featureId' when calling setBuildFeatureParameter(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setBuildFeatureParameter(Async)");
        }
        

        com.squareup.okhttp.Call call = setBuildFeatureParameterCall(btLocator, featureId, name, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a parameter of a build feature of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param name  (required)
     * @param body  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String setBuildFeatureParameter(String btLocator, String featureId, String name, String body) throws ApiException {
        ApiResponse<String> resp = setBuildFeatureParameterWithHttpInfo(btLocator, featureId, name, body);
        return resp.getData();
    }

    /**
     * Update a parameter of a build feature of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param name  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> setBuildFeatureParameterWithHttpInfo(String btLocator, String featureId, String name, String body) throws ApiException {
        com.squareup.okhttp.Call call = setBuildFeatureParameterValidateBeforeCall(btLocator, featureId, name, body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a parameter of a build feature of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param featureId  (required)
     * @param name  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setBuildFeatureParameterAsync(String btLocator, String featureId, String name, String body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setBuildFeatureParameterValidateBeforeCall(btLocator, featureId, name, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setBuildStepParameter
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param fieldName  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setBuildStepParameterCall(String btLocator, String stepId, String fieldName, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "stepId" + "\\}", apiClient.escapeString(stepId.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapeString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setBuildStepParameterValidateBeforeCall(String btLocator, String stepId, String fieldName, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling setBuildStepParameter(Async)");
        }
        
        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling setBuildStepParameter(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling setBuildStepParameter(Async)");
        }
        

        com.squareup.okhttp.Call call = setBuildStepParameterCall(btLocator, stepId, fieldName, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a parameter of a build step of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param fieldName  (required)
     * @param body  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String setBuildStepParameter(String btLocator, String stepId, String fieldName, String body) throws ApiException {
        ApiResponse<String> resp = setBuildStepParameterWithHttpInfo(btLocator, stepId, fieldName, body);
        return resp.getData();
    }

    /**
     * Update a parameter of a build step of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param fieldName  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> setBuildStepParameterWithHttpInfo(String btLocator, String stepId, String fieldName, String body) throws ApiException {
        com.squareup.okhttp.Call call = setBuildStepParameterValidateBeforeCall(btLocator, stepId, fieldName, body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a parameter of a build step of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param stepId  (required)
     * @param fieldName  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setBuildStepParameterAsync(String btLocator, String stepId, String fieldName, String body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setBuildStepParameterValidateBeforeCall(btLocator, stepId, fieldName, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setBuildTypeField
     * @param btLocator  (required)
     * @param field  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setBuildTypeFieldCall(String btLocator, String field, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/{field}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "field" + "\\}", apiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setBuildTypeFieldValidateBeforeCall(String btLocator, String field, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling setBuildTypeField(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling setBuildTypeField(Async)");
        }
        

        com.squareup.okhttp.Call call = setBuildTypeFieldCall(btLocator, field, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a field of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param field  (required)
     * @param body  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String setBuildTypeField(String btLocator, String field, String body) throws ApiException {
        ApiResponse<String> resp = setBuildTypeFieldWithHttpInfo(btLocator, field, body);
        return resp.getData();
    }

    /**
     * Update a field of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param field  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> setBuildTypeFieldWithHttpInfo(String btLocator, String field, String body) throws ApiException {
        com.squareup.okhttp.Call call = setBuildTypeFieldValidateBeforeCall(btLocator, field, body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a field of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param field  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setBuildTypeFieldAsync(String btLocator, String field, String body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setBuildTypeFieldValidateBeforeCall(btLocator, field, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setBuildTypeTemplates
     * @param btLocator  (required)
     * @param body  (optional)
     * @param optimizeSettings  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setBuildTypeTemplatesCall(String btLocator, BuildTypes body, Boolean optimizeSettings, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/templates"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (optimizeSettings != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("optimizeSettings", optimizeSettings));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setBuildTypeTemplatesValidateBeforeCall(String btLocator, BuildTypes body, Boolean optimizeSettings, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling setBuildTypeTemplates(Async)");
        }
        

        com.squareup.okhttp.Call call = setBuildTypeTemplatesCall(btLocator, body, optimizeSettings, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update all templates of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param body  (optional)
     * @param optimizeSettings  (optional)
     * @param fields  (optional)
     * @return BuildTypes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuildTypes setBuildTypeTemplates(String btLocator, BuildTypes body, Boolean optimizeSettings, String fields) throws ApiException {
        ApiResponse<BuildTypes> resp = setBuildTypeTemplatesWithHttpInfo(btLocator, body, optimizeSettings, fields);
        return resp.getData();
    }

    /**
     * Update all templates of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param body  (optional)
     * @param optimizeSettings  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;BuildTypes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuildTypes> setBuildTypeTemplatesWithHttpInfo(String btLocator, BuildTypes body, Boolean optimizeSettings, String fields) throws ApiException {
        com.squareup.okhttp.Call call = setBuildTypeTemplatesValidateBeforeCall(btLocator, body, optimizeSettings, fields, null, null);
        Type localVarReturnType = new TypeToken<BuildTypes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update all templates of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param body  (optional)
     * @param optimizeSettings  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setBuildTypeTemplatesAsync(String btLocator, BuildTypes body, Boolean optimizeSettings, String fields, final ApiCallback<BuildTypes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setBuildTypeTemplatesValidateBeforeCall(btLocator, body, optimizeSettings, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuildTypes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setTriggerParameter
     * @param btLocator  (required)
     * @param triggerLocator  (required)
     * @param fieldName  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setTriggerParameterCall(String btLocator, String triggerLocator, String fieldName, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "triggerLocator" + "\\}", apiClient.escapeString(triggerLocator.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapeString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setTriggerParameterValidateBeforeCall(String btLocator, String triggerLocator, String fieldName, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling setTriggerParameter(Async)");
        }
        
        // verify the required parameter 'triggerLocator' is set
        if (triggerLocator == null) {
            throw new ApiException("Missing the required parameter 'triggerLocator' when calling setTriggerParameter(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling setTriggerParameter(Async)");
        }
        

        com.squareup.okhttp.Call call = setTriggerParameterCall(btLocator, triggerLocator, fieldName, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a parameter of a trigger of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param triggerLocator  (required)
     * @param fieldName  (required)
     * @param body  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String setTriggerParameter(String btLocator, String triggerLocator, String fieldName, String body) throws ApiException {
        ApiResponse<String> resp = setTriggerParameterWithHttpInfo(btLocator, triggerLocator, fieldName, body);
        return resp.getData();
    }

    /**
     * Update a parameter of a trigger of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param triggerLocator  (required)
     * @param fieldName  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> setTriggerParameterWithHttpInfo(String btLocator, String triggerLocator, String fieldName, String body) throws ApiException {
        com.squareup.okhttp.Call call = setTriggerParameterValidateBeforeCall(btLocator, triggerLocator, fieldName, body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a parameter of a trigger of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param triggerLocator  (required)
     * @param fieldName  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setTriggerParameterAsync(String btLocator, String triggerLocator, String fieldName, String body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setTriggerParameterValidateBeforeCall(btLocator, triggerLocator, fieldName, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBuildParameterOfBuildType
     * @param name  (required)
     * @param btLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBuildParameterOfBuildTypeCall(String name, String btLocator, Property body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBuildParameterOfBuildTypeValidateBeforeCall(String name, String btLocator, Property body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateBuildParameterOfBuildType(Async)");
        }
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling updateBuildParameterOfBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBuildParameterOfBuildTypeCall(name, btLocator, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update build parameter.
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return Property
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Property updateBuildParameterOfBuildType(String name, String btLocator, Property body, String fields) throws ApiException {
        ApiResponse<Property> resp = updateBuildParameterOfBuildTypeWithHttpInfo(name, btLocator, body, fields);
        return resp.getData();
    }

    /**
     * Update build parameter.
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Property&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Property> updateBuildParameterOfBuildTypeWithHttpInfo(String name, String btLocator, Property body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = updateBuildParameterOfBuildTypeValidateBeforeCall(name, btLocator, body, fields, null, null);
        Type localVarReturnType = new TypeToken<Property>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update build parameter. (asynchronously)
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBuildParameterOfBuildTypeAsync(String name, String btLocator, Property body, String fields, final ApiCallback<Property> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBuildParameterOfBuildTypeValidateBeforeCall(name, btLocator, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Property>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBuildParameterSpecificationOfBuildType
     * @param name  (required)
     * @param btLocator  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBuildParameterSpecificationOfBuildTypeCall(String name, String btLocator, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}/type/rawValue"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBuildParameterSpecificationOfBuildTypeValidateBeforeCall(String name, String btLocator, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateBuildParameterSpecificationOfBuildType(Async)");
        }
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling updateBuildParameterSpecificationOfBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBuildParameterSpecificationOfBuildTypeCall(name, btLocator, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update build parameter specification.
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @param body  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String updateBuildParameterSpecificationOfBuildType(String name, String btLocator, String body) throws ApiException {
        ApiResponse<String> resp = updateBuildParameterSpecificationOfBuildTypeWithHttpInfo(name, btLocator, body);
        return resp.getData();
    }

    /**
     * Update build parameter specification.
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> updateBuildParameterSpecificationOfBuildTypeWithHttpInfo(String name, String btLocator, String body) throws ApiException {
        com.squareup.okhttp.Call call = updateBuildParameterSpecificationOfBuildTypeValidateBeforeCall(name, btLocator, body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update build parameter specification. (asynchronously)
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBuildParameterSpecificationOfBuildTypeAsync(String name, String btLocator, String body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBuildParameterSpecificationOfBuildTypeValidateBeforeCall(name, btLocator, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBuildParameterTypeOfBuildType
     * @param name  (required)
     * @param btLocator  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBuildParameterTypeOfBuildTypeCall(String name, String btLocator, Type body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}/type"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBuildParameterTypeOfBuildTypeValidateBeforeCall(String name, String btLocator, Type body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateBuildParameterTypeOfBuildType(Async)");
        }
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling updateBuildParameterTypeOfBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBuildParameterTypeOfBuildTypeCall(name, btLocator, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update type of build parameter.
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @param body  (optional)
     * @return Type
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Type updateBuildParameterTypeOfBuildType(String name, String btLocator, Type body) throws ApiException {
        ApiResponse<Type> resp = updateBuildParameterTypeOfBuildTypeWithHttpInfo(name, btLocator, body);
        return resp.getData();
    }

    /**
     * Update type of build parameter.
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Type&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Type> updateBuildParameterTypeOfBuildTypeWithHttpInfo(String name, String btLocator, Type body) throws ApiException {
        com.squareup.okhttp.Call call = updateBuildParameterTypeOfBuildTypeValidateBeforeCall(name, btLocator, body, null, null);
        Type localVarReturnType = new TypeToken<Type>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update type of build parameter. (asynchronously)
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBuildParameterTypeOfBuildTypeAsync(String name, String btLocator, Type body, final ApiCallback<Type> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBuildParameterTypeOfBuildTypeValidateBeforeCall(name, btLocator, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Type>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBuildParameterValueOfBuildType
     * @param name  (required)
     * @param btLocator  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBuildParameterValueOfBuildTypeCall(String name, String btLocator, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}/value"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBuildParameterValueOfBuildTypeValidateBeforeCall(String name, String btLocator, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateBuildParameterValueOfBuildType(Async)");
        }
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling updateBuildParameterValueOfBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBuildParameterValueOfBuildTypeCall(name, btLocator, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update value of build parameter.
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @param body  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String updateBuildParameterValueOfBuildType(String name, String btLocator, String body) throws ApiException {
        ApiResponse<String> resp = updateBuildParameterValueOfBuildTypeWithHttpInfo(name, btLocator, body);
        return resp.getData();
    }

    /**
     * Update value of build parameter.
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> updateBuildParameterValueOfBuildTypeWithHttpInfo(String name, String btLocator, String body) throws ApiException {
        com.squareup.okhttp.Call call = updateBuildParameterValueOfBuildTypeValidateBeforeCall(name, btLocator, body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update value of build parameter. (asynchronously)
     * 
     * @param name  (required)
     * @param btLocator  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBuildParameterValueOfBuildTypeAsync(String name, String btLocator, String body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBuildParameterValueOfBuildTypeValidateBeforeCall(name, btLocator, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBuildParametersOfBuildType
     * @param btLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBuildParametersOfBuildTypeCall(String btLocator, Properties body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/parameters"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBuildParametersOfBuildTypeValidateBeforeCall(String btLocator, Properties body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling updateBuildParametersOfBuildType(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBuildParametersOfBuildTypeCall(btLocator, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update build parameters.
     * 
     * @param btLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return Properties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Properties updateBuildParametersOfBuildType(String btLocator, Properties body, String fields) throws ApiException {
        ApiResponse<Properties> resp = updateBuildParametersOfBuildTypeWithHttpInfo(btLocator, body, fields);
        return resp.getData();
    }

    /**
     * Update build parameters.
     * 
     * @param btLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Properties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Properties> updateBuildParametersOfBuildTypeWithHttpInfo(String btLocator, Properties body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = updateBuildParametersOfBuildTypeValidateBeforeCall(btLocator, body, fields, null, null);
        Type localVarReturnType = new TypeToken<Properties>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update build parameters. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBuildParametersOfBuildTypeAsync(String btLocator, Properties body, String fields, final ApiCallback<Properties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBuildParametersOfBuildTypeValidateBeforeCall(btLocator, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Properties>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBuildTypeVcsRoot
     * @param btLocator  (required)
     * @param vcsRootLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBuildTypeVcsRootCall(String btLocator, String vcsRootLocator, VcsRootEntry body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "vcsRootLocator" + "\\}", apiClient.escapeString(vcsRootLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBuildTypeVcsRootValidateBeforeCall(String btLocator, String vcsRootLocator, VcsRootEntry body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling updateBuildTypeVcsRoot(Async)");
        }
        
        // verify the required parameter 'vcsRootLocator' is set
        if (vcsRootLocator == null) {
            throw new ApiException("Missing the required parameter 'vcsRootLocator' when calling updateBuildTypeVcsRoot(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBuildTypeVcsRootCall(btLocator, vcsRootLocator, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a VCS root of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param vcsRootLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return VcsRootEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VcsRootEntry updateBuildTypeVcsRoot(String btLocator, String vcsRootLocator, VcsRootEntry body, String fields) throws ApiException {
        ApiResponse<VcsRootEntry> resp = updateBuildTypeVcsRootWithHttpInfo(btLocator, vcsRootLocator, body, fields);
        return resp.getData();
    }

    /**
     * Update a VCS root of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param vcsRootLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;VcsRootEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VcsRootEntry> updateBuildTypeVcsRootWithHttpInfo(String btLocator, String vcsRootLocator, VcsRootEntry body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = updateBuildTypeVcsRootValidateBeforeCall(btLocator, vcsRootLocator, body, fields, null, null);
        Type localVarReturnType = new TypeToken<VcsRootEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a VCS root of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param vcsRootLocator  (required)
     * @param body  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBuildTypeVcsRootAsync(String btLocator, String vcsRootLocator, VcsRootEntry body, String fields, final ApiCallback<VcsRootEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBuildTypeVcsRootValidateBeforeCall(btLocator, vcsRootLocator, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VcsRootEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBuildTypeVcsRootCheckoutRules
     * @param btLocator  (required)
     * @param vcsRootLocator  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBuildTypeVcsRootCheckoutRulesCall(String btLocator, String vcsRootLocator, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules"
            .replaceAll("\\{" + "btLocator" + "\\}", apiClient.escapeString(btLocator.toString()))
            .replaceAll("\\{" + "vcsRootLocator" + "\\}", apiClient.escapeString(vcsRootLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBuildTypeVcsRootCheckoutRulesValidateBeforeCall(String btLocator, String vcsRootLocator, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'btLocator' is set
        if (btLocator == null) {
            throw new ApiException("Missing the required parameter 'btLocator' when calling updateBuildTypeVcsRootCheckoutRules(Async)");
        }
        
        // verify the required parameter 'vcsRootLocator' is set
        if (vcsRootLocator == null) {
            throw new ApiException("Missing the required parameter 'vcsRootLocator' when calling updateBuildTypeVcsRootCheckoutRules(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBuildTypeVcsRootCheckoutRulesCall(btLocator, vcsRootLocator, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update checkout rules of a VCS root of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param vcsRootLocator  (required)
     * @param body  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String updateBuildTypeVcsRootCheckoutRules(String btLocator, String vcsRootLocator, String body) throws ApiException {
        ApiResponse<String> resp = updateBuildTypeVcsRootCheckoutRulesWithHttpInfo(btLocator, vcsRootLocator, body);
        return resp.getData();
    }

    /**
     * Update checkout rules of a VCS root of the matching build configuration.
     * 
     * @param btLocator  (required)
     * @param vcsRootLocator  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> updateBuildTypeVcsRootCheckoutRulesWithHttpInfo(String btLocator, String vcsRootLocator, String body) throws ApiException {
        com.squareup.okhttp.Call call = updateBuildTypeVcsRootCheckoutRulesValidateBeforeCall(btLocator, vcsRootLocator, body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update checkout rules of a VCS root of the matching build configuration. (asynchronously)
     * 
     * @param btLocator  (required)
     * @param vcsRootLocator  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBuildTypeVcsRootCheckoutRulesAsync(String btLocator, String vcsRootLocator, String body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBuildTypeVcsRootCheckoutRulesValidateBeforeCall(btLocator, vcsRootLocator, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
