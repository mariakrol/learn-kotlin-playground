/*
 * TeamCity REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.makrol.teamcity.api.swagger.client.api;

import com.makrol.teamcity.api.swagger.client.ApiCallback;
import com.makrol.teamcity.api.swagger.client.ApiClient;
import com.makrol.teamcity.api.swagger.client.ApiException;
import com.makrol.teamcity.api.swagger.client.ApiResponse;
import com.makrol.teamcity.api.swagger.client.Configuration;
import com.makrol.teamcity.api.swagger.client.Pair;
import com.makrol.teamcity.api.swagger.client.ProgressRequestBody;
import com.makrol.teamcity.api.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.makrol.teamcity.api.swagger.client.model.DisabledResponsibilities;
import com.makrol.teamcity.api.swagger.client.model.EffectiveResponsibilities;
import com.makrol.teamcity.api.swagger.client.model.EnabledResponsibilities;
import com.makrol.teamcity.api.swagger.client.model.Node;
import com.makrol.teamcity.api.swagger.client.model.Nodes;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NodeApi {
    private ApiClient apiClient;

    public NodeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NodeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for changeNodeResponsibility
     * @param nodeLocator  (required)
     * @param name  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call changeNodeResponsibilityCall(String nodeLocator, String name, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app/rest/server/nodes/{nodeLocator}/enabledResponsibilities/{name}"
            .replaceAll("\\{" + "nodeLocator" + "\\}", apiClient.escapeString(nodeLocator.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeNodeResponsibilityValidateBeforeCall(String nodeLocator, String name, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeLocator' is set
        if (nodeLocator == null) {
            throw new ApiException("Missing the required parameter 'nodeLocator' when calling changeNodeResponsibility(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling changeNodeResponsibility(Async)");
        }
        

        com.squareup.okhttp.Call call = changeNodeResponsibilityCall(nodeLocator, name, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Enables or disables responsibility for a node.
     * 
     * @param nodeLocator  (required)
     * @param name  (required)
     * @param body  (optional)
     * @return EnabledResponsibilities
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EnabledResponsibilities changeNodeResponsibility(String nodeLocator, String name, String body) throws ApiException {
        ApiResponse<EnabledResponsibilities> resp = changeNodeResponsibilityWithHttpInfo(nodeLocator, name, body);
        return resp.getData();
    }

    /**
     * Enables or disables responsibility for a node.
     * 
     * @param nodeLocator  (required)
     * @param name  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;EnabledResponsibilities&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EnabledResponsibilities> changeNodeResponsibilityWithHttpInfo(String nodeLocator, String name, String body) throws ApiException {
        com.squareup.okhttp.Call call = changeNodeResponsibilityValidateBeforeCall(nodeLocator, name, body, null, null);
        Type localVarReturnType = new TypeToken<EnabledResponsibilities>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Enables or disables responsibility for a node. (asynchronously)
     * 
     * @param nodeLocator  (required)
     * @param name  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeNodeResponsibilityAsync(String nodeLocator, String name, String body, final ApiCallback<EnabledResponsibilities> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeNodeResponsibilityValidateBeforeCall(nodeLocator, name, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EnabledResponsibilities>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllNodes
     * @param locator  (optional)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllNodesCall(String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/server/nodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locator", locator));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllNodesValidateBeforeCall(String locator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllNodesCall(locator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all TeamCity nodes.
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @return Nodes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Nodes getAllNodes(String locator, String fields) throws ApiException {
        ApiResponse<Nodes> resp = getAllNodesWithHttpInfo(locator, fields);
        return resp.getData();
    }

    /**
     * Get all TeamCity nodes.
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;Nodes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Nodes> getAllNodesWithHttpInfo(String locator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAllNodesValidateBeforeCall(locator, fields, null, null);
        Type localVarReturnType = new TypeToken<Nodes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all TeamCity nodes. (asynchronously)
     * 
     * @param locator  (optional)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllNodesAsync(String locator, String fields, final ApiCallback<Nodes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllNodesValidateBeforeCall(locator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Nodes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDisabledResponsibilities
     * @param nodeLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDisabledResponsibilitiesCall(String nodeLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/server/nodes/{nodeLocator}/disabledResponsibilities"
            .replaceAll("\\{" + "nodeLocator" + "\\}", apiClient.escapeString(nodeLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDisabledResponsibilitiesValidateBeforeCall(String nodeLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeLocator' is set
        if (nodeLocator == null) {
            throw new ApiException("Missing the required parameter 'nodeLocator' when calling getDisabledResponsibilities(Async)");
        }
        

        com.squareup.okhttp.Call call = getDisabledResponsibilitiesCall(nodeLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all effective responsibilities for a node matching the locator.
     * 
     * @param nodeLocator  (required)
     * @param fields  (optional)
     * @return DisabledResponsibilities
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DisabledResponsibilities getDisabledResponsibilities(String nodeLocator, String fields) throws ApiException {
        ApiResponse<DisabledResponsibilities> resp = getDisabledResponsibilitiesWithHttpInfo(nodeLocator, fields);
        return resp.getData();
    }

    /**
     * Get all effective responsibilities for a node matching the locator.
     * 
     * @param nodeLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;DisabledResponsibilities&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DisabledResponsibilities> getDisabledResponsibilitiesWithHttpInfo(String nodeLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getDisabledResponsibilitiesValidateBeforeCall(nodeLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<DisabledResponsibilities>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all effective responsibilities for a node matching the locator. (asynchronously)
     * 
     * @param nodeLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDisabledResponsibilitiesAsync(String nodeLocator, String fields, final ApiCallback<DisabledResponsibilities> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDisabledResponsibilitiesValidateBeforeCall(nodeLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DisabledResponsibilities>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEffectiveResponsibilities
     * @param nodeLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEffectiveResponsibilitiesCall(String nodeLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/server/nodes/{nodeLocator}/effectiveResponsibilities"
            .replaceAll("\\{" + "nodeLocator" + "\\}", apiClient.escapeString(nodeLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEffectiveResponsibilitiesValidateBeforeCall(String nodeLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeLocator' is set
        if (nodeLocator == null) {
            throw new ApiException("Missing the required parameter 'nodeLocator' when calling getEffectiveResponsibilities(Async)");
        }
        

        com.squareup.okhttp.Call call = getEffectiveResponsibilitiesCall(nodeLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all effective responsibilities for a node matching the locator.
     * 
     * @param nodeLocator  (required)
     * @param fields  (optional)
     * @return EffectiveResponsibilities
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EffectiveResponsibilities getEffectiveResponsibilities(String nodeLocator, String fields) throws ApiException {
        ApiResponse<EffectiveResponsibilities> resp = getEffectiveResponsibilitiesWithHttpInfo(nodeLocator, fields);
        return resp.getData();
    }

    /**
     * Get all effective responsibilities for a node matching the locator.
     * 
     * @param nodeLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;EffectiveResponsibilities&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EffectiveResponsibilities> getEffectiveResponsibilitiesWithHttpInfo(String nodeLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getEffectiveResponsibilitiesValidateBeforeCall(nodeLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<EffectiveResponsibilities>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all effective responsibilities for a node matching the locator. (asynchronously)
     * 
     * @param nodeLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEffectiveResponsibilitiesAsync(String nodeLocator, String fields, final ApiCallback<EffectiveResponsibilities> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEffectiveResponsibilitiesValidateBeforeCall(nodeLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EffectiveResponsibilities>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEnabledResponsibilities
     * @param nodeLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEnabledResponsibilitiesCall(String nodeLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/server/nodes/{nodeLocator}/enabledResponsibilities"
            .replaceAll("\\{" + "nodeLocator" + "\\}", apiClient.escapeString(nodeLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEnabledResponsibilitiesValidateBeforeCall(String nodeLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeLocator' is set
        if (nodeLocator == null) {
            throw new ApiException("Missing the required parameter 'nodeLocator' when calling getEnabledResponsibilities(Async)");
        }
        

        com.squareup.okhttp.Call call = getEnabledResponsibilitiesCall(nodeLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all enabled responsibilities for a node matching the locator.
     * 
     * @param nodeLocator  (required)
     * @param fields  (optional)
     * @return EnabledResponsibilities
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EnabledResponsibilities getEnabledResponsibilities(String nodeLocator, String fields) throws ApiException {
        ApiResponse<EnabledResponsibilities> resp = getEnabledResponsibilitiesWithHttpInfo(nodeLocator, fields);
        return resp.getData();
    }

    /**
     * Get all enabled responsibilities for a node matching the locator.
     * 
     * @param nodeLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;EnabledResponsibilities&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EnabledResponsibilities> getEnabledResponsibilitiesWithHttpInfo(String nodeLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getEnabledResponsibilitiesValidateBeforeCall(nodeLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<EnabledResponsibilities>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all enabled responsibilities for a node matching the locator. (asynchronously)
     * 
     * @param nodeLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEnabledResponsibilitiesAsync(String nodeLocator, String fields, final ApiCallback<EnabledResponsibilities> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEnabledResponsibilitiesValidateBeforeCall(nodeLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EnabledResponsibilities>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNode
     * @param nodeLocator  (required)
     * @param fields  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodeCall(String nodeLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/rest/server/nodes/{nodeLocator}"
            .replaceAll("\\{" + "nodeLocator" + "\\}", apiClient.escapeString(nodeLocator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeValidateBeforeCall(String nodeLocator, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeLocator' is set
        if (nodeLocator == null) {
            throw new ApiException("Missing the required parameter 'nodeLocator' when calling getNode(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodeCall(nodeLocator, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a node matching the locator.
     * 
     * @param nodeLocator  (required)
     * @param fields  (optional)
     * @return Node
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Node getNode(String nodeLocator, String fields) throws ApiException {
        ApiResponse<Node> resp = getNodeWithHttpInfo(nodeLocator, fields);
        return resp.getData();
    }

    /**
     * Get a node matching the locator.
     * 
     * @param nodeLocator  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;Node&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Node> getNodeWithHttpInfo(String nodeLocator, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getNodeValidateBeforeCall(nodeLocator, fields, null, null);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a node matching the locator. (asynchronously)
     * 
     * @param nodeLocator  (required)
     * @param fields  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodeAsync(String nodeLocator, String fields, final ApiCallback<Node> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeValidateBeforeCall(nodeLocator, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
